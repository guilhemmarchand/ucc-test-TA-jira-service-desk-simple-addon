(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{255:function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(63),a=n.n(r),o=n(0),i=n.n(o),l=n(3),c=n.n(l),s=Object(o.createContext)({rowData:{},setRowData:function(){}}),u=function(e){var t=e.children,n=Object(o.useState)({}),r=a()(n,2),l=r[0],c=r[1],u=Object(o.useState)(""),d=a()(u,2),p=d[0],f=d[1],h=Object(o.useState)("all"),m=a()(h,2),v=m[0],g=m[1],b=Object(o.useState)(10),y=a()(b,2),O=y[0],E=y[1],j=Object(o.useState)(0),k=a()(j,2),w=k[0],C=k[1];return i.a.createElement(s.Provider,{value:{rowData:l,setRowData:c,searchText:p,setSearchText:f,searchType:v,setSearchType:g,pageSize:O,setPageSize:E,currentPage:w,setCurrentPage:C}},t)};u.propTypes={children:c.a.oneOfType([c.a.arrayOf(c.a.node),c.a.node]).isRequired},t.b=s},256:function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"c",(function(){return a})),n.d(t,"d",(function(){return o})),n.d(t,"b",(function(){return i}));var r="clone",a="create",o="edit",i="config"},257:function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));var r=n(251),a=n.n(r),o=n(74),i=n.n(o),l=n(131),c=n(130),s=n(40);function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){a()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var p=function(e){var t=e.serviceName,n=e.endpointUrl,r=e.params,a=e.body,o=e.cancelToken,u=e.customHeaders,p=void 0===u?{}:u,f=e.method,h=void 0===f?"get":f,m=e.handleError,v=void 0!==m&&m,g=e.callbackOnError,b=void 0===g?function(){}:g,y=t?Object(s.b)(t):n,O={app:l.app,owner:"nobody"},E={"X-Splunk-Form-Key":l.CSRFToken,"X-Requested-With":"XMLHttpRequest","Content-Type":"application/json"},j=Object.assign(E,p),k=Object(c.createRESTURL)(y,O),w={output_mode:"json"};r&&(w=d(d({},w),r));var C={params:w,method:h,url:k,credentials:"include",headers:j,cancelToken:o};return"post"===h&&(C.data=a),v?i()(C).catch((function(e){var t="";return i.a.isCancel(e)||(t=e.response?"Error response received from server: ".concat(e.response.data.messages[0].text):e.request?"No response received while making request to ".concat(y):"Error making ".concat(h," request to ").concat(y),Object(s.c)(t,"error"),b(e)),Promise.reject(e)})):i()(C)}},280:function(e,t,n){"use strict";n.d(t,"b",(function(){return u})),n.d(t,"a",(function(){return d}));var r,a,o,i=n(13),l=n.n(i),c=n(1),s=n(14),u=c.default.div.attrs({className:"pageTitle"})(r||(r=l()(["\n    &.pageTitle {\n        font-size: ",";\n        margin-bottom: 20px;\n    }\n"])),s.variables.fontSizeXXLarge),d=c.default.div.attrs({className:"pageSubtitle"})(a||(a=l()(["\n    &.pageSubtitle {\n        font-size: ",";\n        margin-bottom: 10px;\n    }\n"])),s.variables.fontSize);c.default.div(o||(o=l()(["\n    .table-caption-inner {\n        text-align: left;\n    }\n"])))},284:function(e,t,n){"use strict";var r=n(4);t.a=function(){return new URLSearchParams(Object(r.e)().search)}},285:function(e,t,n){"use strict";var r,a=n(28),o=n.n(a),i=n(29),l=n.n(i),c=n(119),s=n.n(c),u=n(31),d=n.n(u),p=n(32),f=n.n(p),h=n(20),m=n.n(h),v=n(251),g=n.n(v),b=n(13),y=n.n(b),O=n(0),E=n.n(O),j=n(3),k=n.n(j),w=n(30),C=n.n(w),R=n(25),S=n.n(R),x=n(1),N=n(67),M=n.n(N),P=n(6),_=n(256),T=n(288);function F(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=m()(e);if(t){var a=m()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return f()(this,n)}}var D=Object(x.default)(S.a)(r||(r=y()(["\n    width: 800px;\n"]))),V=function(e){d()(n,e);var t=F(n);function n(e){var r;return o()(this,n),r=t.call(this,e),g()(s()(r),"handleRequestClose",(function(){r.props.handleRequestClose()})),g()(s()(r),"handleSubmit",(function(){r.form.current.handleSubmit()&&r.handleRequestClose()})),g()(s()(r),"handleFormSubmit",(function(e,t){r.setState({isSubmititng:e}),t&&r.handleRequestClose()})),r.form=E.a.createRef(),r.state={isSubmititng:!1},e.mode===_.c?r.buttonText=Object(P._)("Add"):e.mode===_.a?r.buttonText=Object(P._)("Save"):e.mode===_.d?r.buttonText=Object(P._)("Update"):r.buttonText=Object(P._)("Submit"),r}return l()(n,[{key:"render",value:function(){return E.a.createElement(D,{open:this.props.open},E.a.createElement(S.a.Header,{title:this.props.formLabel,onRequestClose:this.handleRequestClose}),E.a.createElement(S.a.Body,null,E.a.createElement(T.a,{ref:this.form,page:this.props.page,serviceName:this.props.serviceName,mode:this.props.mode,stanzaName:this.props.stanzaName,handleFormSubmit:this.handleFormSubmit})),E.a.createElement(S.a.Footer,null,E.a.createElement(C.a,{appearance:"secondary",onClick:this.handleRequestClose,label:Object(P._)("Cancel"),disabled:this.state.isSubmititng}),E.a.createElement(C.a,{className:"saveBtn",appearance:"primary",label:this.state.isSubmititng?E.a.createElement(M.a,null):this.buttonText,onClick:this.handleSubmit,disabled:this.state.isSubmititng})))}}]),n}(O.Component);V.propTypes={page:k.a.string,open:k.a.bool,handleRequestClose:k.a.func,serviceName:k.a.string,mode:k.a.string,stanzaName:k.a.string,formLabel:k.a.string},t.a=V},288:function(e,t,n){"use strict";var r,a=n(416),o=n.n(a),i=n(417),l=n.n(i),c=n(28),s=n.n(c),u=n(29),d=n.n(u),p=n(119),f=n.n(p),h=n(31),m=n.n(h),v=n(32),g=n.n(v),b=n(20),y=n.n(b),O=n(251),E=n.n(O),j=n(13),k=n.n(j),w=n(421),C=n.n(w),R=n(0),S=n.n(R),x=n(3),N=n.n(x),M=n(281),P=n.n(M),_=n(462),T=n(423),F=n.n(T),D=n(83),V=n.n(D),q=n(1),A=n(425),z=n.n(A),I=n(120),B=n.n(I),L=q.default.span(r||(r=k()(["\n    color: ",";\n"])),(function(e){return e.color}));function H(e){return S.a.createElement("div",{"data-test":"msg-markdown"},(t=e.text,"link"===e.markdownType?t=S.a.createElement(B.a,{to:e.link},e.text):"hybrid"===e.markdownType?(t=function(e,t){for(var n=[],r=0;r<e.length;r+=1){var a=t(e[r]);n=n.concat(a)}return n}(t.split(e.token),(function(t){return[t,S.a.createElement(B.a,{key:t,to:e.link},e.linkText)]}))).pop():"text"===e.markdownType&&(t=S.a.createElement(L,{color:e.color},e.text)),t));var t}H.propTypes={text:N.a.string,link:N.a.string,color:N.a.string,markdownType:N.a.string,token:N.a.string,linkText:N.a.string};var U=S.a.memo(H);function $(e){var t=e.controlOptions,n=t.text,r=t.link;return S.a.createElement(B.a,{to:r,openInNewContext:!0},n)}$.propTypes={controlOptions:N.a.object};var W,K=$,Z=n(260),G=n.n(Z);function X(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y()(e);if(t){var a=y()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return g()(this,n)}}var J=Object(q.default)(G.a)(W||(W=k()(["\n    width: 320px !important;\n"]))),Q=function(e){m()(n,e);var t=X(n);function n(){var e;s()(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return e=t.call.apply(t,[this].concat(a)),E()(f()(e),"handleChange",(function(t,n){var r=n.value;e.props.handleChange(e.props.field,r)})),e}return d()(n,[{key:"render",value:function(){var e,t;return S.a.createElement(J,{inline:!0,error:this.props.error,placeholder:null===(e=this.props)||void 0===e||null===(t=e.controlOptions)||void 0===t?void 0:t.placeholder,className:this.props.field,disabled:this.props.disabled,value:null===this.props.value||void 0===this.props.value?"":this.props.value.toString(),onChange:this.handleChange,type:this.props.encrypted?"password":"text"})}}]),n}(R.Component);Q.propTypes={value:N.a.oneOfType([N.a.string,N.a.number]),handleChange:N.a.func.isRequired,field:N.a.string,error:N.a.bool,controlOptions:N.a.object,encrypted:N.a.bool,disabled:N.a.bool};var Y,ee,te=Q,ne=n(63),re=n.n(ne),ae=n(321),oe=n.n(ae),ie=n(322),le=n.n(ie),ce=n(445),se=n.n(ce),ue=n(30),de=n.n(ue),pe=n(139),fe=n.n(pe),he=n(6),me=n(74),ve=n.n(me),ge=n(257),be=n(40),ye=Object(q.default)(le.a)(Y||(Y=k()(["\n    width: 320px !important;\n"]))),Oe=q.default.div(ee||(ee=k()(["\n    div:first-child {\n        width: 320px !important;\n    }\n"])));function Ee(e){var t=e.field,n=e.disabled,r=void 0!==n&&n,a=e.error,o=void 0!==a&&a,i=e.controlOptions,l=e.dependencyValues,c=oe()(e,["field","disabled","error","controlOptions","dependencyValues"]),s=i.endpointUrl,u=i.denyList,d=i.allowList,p=i.placeholder,f=void 0===p?Object(he._)("Select a value"):p,h=i.dependencies,m=i.createSearchChoice,v=i.referenceName,g=i.disableSearch,b=i.labelField,y=i.autoCompleteFields,O=i.hideClearBtn;function E(e,n){c.handleChange(t,n.value)}var j=m?se.a.Option:le.a.Option,k=m?se.a.Heading:le.a.Heading;function w(e){var t=[];return e.forEach((function(e){e.value&&e.label&&t.push(S.a.createElement(j,{label:e.label,value:e.value,key:e.value})),e.children&&e.label&&(t.push(S.a.createElement(k,{key:e.label},e.label)),e.children.forEach((function(e){t.push(S.a.createElement(j,{label:e.label,value:e.value,key:e.value}))})))})),t}var C=Object(R.useState)(!1),x=re()(C,2),N=x[0],M=x[1],P=Object(R.useState)(null),_=re()(P,2),T=_[0],F=_[1];Object(R.useEffect)((function(){if(s||v||!y){var e=!0,t=ve.a.CancelToken.source(),n={CancelToken:t.token,handleError:!0};return v?n.serviceName=v:s&&(n.endpointUrl=s),l&&(n.params=l),h&&!l||(M(!0),Object(ge.a)(n).then((function(t){e&&(F(w(Object(be.a)(t.data.entry,b,d,u))),M(!1))})).catch((function(){e&&M(!1)}))),function(){t.cancel("Operation canceled."),e=!1}}F(w(y))}),[l]);var D=!!N||r,V=N?Object(he._)("Loading"):f,q=!D&&!O;return S.a.createElement(S.a.Fragment,null,m?S.a.createElement(Oe,{className:"dropdownBox"},S.a.createElement(se.a,{value:null===e.value?"":e.value,name:t,error:o,placeholder:V,disabled:D,onChange:E,inline:!0},T&&T.length>0&&T)):S.a.createElement(S.a.Fragment,null,S.a.createElement(ye,{className:"dropdownBox","data-test-loading":N,value:e.value,name:t,error:o,placeholder:V,disabled:D,onChange:E,filter:!g,inline:!0},T&&T.length>0&&T),q?S.a.createElement(de.a,{"data-test":"clear",appearance:"secondary",icon:S.a.createElement(fe.a,null),onClick:function(){return c.handleChange(t,"")}}):null))}Ee.propTypes={disabled:N.a.bool,value:N.a.string,error:N.a.bool,handleChange:N.a.func.isRequired,field:N.a.string,dependencyValues:N.a.object,controlOptions:N.a.shape({autoCompleteFields:N.a.array,endpointUrl:N.a.string,denyList:N.a.string,allowList:N.a.string,placeholder:N.a.string,dependencies:N.a.array,createSearchChoice:N.a.bool,referenceName:N.a.string,disableSearch:N.a.bool,labelField:N.a.string,hideClearBtn:N.a.bool})};var je,ke=Ee,we=n(446),Ce=n.n(we),Re=n(7),Se=Object(q.default)(Ce.a)(je||(je=k()(["\n    width: 320px !important;\n"])));function xe(e){var t=e.field,n=e.disabled,r=void 0!==n&&n,a=e.error,o=void 0!==a&&a,i=e.value,l=e.controlOptions,c=e.dependencyValues,s=oe()(e,["field","disabled","error","value","controlOptions","dependencyValues"]),u=l.endpointUrl,d=l.denyList,p=l.allowList,f=l.items,h=l.dependencies,m=l.referenceName,v=l.placeholder,g=l.createSearchChoice,b=l.labelField,y=l.delimiter,O=void 0===y?",":y;function E(e){return e.map((function(e){return S.a.createElement(Ce.a.Option,{label:e.label,value:e.value,key:e.value})}))}var j=Object(R.useState)(!1),k=re()(j,2),w=k[0],C=k[1],x=Object(R.useState)(null),N=re()(x,2),M=N[0],P=N[1];Object(R.useEffect)((function(){if(u||!f){var e=!0,t=ve.a.CancelToken.source(),n={CancelToken:t.token,handleError:!0};return m?n.serviceName=m:u&&(n.endpointUrl=u),c&&(n.params=c),h&&!c||(C(!0),Object(ge.a)(n).then((function(t){e&&(P(E(Object(be.a)(t.data.entry,b,p,d))),C(!1))})).catch((function(){e&&C(!1)}))),function(){t.cancel("Operation canceled."),e=!1}}P(E(f))}),[c]);var _=!!w||r,T=w?Object(Re.a)(115):v,F=i?i.split(O):[];return S.a.createElement(Se,{values:F,error:o,name:t,placeholder:T,disabled:_,allowNewValues:g,onChange:function(e,n){var r=n.values;s.handleChange(t,r.join(O))},inline:!0},M&&M.length>0&&M)}xe.propTypes={disabled:N.a.bool,value:N.a.string,error:N.a.bool,handleChange:N.a.func.isRequired,field:N.a.string,dependencyValues:N.a.object,controlOptions:N.a.shape({delimiter:N.a.string,placeholder:N.a.string,createSearchChoice:N.a.bool,referenceName:N.a.string,dependencies:N.a.array,endpointUrl:N.a.string,denyList:N.a.string,allowList:N.a.string,labelField:N.a.string,items:N.a.arrayOf(N.a.shape({label:N.a.string.isRequired,value:N.a.string.isRequired}))})};var Ne=xe,Me=n(263),Pe=n.n(Me);function _e(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y()(e);if(t){var a=y()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return g()(this,n)}}var Te=function(e){m()(n,e);var t=_e(n);function n(){var e;s()(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return e=t.call.apply(t,[this].concat(a)),E()(f()(e),"handleChange",(function(){e.props.value&&!Object(be.e)(e.props.value)?e.props.handleChange(e.props.field,0):e.props.handleChange(e.props.field,1)})),e}return d()(n,[{key:"render",value:function(){return S.a.createElement(Pe.a,{key:this.props.field,value:this.props.field,onClick:this.handleChange,disabled:this.props.disabled,selected:!(!this.props.value||Object(be.e)(this.props.value)),appearance:"checkbox"})}}]),n}(R.Component);Te.propTypes={value:N.a.oneOfType([N.a.bool,N.a.number,N.a.string]),handleChange:N.a.func.isRequired,field:N.a.string,disabled:N.a.bool};var Fe,De=Te,Ve=n(449),qe=n.n(Ve);function Ae(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y()(e);if(t){var a=y()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return g()(this,n)}}var ze=Object(q.default)(qe.a)(Fe||(Fe=k()(["\n    width: 320px;\n"]))),Ie=function(e){m()(n,e);var t=Ae(n);function n(){var e;s()(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return e=t.call.apply(t,[this].concat(a)),E()(f()(e),"handleChange",(function(t,n){var r=n.value;e.props.handleChange(e.props.field,r)})),e}return d()(n,[{key:"render",value:function(){return S.a.createElement(ze,{inline:!0,onChange:this.handleChange,value:this.props.value,key:this.props.field},this.props.controlOptions.items.map((function(e){return S.a.createElement(qe.a.Option,{key:e.value,value:e.value,label:e.label})})))}}]),n}(R.Component);Ie.propTypes={value:N.a.string,handleChange:N.a.func.isRequired,field:N.a.string,controlOptions:N.a.object};var Be=Ie,Le=n(450),He=n.n(Le);function Ue(e){var t=e.controlOptions.defaultValue;return S.a.createElement(He.a,null,t)}Ue.propTypes={controlOptions:N.a.object};var $e=Ue,We=n(34);function Ke(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y()(e);if(t){var a=y()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return g()(this,n)}}var Ze=function(e){m()(n,e);var t=Ke(n);function n(e){var r;return s()(this,n),r=t.call(this,e),E()(f()(r),"loadCustomControl",(function(e,t,n){return new Promise((function(r){"external"===t?import("".concat(Object(We.a)(),"/custom/").concat(e,".js")).then((function(e){var t=e.default;r(t)})):require(["app/".concat(n,"/js/build/custom/").concat(e)],(function(e){r(e)}))}))})),E()(f()(r),"setValue",(function(e){r.props.handleChange(r.props.field,e)})),r.state={loading:!0},r.shouldRender=!0,r}return d()(n,[{key:"componentDidMount",value:function(){var e=this,t=Object(be.d)(),n=t.meta.name;this.loadCustomControl(this.props.controlOptions.src,this.props.controlOptions.type,n).then((function(n){var r=new n(t,e.el,e.props.data,e.setValue,e.props.utilCustomFunctions);r.render(),"function"==typeof r.validation&&e.props.addCustomValidator(e.props.field,r.validation),e.setState({loading:!1})}))}},{key:"shouldComponentUpdate",value:function(e,t){return!(t.loading||!this.shouldRender)&&(this.shouldRender=!1,!0)}},{key:"render",value:function(){var e=this;return S.a.createElement(S.a.Fragment,null,this.state.loading&&Object(he._)("Loading..."),S.a.createElement("span",{ref:function(t){e.el=t},style:{visibility:this.state.loading?"hidden":"visible"}}))}}]),n}(R.Component);Ze.propTypes={data:N.a.object,field:N.a.string,handleChange:N.a.func,controlOptions:N.a.object,addCustomValidator:N.a.func,utilCustomFunctions:N.a.object};var Ge,Xe,Je={text:te,singleSelect:ke,helpLink:K,multipleSelect:Ne,checkbox:De,radio:Be,placeholder:$e,custom:Ze};function Qe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ye(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Qe(Object(n),!0).forEach((function(t){E()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Qe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function et(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y()(e);if(t){var a=y()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return g()(this,n)}}var tt=q.default.div(Ge||(Ge=k()(["\n    margin-left: 30px;\n"]))),nt=Object(q.default)(z.a).attrs((function(e){return{"data-name":e.dataName}}))(Xe||(Xe=k()(["\n    width: 100%;\n    max-width: 100%;\n\n    > * {\n        &:first-child {\n            width: 240px !important;\n        }\n        &:nth-child(3) {\n            margin-left: 270px !important;\n            width: 320px;\n        }\n    }\n"]))),rt=function(e){m()(n,e);var t=et(n);function n(e){var r,a;return s()(this,n),a=t.call(this,e),E()(f()(a),"isString",(function(e){return!!("string"==typeof e||e instanceof String)})),a.controlType=a.isString(e.entity.type)?Je[e.entity.type]:null,a.options=a.props.entity.options,a.props.entity.required||Object.prototype.hasOwnProperty.call(a.props.entity,"oauth_field")||null!==(r=a.options)&&void 0!==r&&r.placeholder||(a.options=Ye(Ye({},a.options),{},{placeholder:"optional"})),a}return d()(n,[{key:"render",value:function(){var e,t=this.props.entity,n=t.field,r=t.type,a=t.label,o=t.tooltip,i=t.help,l=t.encrypted,c=void 0!==l&&l,s=this.props.utilityFuncts,u=s.handleChange,d=s.addCustomValidator,p=s.utilCustomFunctions,f=this.props.markdownMessage||{},h=f.text,m=f.link,v=f.color,g=f.markdownType,b=f.token,y=f.linkText;if("custom"===this.props.entity.type){var O={value:this.props.value,mode:this.props.mode,serviceName:this.props.serviceName};e=this.controlType?S.a.createElement(this.controlType,{data:O,field:n,handleChange:u,addCustomValidator:d,utilCustomFunctions:p,controlOptions:this.options}):"No View Found for ".concat(r," type")}else e=this.controlType?S.a.createElement(this.controlType,{handleChange:u,value:this.props.value,field:n,controlOptions:this.options,error:this.props.error,disabled:this.props.disabled,encrypted:c,dependencyValues:this.props.dependencyValues}):"No View Found for ".concat(r," type");var E=S.a.createElement(S.a.Fragment,null,S.a.createElement(U,{text:h||"",link:m||"",color:v||"",markdownType:g||"",token:b||"",linkText:y||""}),i);return this.props.display&&S.a.createElement(nt,{label:a,help:E,tooltip:o,error:this.props.error,dataName:n},S.a.createElement(tt,null,e))}}]),n}(S.a.PureComponent);rt.propTypes={mode:N.a.string,utilityFuncts:N.a.object,value:N.a.any,display:N.a.bool,error:N.a.bool,entity:N.a.object,disabled:N.a.bool,markdownMessage:N.a.object,serviceName:N.a.string,dependencyValues:N.a.object};var at=rt,ot={url:{regex:/^(?:(?:https?|ftp|opc\.tcp):\/\/)?(?:\S+(?::\S*)?@)?(?:(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]+-?_?)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,}))?)(?::\d{2,5})?(?:\/[^\s]*)?$/,inputValueType:Object(Re.a)(111)},email:{regex:/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,inputValueType:Object(Re.a)(112)},ipv4:{regex:/^(?:(?:[0-1]?\d{1,2}|2[0-4]\d|25[0-5])(?:\.|$)){4}$/,inputValueType:Object(Re.a)(113)},date:{regex:/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,inputValueType:Object(Re.a)(114)}},it=n(101);var lt,ct,st=function(){function e(t){s()(this,e),E()(this,"checkIsFieldHasInput",(function(e){return void 0!==e&&""!==e&&null!==e})),this.entities=t,this.isName=t.find((function(e){return"name"===e.field}))}return d()(e,[{key:"RequiredValidator",value:function(e,t,n){return!this.checkIsFieldHasInput(n)&&{errorField:e,errorMsg:Object(Re.a)(6,[t])}}},{key:"StringValidator",value:function(e,t,n,r){var a=Object(it.d)(n.minLength,n.maxLength).error;return a?{errorField:e,errorMsg:a}:this.checkIsFieldHasInput(r)&&r.length>n.maxLength?{errorField:e,errorMsg:n.errorMsg?n.errorMsg:Object(Re.a)(18,[t,n.maxLength])}:!!(this.checkIsFieldHasInput(r)&&r.length<n.minLength)&&{errorField:e,errorMsg:n.errorMsg?n.errorMsg:Object(Re.a)(17,[t,n.minLength])}}},{key:"RegexValidator",value:function(e,t,n,r){var a=Object(it.c)(n.pattern),o=a.error,i=a.result;return o?{errorField:e,errorMsg:o}:!(!this.checkIsFieldHasInput(r)||i.test(r))&&{errorField:e,errorMsg:n.errorMsg?n.errorMsg:Object(Re.a)(15,[t,n.pattern])}}},{key:"PreDefinedRegexValidator",value:function(e,t,n,r,a,o){var i=Object(it.c)(a),l=i.error,c=i.result;return l?{errorField:e,errorMsg:l}:!(!this.checkIsFieldHasInput(r)||c.test(r))&&{errorField:e,errorMsg:n.errorMsg?n.errorMsg:Object(Re.a)(19,[t,o])}}},{key:"NumberValidator",value:function(e,t,n,r){var a=Object(it.b)(n.range).error;if(a)return{errorField:e,errorMsg:a};var o=Number(r);return Number.isNaN(o)?{errorField:e,errorMsg:n.errorMsg?n.errorMsg:Object(Re.a)(16,[t])}:!!(this.checkIsFieldHasInput(r)&&o>n.range[1]||o<n.range[0])&&{errorField:e,errorMsg:n.errorMsg?n.errorMsg:Object(Re.a)(8,[t,n.range[0],n.range[1]])}}},{key:"doValidation",value:function(t){if(this.isName){var n=t.name,r=this.isName.label;if(void 0===n||""===n||null==n)return{errorField:"name",errorMsg:Object(Re.a)(0,[r])};if(!("string"==typeof n||n instanceof String))return{errorField:"name",errorMsg:Object(Re.a)(1,[r])};if(n.startsWith("_")||"."===n||".."===n||"default"===n.toLowerCase())return{errorField:"name",errorMsg:Object(Re.a)(3,[r])};if(["*","\\","[","]","(",")","?",":"].some((function(e){return n.indexOf(e)>-1})))return{errorField:"name",errorMsg:Object(Re.a)(3,[r])};if(n.length>=1024)return{errorField:"name",errorMsg:Object(Re.a)(22,[r])}}var a,o,i;for(o=0;o<this.entities.length;o+=1){if(!0===this.entities[o].required&&(a=this.RequiredValidator(this.entities[o].field,this.entities[o].label,t[this.entities[o].field])))return a;if(""!==t[this.entities[o].field]&&null!==t[this.entities[o].field]&&this.entities[o].validators)for(i=0;i<this.entities[o].validators.length;i+=1)switch(this.entities[o].validators[i].type){case"string":if(a=this.StringValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field]))return a;break;case"regex":if(a=this.RegexValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field]))return a;break;case"number":if(a=this.NumberValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field]))return a;break;case"url":if(a=this.PreDefinedRegexValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field],ot.url.regex,ot.url.inputValueType))return a;break;case"date":if(a=this.PreDefinedRegexValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field],ot.date.regex,ot.date.inputValueType))return a;break;case"email":if(a=this.PreDefinedRegexValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field],ot.email.regex,ot.email.inputValueType))return a;break;case"ipv4":if(a=this.PreDefinedRegexValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field],ot.ipv4.regex,ot.ipv4.inputValueType))return a;break;case"custom":if(a=e.CustomValidator(this.entities[o].validators[i].validatorFunc,this.entities[o].field,t[this.entities[o].field]))return a}}return!1}}],[{key:"CustomValidator",value:function(e,t,n){var r=e(t,n);return"string"==typeof r&&{errorField:t,errorMsg:r}}}]),e}(),ut=n(256),dt=n(43),pt=n(255);function ft(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ht(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ft(Object(n),!0).forEach((function(t){E()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ft(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function mt(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y()(e);if(t){var a=y()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return g()(this,n)}}var vt=Object(q.default)(F.a)(lt||(lt=k()(["\n    span {\n        button {\n            background-color: transparent;\n            font-size: 16px;\n            margin: 10px 0;\n\n            &:hover:not([disabled]),\n            &:focus:not([disabled]),\n            &:active:not([disabled]) {\n                background-color: transparent;\n                box-shadow: none;\n            }\n        }\n    }\n\n    .collapsible-element {\n        padding-top: 15px;\n    }\n"]))),gt=q.default.div(ct||(ct=k()(["\n    padding: 6px 10px;\n    background-color: #f2f4f5;\n"]))),bt=function(e){m()(n,e);var t=mt(n);function n(e,r){var a;s()(this,n),a=t.call(this,e),E()(f()(a),"updateEntitiesForGroup",(function(e){a.groups&&a.groups.length&&a.groups.forEach((function(t){var n;t&&null!==(n=t.fields)&&void 0!==n&&n.length&&t.fields.forEach((function(t){var n=e.entity.findIndex((function(e){return e.field===t}));if(-1!==n){var r=JSON.parse(JSON.stringify(e.entity[n]));r.isGrouping=!0,a.entities.splice(n,1,r)}}))}))})),E()(f()(a),"handleSubmit",(function(){if((a.clearErrorMsg(),a.props.handleFormSubmit(!0,!1),a.datadict={},Object.keys(a.state.data).forEach((function(e){a.datadict[e]=a.state.data[e].value})),a.hook&&"function"==typeof a.hook.onSave)&&!a.hook.onSave(a.datadict))return void a.props.handleFormSubmit(!1,!1);var e=function(){var e;if((Object.keys(a.state.data).forEach((function(e){a.datadict[e]=a.state.data[e].value})),[ut.c,ut.a].includes(a.props.mode))&&Boolean(Object.values(a.context.rowData).find((function(e){return Object.keys(e).find((function(e){return e===a.datadict.name}))})))){var t=a.entities.findIndex((function(e){return"name"===e.field}));return a.setErrorFieldMsg("name",Object(Re.a)(2,[a.entities[t].label,a.datadict.name])),void a.props.handleFormSubmit(!1,!1)}if(a.isOAuth){var n=[];Object.keys(a.authMap).forEach((function(e){e!==a.datadict.auth_type&&a.isAuthVal||(n=[].concat(l()(n),l()(a.authMap[e])))})),e=a.entities.map((function(e){return n.includes(e.field)?ht({required:!0},e):e}))}else e=a.entities;var r=new st(e).doValidation(a.datadict);if(r?a.setErrorFieldMsg(r.errorField,r.errorMsg):a.options&&a.options.saveValidator&&(r=function(e,t){var n=Object(it.a)(e),r=n.error,a=n.result;if(r)return{errorMsg:r};var o=a(t);return"string"==typeof o?{errorMsg:o}:void 0}(a.options.saveValidator,a.datadict))&&a.setErrorMsg(r.errorMsg),r)a.props.handleFormSubmit(!1,!1);else if(a.isOAuth&&(a.isSingleOauth||a.isAuthVal&&"oauth"===a.datadict.auth_type)){var i="?response_type=code&client_id=".concat(a.datadict.client_id,"&redirect_uri=").concat(a.datadict.redirect_url),c=null!=a.isoauthState&&a.isoauthState;"true"!==c&&!0!==c||(a.state_enabled=!0,a.oauth_state=Object(_.a)().replace(/-/g,""),i="".concat(i,"&state=").concat(a.oauth_state));var s="https://".concat(a.datadict.endpoint).concat(a.oauthConf.authCodeEndpoint).concat(i);o()(C.a.mark((function e(){return C.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a.isCalled=!1,a.isError=!1,a.isResponse=!1,a.childWin=window.open(s,"".concat(a.appName," OAuth"),"width=".concat(a.oauthConf.popupWidth,", height=").concat(a.oauthConf.popupHeight)),window.getMessage=function(e){a.isCalled=!0,a.handleOauthToken(e)},e.next=7,a.waitForAuthentication(a.oauthConf.authTimeout);case 7:if(a.isCalled||!a.childWin.closed){e.next=11;break}return a.setErrorMsg("Authentication process interrupted. Please try again."),a.props.handleFormSubmit(!1,!1),e.abrupt("return",!1);case 11:if(a.isCalled){e.next=15;break}return a.setErrorMsg("Request time out while authenticating. Please try again."),a.props.handleFormSubmit(!1,!1),e.abrupt("return",!1);case 15:return e.next=17,a.waitForBackendResponse(30);case 17:if(a.isResponse||a.isError){e.next=22;break}return a.isError=!0,a.setErrorMsg("Request time out while getting accesstoken. Please try again."),a.props.handleFormSubmit(!1,!1),e.abrupt("return",!1);case 22:return e.abrupt("return",!0);case 23:case"end":return e.stop()}}),e)})))().then((function(){a.isError?a.props.handleFormSubmit(!1,!1):a.saveData()}))}else a.saveData()};a.hook&&"function"==typeof a.hook.onSave&&void 0!==a.onSavePromise?a.onSavePromise.then((function(){e()})):e()})),E()(f()(a),"saveData",(function(){var e=new URLSearchParams;Object.keys(a.datadict).forEach((function(t){null!=a.datadict[t]&&e.append(t,a.datadict[t])})),a.isAuthVal&&Object.keys(a.authMap).forEach((function(t){a.datadict.auth_type!==t&&a.authMap[t].forEach((function(t){e.set(t,"")}))})),a.isOAuth&&e.delete("redirect_url"),a.props.mode===ut.d&&e.delete("name"),Object(ge.a)({serviceName:a.endpoint,body:e,customHeaders:{"Content-Type":"application/x-www-form-urlencoded"},method:"post",handleError:!1}).then((function(e){var t,n=null==e||null===(t=e.data)||void 0===t?void 0:t.entry[0];if(a.props.mode!==ut.b){var r={};r[n.name]=ht(ht(ht({},a.datadict),n.content),{},{id:n.id,name:n.name,serviceName:a.props.serviceName}),a.context.setRowData(P()(a.context.rowData,E()({},a.props.serviceName,{$merge:r})))}a.hook&&"function"==typeof a.hook.onSaveSuccess&&a.hook.onSaveSuccess(),a.props.mode===ut.d?Object(be.c)('Updated "'.concat(n.name,'"'),"success"):a.props.mode===ut.b?Object(be.c)('Updated "'.concat(a.mode_config_title?a.mode_config_title:n.name,'"'),"success"):Object(be.c)('Created "'.concat(n.name,'"'),"success"),a.props.handleFormSubmit(!1,!0)})).catch((function(e){var t=Object(Re.b)(e);a.setState({errorMsg:t}),a.hook&&"function"==typeof a.hook.onSaveFail&&a.hook.onSaveFail(),a.props.handleFormSubmit(!1,!1)}))})),E()(f()(a),"handleChange",(function(e,t){var n={};if("auth_type"===e&&Object.keys(a.authMap).forEach((function(e){e===t?a.authMap[e].forEach((function(e){n[e]={display:{$set:!0}}})):a.authMap[e].forEach((function(e){n[e]={display:{$set:!1}}}))})),a.dependencyMap.has(e)){var r=a.dependencyMap.get(e);Object.keys(r).forEach((function(o){var i={},l=!0;r[o].forEach((function(n){var r=!!a.entities.find((function(e){return e.field===n})).required,o=n===e?t:a.state.data[n].value;r&&!o?(l=!1,i[n]=null):i[n]=o})),l&&(n[o]={dependencyValues:{$set:i},value:{$set:null}})}))}n[e]={value:{$set:t}};var o=P()(a.state,{data:n}),i=a.clearAllErrorMsg(o);a.setState(i),a.hookDeferred&&a.hookDeferred.then((function(){"function"==typeof a.hook.onChange&&a.hook.onChange(e,t,i)}))})),E()(f()(a),"addCustomValidator",(function(e,t){var n=a.entities.findIndex((function(t){return t.field===e})),r=[{type:"custom",validatorFunc:t}];a.entities[n].validators=r})),E()(f()(a),"setErrorFieldMsg",(function(e,t){a.setState((function(n){var r=P()(n,{data:E()({},e,{error:{$set:!0}})});return r.errorMsg=t,r}))})),E()(f()(a),"setErrorField",(function(e){a.setState((function(t){return P()(t,{data:E()({},e,{error:{$set:!0}})})}))})),E()(f()(a),"clearErrorMsg",(function(){a.state.errorMsg&&a.setState((function(e){return ht(ht({},e),{},{errorMsg:""})}))})),E()(f()(a),"setErrorMsg",(function(e){a.setState((function(t){return ht(ht({},t),{},{errorMsg:e})}))})),E()(f()(a),"clearAllErrorMsg",(function(e){var t=ht({},e||a.state);t.errorMsg="",t.warningMsg="";var n=ht({},e?e.data:a.state.data),r={};return Object.keys(n).forEach((function(e){n[e].error?r[e]=ht(ht({},n[e]),{},{error:!1}):r[e]=n[e]})),t.data=r,e?t:null})),E()(f()(a),"generateErrorMessage",(function(){return a.state.errorMsg?S.a.createElement(V.a,{appearance:"fill",type:"error"},a.state.errorMsg):null})),E()(f()(a),"generateWarningMessage",(function(){return a.state.warningMsg?S.a.createElement(V.a,{appearance:"fill",type:"warning"},a.state.warningMsg):null})),E()(f()(a),"loadHook",(function(e,t,n){return new Promise((function(r){"external"===t?import("".concat(Object(We.a)(),"/custom/").concat(e,".js")).then((function(e){var t=e.default;a.hook=new t(n,a.props.serviceName,a.state,a.props.mode,a.util),r(t)})):require(["app/".concat(a.appName,"/js/build/custom/").concat(e)],(function(e){a.hook=new e(n,a.props.serviceName,a.state,a.props.mode,a.util),r(e)}))}))})),E()(f()(a),"handleOauthToken",(function(e){if(!e||e&&e.error||void 0===e.code)return a.setErrorMsg("Error occurred while trying to authenticate. Please try Again."),a.isError=!0,a.isResponse=!0,!1;var t=e.state;if(!0===a.state_enabled&&a.oauth_state!==t)return a.setErrorMsg("Response not received from the expected sender. Please try again."),a.isError=!0,a.isResponse=!0,!1;var n=decodeURIComponent(e.code),r={method:"POST",url:"https://".concat(a.datadict.endpoint).concat(a.oauthConf.accessTokenEndpoint),grant_type:"authorization_code",client_id:a.datadict.client_id,client_secret:a.datadict.client_secret,code:n,redirect_uri:a.datadict.redirect_url},o=new URLSearchParams;Object.keys(r).forEach((function(e){o.append(e,r[e])}));var i="".concat(a.appName,"_oauth/oauth");Object(ge.a)({endpointUrl:i,body:o,customHeaders:{"Content-Type":"application/x-www-form-urlencoded"},method:"post",handleError:!1}).then((function(e){if(void 0===e.data.entry[0].content.error){var t=e.data.entry[0].content.access_token,n=e.data.entry[0].content.instance_url,r=e.data.entry[0].content.refresh_token;return a.datadict.instance_url=n,a.datadict.refresh_token=r,a.datadict.access_token=t,a.isResponse=!0,!0}return a.setErrorMsg(e.data.entry[0].content.error),a.isError=!0,a.isResponse=!0,!1})).catch((function(){return a.setErrorMsg("Error occurred while trying to authenticate. Please try Again."),a.isError=!0,a.isResponse=!0,!1}))})),E()(f()(a),"waitForAuthentication",function(){var e=o()(C.a.mark((function e(t){return C.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t-=1,!0!==a.isCalled){e.next=3;break}return e.abrupt("return",!0);case 3:if(0!==t&&!a.childWin.closed){e.next=6;break}return a.isError=!0,e.abrupt("return",!1);case 6:return e.next=8,a.sleep(a.waitForAuthentication,t);case 8:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),E()(f()(a),"waitForBackendResponse",function(){var e=o()(C.a.mark((function e(t){return C.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t+=1,!0!==a.isResponse){e.next=3;break}return e.abrupt("return",!0);case 3:if(60!==t){e.next=5;break}return e.abrupt("return",!1);case 5:return e.next=7,a.sleep(a.waitForBackendResponse,t);case 7:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),E()(f()(a),"sleep",function(){var e=o()(C.a.mark((function e(t){var n,r,o,i=arguments;return C.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,a.timeout(1e3);case 2:for(n=i.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=i[o];return e.abrupt("return",t.apply(void 0,r));case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),E()(f()(a),"timeout",(function(e){return new Promise((function(t){return setTimeout(t,e)}))})),E()(f()(a),"renderGroupElements",(function(){var e=null;return a.groups&&a.groups.length&&(e=a.groups.map((function(e){var t,n=(null===(t=e.fields)||void 0===t?void 0:t.length)&&e.fields.map((function(e){return a.entities.map((function(t){if(t.field===e){var n=a.state.data[t.field];return S.a.createElement(at,{key:t.field,utilityFuncts:a.utilControlWrapper,value:n.value,display:n.display,error:n.error,entity:t,serviceName:a.props.serviceName,mode:a.props.mode,disabled:n.disabled,markdownMessage:n.markdownMessage,dependencyValues:n.dependencyValues||null})}return null}))}));return e.options.isExpandable?S.a.createElement(vt,{title:e.label},S.a.createElement("div",{className:"collapsible-element"},n)):S.a.createElement(S.a.Fragment,null,S.a.createElement(gt,null,e.label),S.a.createElement("div",null,n))}))),e})),a.flag=!0,a.state={},a.currentInput={};var i=Object(be.d)();a.appName=i.meta.name,a.endpoint=e.mode===ut.d||e.mode===ut.b?"".concat(a.props.serviceName,"/").concat(encodeURIComponent(a.props.stanzaName)):"".concat(a.props.serviceName),a.util={setState:function(e){a.onSavePromise=new Promise((function(t){a.setState((function(t){return e(t)}),t)}))},setErrorFieldMsg:a.setErrorFieldMsg,clearAllErrorMsg:a.clearAllErrorMsg,setErrorMsg:a.setErrorMsg},a.utilControlWrapper={handleChange:a.handleChange,addCustomValidator:a.addCustomValidator,utilCustomFunctions:a.util},e.page===dt.b?i.pages.inputs.services.forEach((function(t){t.name===e.serviceName&&(a.groups=t.groups,a.entities=t.entity,a.updateEntitiesForGroup(t),a.options=t.options,t.hook&&(a.hookDeferred=a.loadHook(t.hook.src,t.hook.type,i)),e.mode!==ut.d&&e.mode!==ut.a||(a.currentInput=r.rowData[e.serviceName][e.stanzaName]))})):i.pages.configuration.tabs.forEach((function(t){(t.table?t.name===e.serviceName:t.name===e.stanzaName)&&(a.entities=t.entity,a.options=t.options,t.hook&&(a.hookDeferred=a.loadHook(t.hook.src,t.hook.type,i)),!t.table||e.mode!==ut.d&&e.mode!==ut.a?e.mode===ut.b?(a.currentInput=e.currentServiceState,a.mode_config_title=t.title):a.currentInput=r.rowData[e.serviceName]:a.currentInput=r.rowData[e.serviceName][e.stanzaName])})),a.dependencyMap=new Map,a.isOAuth=!1,a.isAuthVal=!1,a.authMap={};var c={},u=[];a.entities.forEach((function(t){if("oauth"===t.type){if(a.isOAuth=!0,e.page===dt.a&&"account"===e.serviceName){var n,r,o,i=null==t||null===(n=t.options)||void 0===n?void 0:n.auth_type;if(a.isoauthState=void 0!==(null==t||null===(r=t.options)||void 0===r?void 0:r.oauth_state_enabled)?null==t||null===(o=t.options)||void 0===o?void 0:o.oauth_state_enabled:null,i.length>1){a.isAuthVal=!0;var l={};l.value=e.mode===ut.c?i[0]:a.currentInput.auth_type,l.display=!0,l.error=!1,l.disabled=!1,c.auth_type=l;var s={field:"auth_type",type:"singleSelect",label:"Auth Type"},d={basic:"Basic Authentication",oauth:"OAuth 2.0 Authentication"};s.options={},s.options.hideClearBtn=!0,s.options.autoCompleteFields=i.map((function(e){return{label:d[e],value:e}})),u.push(s)}else a.isSingleOauth=i.includes("oauth");if(i.forEach((function(n){var r=[],o=null==t?void 0:t.options[n];o&&(o.forEach((function(t){var o={};if(e.mode===ut.c)o.value=void 0!==(null==t?void 0:t.defaultValue)?t.defaultValue:null;else{var i=void 0!==(null==t?void 0:t.encrypted)&&(null==t?void 0:t.encrypted);o.value=i?"":a.currentInput[t.field]}o.display=void 0===c.auth_type||n===c.auth_type.value,o.error=!1,o.disabled=!1,c[t.field]=o,t.type=void 0!==(null==t?void 0:t.type)?t.type:"text","redirect_url"===t.field&&(o.value=window.location.href.split("?")[0].replace("configuration","".concat(a.appName.toLowerCase(),"_redirect")),o.disabled=!0),u.push(t),r.push(t.field)})),a.authMap[n]=r)})),i.includes("oauth")){var p={};p.popupWidth=t.options.oauth_popup_width?t.options.oauth_popup_width:600,p.popupHeight=t.options.oauth_popup_height?t.options.oauth_popup_height:600,p.authTimeout=t.options.oauth_timeout?t.options.oauth_timeout:180,p.authCodeEndpoint=t.options.auth_code_endpoint?t.options.auth_code_endpoint:null,p.accessTokenEndpoint=t.options.access_token_endpoint?t.options.access_token_endpoint:null,a.oauthConf=p}}}else{var f,h,m={};if(t.encrypted=void 0!==t.encrypted&&t.encrypted,e.mode===ut.c)m.value=void 0!==t.defaultValue?t.defaultValue:null,m.display=void 0===(null==t||null===(h=t.options)||void 0===h?void 0:h.display)||t.options.display,m.error=!1,m.disabled=!1,c[t.field]=m;else if(e.mode===ut.d){var v,g;m.value=void 0!==a.currentInput[t.field]?a.currentInput[t.field]:null,m.value=t.encrypted?"":m.value,m.display=void 0===(null==t||null===(v=t.options)||void 0===v?void 0:v.display)||t.options.display,m.error=!1,m.disabled=!1,"name"===t.field?m.disabled=!0:void 0!==(null==t||null===(g=t.options)||void 0===g?void 0:g.disableonEdit)&&(m.disabled=t.options.disableonEdit),c[t.field]=m}else if(e.mode===ut.a){var b;m.value="name"===t.field||t.encrypted?"":a.currentInput[t.field],m.display=void 0===(null==t||null===(b=t.options)||void 0===b?void 0:b.display)||t.options.display,m.error=!1,m.disabled=!1,c[t.field]=m}else{if(e.mode!==ut.b)throw new Error("Invalid mode :",e.mode);var y,O;t.defaultValue=void 0!==t.defaultValue?t.defaultValue:null,m.value=void 0!==a.currentInput[t.field]?a.currentInput[t.field]:t.defaultValue,m.value=t.encrypted?"":m.value,m.display=void 0===(null==t||null===(y=t.options)||void 0===y?void 0:y.display)||t.options.display,m.error=!1,m.disabled=!1,"name"===t.field?m.disabled=!0:void 0!==(null==t||null===(O=t.options)||void 0===O?void 0:O.disableonEdit)&&(m.disabled=t.options.disableonEdit),c[t.field]=m}var j=null===(f=t.options)||void 0===f?void 0:f.dependencies;j&&j.forEach((function(e){var n=a.dependencyMap.get(e);n?n[t.field]=j:a.dependencyMap.set(e,E()({},t.field,j))})),u.push(t)}})),a.entities=u;var d={};a.dependencyMap.forEach((function(e){d=ht(ht({},d),e)}));var p={};return Object.keys(d).forEach((function(e){var t=d[e],n={},r=!0;t.forEach((function(e){var t=!!a.entities.find((function(t){return t.field===e})).required,o=c[e].value;t&&!o?(r=!1,n[e]=null):n[e]=o})),r&&(p[e]={dependencyValues:{$set:n}})})),c=P()(c,p),a.state={data:c,errorMsg:"",warningMsg:""},a.hookDeferred&&a.hookDeferred.then((function(){if("function"==typeof a.hook.onCreate)try{a.hook.onCreate()}catch(e){console.error(e)}})),a}return d()(n,[{key:"render",value:function(){var e=this;return this.flag&&(this.hookDeferred&&this.hookDeferred.then((function(){if("function"==typeof e.hook.onRender)try{e.hook.onRender()}catch(e){console.error(e)}})),this.props.mode===ut.d&&this.hookDeferred&&this.hookDeferred.then((function(){if("function"==typeof e.hook.onEditLoad)try{e.hook.onEditLoad()}catch(e){console.error(e)}})),this.flag=!1),S.a.createElement("div",null,S.a.createElement("form",{style:this.props.mode===ut.b?{marginTop:"25px"}:{}},this.generateWarningMessage(),this.generateErrorMessage(),this.renderGroupElements(),this.entities.map((function(t){if(t.isGrouping)return null;var n=e.state.data[t.field];return n.placeholder&&(t=ht(ht({},t),{},{options:ht(ht({},t.options),{},{placeholder:n.placeholder})})),S.a.createElement(at,{key:t.field,utilityFuncts:e.utilControlWrapper,value:n.value,display:n.display,error:n.error,entity:t,serviceName:e.props.serviceName,mode:e.props.mode,disabled:n.disabled,markdownMessage:n.markdownMessage,dependencyValues:n.dependencyValues||null})}))))}}]),n}(R.PureComponent);E()(bt,"contextType",pt.b),bt.propTypes={page:N.a.string,serviceName:N.a.string,stanzaName:N.a.string,currentServiceState:N.a.object,mode:N.a.string,handleFormSubmit:N.a.func};t.a=bt},316:function(e,t,n){"use strict";n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return a}));var r="page",a="modal"},323:function(e,t,n){"use strict";var r=n(251),a=n.n(r),o=n(63),i=n.n(o),l=n(0),c=n.n(l),s=n(281),u=n.n(s),d=n(74),p=n.n(d),f=n(3),h=n.n(f),m=n(68),v=n(257),g=n(40),b=n(317),y=n.n(b),O=n(282),E=n.n(O),j=n(6),k=n(284),w=n(256),C=n(43),R=n(13),S=n.n(R),x=n(412),N=n.n(x),M=n(1),P=n(28),_=n.n(P),T=n(29),F=n.n(T),D=n(119),V=n.n(D),q=n(31),A=n.n(q),z=n(32),I=n.n(z),B=n(20),L=n.n(B),H=n(34);function U(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=L()(e);if(t){var a=L()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return I()(this,n)}}var $=function(e){A()(n,e);var t=U(n);function n(e){var r;return _()(this,n),r=t.call(this,e),a()(V()(r),"loadCustomControl",(function(){return new Promise((function(e){if("external"===r.props.type)import("".concat(Object(H.a)(),"/custom/").concat(r.props.fileName,".js")).then((function(t){var n=t.default;e(n)}));else{var t=Object(g.d)().meta.name;require(["app/".concat(t,"/js/build/custom/").concat(r.props.fileName)],(function(t){return e(t)}))}}))})),r.state={loading:!0},r.shouldRender=!0,r}return F()(n,[{key:"componentDidMount",value:function(){var e=this,t=Object(g.d)();this.setState({loading:!0}),this.loadCustomControl().then((function(n){e.customControl=new n(t,e.props.serviceName,e.el,e.props.row,e.props.field),e.setState({loading:!1})}))}},{key:"shouldComponentUpdate",value:function(e,t){return this.props.row!==e.row||!(t.loading||!this.shouldRender)&&(this.shouldRender=!1,!0)}},{key:"render",value:function(){var e=this;if(!this.state.loading)try{this.customControl.render(this.props.row,this.props.field)}catch(e){console.error(e)}return c.a.createElement(c.a.Fragment,null,this.state.loading&&Object(j._)("Loading..."),c.a.createElement("span",{ref:function(t){e.el=t},style:{visibility:this.state.loading?"hidden":"visible"}}))}}]),n}(l.Component);$.propTypes={serviceName:h.a.string.isRequired,row:h.a.object.isRequired,field:h.a.string,fileName:h.a.string.isRequired,type:h.a.string};var W,K=$,Z=Object(M.default)(E.a.Cell)(W||(W=S()(["\n    border-top: none;\n"])));function G(e,t,n){var r=Object(g.d)().pages.inputs.table.customRow;return c.a.createElement(E.a.Row,{key:"".concat(t.id,"-expansion")},c.a.createElement(Z,{colSpan:e},r&&r.src?c.a.createElement(c.a.Fragment,null,c.a.createElement(K,{serviceName:t.serviceName,row:t,fileName:r.src})):c.a.createElement(N.a,{termWidth:250},function(e,t){var n=[];return null!=t&&t.length&&t.forEach((function(t){var r=Object(j._)(t.label);t.field in e&&""!==e[t.field]&&(n.push(c.a.createElement(N.a.Term,{key:t.field},r)),n.push(c.a.createElement(N.a.Description,{key:"".concat(t.field,"_decr")},t.mapping&&t.mapping[e[t.field]]?t.mapping[e[t.field]]:String(e[t.field]))))})),n}(t,n))))}var X,J,Q=n(316),Y=n(67),ee=n.n(Y),te=n(263),ne=n.n(te),re=n(319),ae=n.n(re),oe=n(283),ie=n.n(oe),le=n(413),ce=n.n(le),se=n(414),ue=n.n(se),de=n(415),pe=n.n(de),fe=Object(M.default)(E.a.Cell)(X||(X=S()(["\n    padding: 2px;\n"]))),he=M.default.div(J||(J=S()(["\n    display: flex;\n\n    .toggle_switch {\n        padding: 0;\n        margin-right: 10px;\n    }\n"])));function me(e){var t=e.row,n=e.columns,r=e.headerMapping,a=e.handleToggleActionClick,o=e.handleEditActionClick,i=e.handleCloneActionClick,s=e.handleDeleteActionClick,u=Object(l.useCallback)((function(e){return c.a.createElement(fe,{"data-column":"actions",key:e.id},c.a.createElement(ae.a,null,c.a.createElement(ie.a,{content:Object(j._)("Edit")},c.a.createElement(m.a,{appearance:"flat",icon:c.a.createElement(ce.a,{screenReaderText:null,size:1}),onClick:function(){return o(e)},className:"editBtn"})),c.a.createElement(ie.a,{content:Object(j._)("Clone")},c.a.createElement(m.a,{appearance:"flat",icon:c.a.createElement(ue.a,{screenReaderText:null,size:1}),onClick:function(){return i(e)},className:"cloneBtn"})),c.a.createElement(ie.a,{content:Object(j._)("Delete")},c.a.createElement(m.a,{appearance:"destructive",icon:c.a.createElement(pe.a,{screenReaderText:null,size:1}),onClick:function(){return s(e)},className:"deleteBtn"}))))}),[o,i,s]),d="Enabled";return t.__toggleShowSpinner?d=c.a.createElement(ee.a,null):t.disabled&&(d=null!=r&&r.disabled&&r.disabled[t.disabled]?r.disabled[t.disabled]:"Disabled"),c.a.createElement(c.a.Fragment,null,c.a.createElement(E.a.Row,y()({key:t.id},e),n&&n.length&&n.map((function(e){var n="";if(e.customCell&&e.customCell.src)n=c.a.createElement(E.a.Cell,{"data-column":e.field,key:e.field},function(e,n){return c.a.createElement(K,{serviceName:t.serviceName,field:n.field,row:e,fileName:n.customCell.src,type:n.customCell.type})}(t,e));else if("disabled"===e.field){var o,i;n=c.a.createElement(E.a.Cell,{"data-column":e.field,key:e.field},c.a.createElement(he,null,c.a.createElement(ne.a,{key:t.name,value:t.disabled,onClick:function(){return a(t)},selected:!t.disabled,disabled:t.__toggleShowSpinner,appearance:"toggle",className:"toggle_switch",selectedLabel:Object(j._)(null!=r&&null!==(o=r.disabled)&&void 0!==o&&o.false?r.disabled.false:"Enabled"),unselectedLabel:Object(j._)(null!=r&&null!==(i=r.disabled)&&void 0!==i&&i.true?r.disabled.true:"Disabled")}),c.a.createElement("span",{"data-test":"status"},d)))}else n="actions"===e.field?u(t):c.a.createElement(E.a.Cell,{"data-column":e.field,key:e.field},r[e.field]&&Object.prototype.hasOwnProperty.call(r[e.field],t[e.field])?r[e.field][t[e.field]]:t[e.field]);return n}))))}me.propTypes={row:h.a.any,columns:h.a.array,headerMapping:h.a.object,handleToggleActionClick:h.a.func,handleEditActionClick:h.a.func,handleCloneActionClick:h.a.func,handleDeleteActionClick:h.a.func};var ve,ge=c.a.memo(me),be=n(285),ye=n(30),Oe=n.n(ye),Ee=n(25),je=n.n(Ee),ke=n(83),we=n.n(ke),Ce=n(255),Re=n(7);function Se(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function xe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Se(Object(n),!0).forEach((function(t){a()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Se(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ne(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=L()(e);if(t){var a=L()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return I()(this,n)}}var Me=Object(M.default)(je.a)(ve||(ve=S()(["\n    width: 800px;\n"]))),Pe=function(e){A()(n,e);var t=Ne(n);function n(e){var r;return _()(this,n),r=t.call(this,e),a()(V()(r),"handleRequestClose",(function(){r.state.ErrorMsg="",r.props.handleRequestClose()})),a()(V()(r),"handleDelete",(function(){r.setState((function(e){return xe(xe({},e),{},{isDeleting:!0,ErrorMsg:""})}),(function(){Object(v.a)({serviceName:"".concat(r.props.serviceName,"/").concat(encodeURIComponent(r.props.stanzaName)),customHeaders:{"Content-Type":"application/x-www-form-urlencoded"},method:"delete",handleError:!1}).catch((function(e){var t=Object(Re.b)(e);return r.setState({ErrorMsg:t,isDeleting:!1}),Promise.reject(e)})).then((function(){r.context.setRowData(u()(r.context.rowData,a()({},r.props.serviceName,{$unset:[r.props.stanzaName]}))),r.setState({isDeleting:!1}),r.handleRequestClose(),Object(g.c)('Deleted "'.concat(r.props.stanzaName,'"'),"success")}))}))})),a()(V()(r),"generateErrorMessage",(function(){return r.state.ErrorMsg?c.a.createElement("div",null,c.a.createElement(we.a,{appearance:"fill",type:"error"},r.state.ErrorMsg)):null})),r.state={isDeleting:!1,ErrorMsg:""},r}return F()(n,[{key:"render",value:function(){var e;return e=this.props.page===C.b?Object(Re.a)(103,[this.props.stanzaName]):Object(Re.a)(102,[this.props.stanzaName]),c.a.createElement(Me,{open:this.props.open},c.a.createElement(je.a.Header,{title:Object(Re.a)(101),onRequestClose:this.handleRequestClose}),c.a.createElement(je.a.Body,{className:"deletePrompt"},this.generateErrorMessage(),c.a.createElement("p",null,e)),c.a.createElement(je.a.Footer,null,c.a.createElement(Oe.a,{appearance:"secondary",onClick:this.handleRequestClose,label:Object(j._)("Cancel"),disabled:this.state.isDeleting}),c.a.createElement(Oe.a,{appearance:"primary",label:this.state.isDeleting?c.a.createElement(ee.a,null):Object(j._)("Delete"),onClick:this.handleDelete,disabled:this.state.isDeleting})))}}]),n}(l.Component);a()(Pe,"contextType",Ce.b),Pe.propTypes={page:h.a.string.isRequired,open:h.a.bool,handleRequestClose:h.a.func,serviceName:h.a.string,stanzaName:h.a.string};var _e=Pe;function Te(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Fe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Te(Object(n),!0).forEach((function(t){a()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Te(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function De(e){var t=e.page,n=e.serviceName,r=e.data,a=e.handleToggleActionClick,o=e.handleOpenPageStyleDialog,s=e.handleSort,u=e.sortDir,d=e.sortKey,p=Object(g.d)(),f=Object(l.useState)({open:!1}),h=i()(f,2),v=h[0],b=h[1],O=Object(l.useState)({open:!1}),R=i()(O,2),S=R[0],x=R[1],N=Object(l.useContext)(Ce.b).rowData,M=t===C.b?p.pages.inputs.table:p.pages.configuration.tabs.filter((function(e){return e.name===n}))[0].table,P=M.moreInfo,_=M.header,T=M.header,F={};_.forEach((function(e){F[e.field]=e.mapping}));var D={};t===C.b&&p.pages.inputs.services.forEach((function(e){D[e.name]=e.style===Q.b?Q.b:Q.a}));var V=Object(k.a)();Object(l.useEffect)((function(){if(V&&(V.get("tab")===n||void 0===n))if(V.get("record")&&!v.open){var e=Object.keys(N).find((function(e){return void 0!==N[e][V.get("record")]}));if(e){var t=N[e][V.get("record")];b(Fe(Fe({},v),{},{open:!0,serviceName:t.serviceName,stanzaName:t.name,mode:w.d}))}}else!V.get("record")&&v.open&&b(Fe(Fe({},v),{},{open:!1}))}),[]);var q,A=function(){b(Fe(Fe({},v),{},{open:!1}))},z=Object(l.useCallback)((function(e){"page"===D[e.serviceName]?o(e,w.d):b(Fe(Fe({},v),{},{open:!0,serviceName:e.serviceName,stanzaName:e.name,mode:w.d}))}),[v]),I=function(){x(Fe(Fe({},S),{},{open:!1}))},B=Object(l.useCallback)((function(e){"page"===D[e.serviceName]?o(e,w.a):b(Fe(Fe({},v),{},{open:!0,serviceName:e.serviceName,stanzaName:e.name,mode:w.a}))}),[v]),L=Object(l.useCallback)((function(e){x(Fe(Fe({},S),{},{open:!0,stanzaName:e.name,serviceName:e.serviceName}))}),[S]),H=(q=[],T&&T.length&&T.forEach((function(e){q.push(Fe(Fe({},e),{},{sortKey:e.field||null}))})),q.push({label:"Actions",field:"actions",sortKey:""}),q),U=Object(l.useCallback)((function(){return c.a.createElement(E.a.Head,null,H&&H.length&&H.map((function(e){return c.a.createElement(E.a.HeadCell,{key:e.field,onSort:e.sortKey?s:null,sortKey:e.sortKey?e.sortKey:null,sortDir:e.sortKey&&e.sortKey===d?u:"none"},e.label)})))}),[H,s,u,d]);return c.a.createElement(c.a.Fragment,null,H&&H.length&&c.a.createElement(E.a,y()({stripeRows:!0},P?{rowExpansion:"single"}:{}),U(),c.a.createElement(E.a.Body,null,r&&r.length&&r.map((function(e){return c.a.createElement(ge,y()({key:e.id,row:e,columns:H,headerMapping:F,handleEditActionClick:z,handleCloneActionClick:B,handleDeleteActionClick:L,handleToggleActionClick:a},P?{expansionRow:G(H.length,e,P)}:{}))})))),r.length?null:c.a.createElement(m.b,null,"No records found"),function(){if(v.open){var e,n,r,a,o;if("inputs"===t)e=null===(r=(null===(n=p.pages)||void 0===n?void 0:n.inputs).services.find((function(e){return e.name===v.serviceName})))||void 0===r?void 0:r.title;else e=null===(o=(null===(a=p.pages)||void 0===a?void 0:a.configuration).tabs.find((function(e){return e.name===v.serviceName})))||void 0===o?void 0:o.title;return c.a.createElement(be.a,{page:t,open:v.open,handleRequestClose:A,serviceName:v.serviceName,stanzaName:v.stanzaName,mode:v.mode,formLabel:v.mode===w.a?Object(j._)("Clone ")+e:Object(j._)("Update ")+e})}return null}(),c.a.createElement(_e,{page:t,open:S.open,handleRequestClose:I,serviceName:S.serviceName,stanzaName:S.stanzaName}))}De.propTypes={page:h.a.string.isRequired,serviceName:h.a.string,data:h.a.array.isRequired,handleToggleActionClick:h.a.func,handleOpenPageStyleDialog:h.a.func,handleSort:h.a.func,sortDir:h.a.string,sortKey:h.a.string};var Ve=Object(l.memo)(De),qe=n(322),Ae=n.n(qe),ze=n(451),Ie=n.n(ze),Be=n(260),Le=n.n(Be);function He(e){var t,n,r;return c.a.createElement(Le.a,{appearance:"search",placeholder:"filter",onChange:(t=e.handleChange,n=200,function(){for(var e=arguments.length,a=new Array(e),o=0;o<e;o++)a[o]=arguments[o];var i=function(){r=null,t.apply(void 0,a)};clearTimeout(r),r=setTimeout(i,n)})})}He.propTypes={handleChange:h.a.func};var Ue,$e,We=He,Ke=M.default.div(Ue||(Ue=S()(["\n    display: flex;\n    justify-content: space-between;\n    border-top: 1px solid #ccc;\n    padding-top: 5px;\n    margin-bottom: 5px;\n"]))),Ze=M.default.div($e||($e=S()(["\n    max-width: 300px;\n    width: 100%;\n"])));function Ge(e){var t=e.page,n=e.services,r=e.totalElement,a=e.handleRequestModalOpen,o=Object(l.useContext)(Ce.b),i=o.pageSize,s=o.currentPage,u=o.setCurrentPage,d=o.setPageSize,p=o.searchType,f=o.setSearchType,h=o.setSearchText,v=t===C.b?"Input":"Item";return c.a.createElement(Ke,null,c.a.createElement("div",null,c.a.createElement("span",{className:"inputNumber"},r,r>1?Object(j._)(" ".concat(v,"s")):Object(j._)(" ".concat(v))),t===C.b?c.a.createElement(m.c,null,c.a.createElement(Ae.a,{value:i,className:"dropdownPage",onChange:function(e,t){var n=t.value;u(0),d(n)}},c.a.createElement(Ae.a.Option,{key:"10",label:Object(j._)("10 Per Page"),value:10}),c.a.createElement(Ae.a.Option,{key:"25",label:Object(j._)("25 Per Page"),value:25}),c.a.createElement(Ae.a.Option,{key:"50",label:Object(j._)("50 Per Page"),value:50})),function(){if(n.length<2)return null;var e=[];return(e=n.map((function(e){return c.a.createElement(Ae.a.Option,{key:e.name,label:e.title,value:e.name})}))).unshift(c.a.createElement(Ae.a.Option,{key:"all",label:Object(j._)("All"),value:"all"})),c.a.createElement(Ae.a,{value:p,className:"dropdownInput",onChange:function(e,t){var n=t.value;u(0),f(n)}},e)}()):null),c.a.createElement(Ze,null,c.a.createElement(We,{handleChange:function(e,t){var n=t.value;u(0),h(n)}})),c.a.createElement("div",null,c.a.createElement(Ie.a,{onChange:function(e,t){var n=t.page;return u(n-1)},current:s+1,alwaysShowLastPageLink:!0,totalPages:Math.ceil(r/i)}),t===C.b?null:c.a.createElement(Oe.a,{label:Object(j._)("Add"),appearance:"primary",onClick:a})))}Ge.propTypes={page:h.a.string,services:h.a.array,totalElement:h.a.number,handleRequestModalOpen:h.a.func};var Xe=Ge;function Je(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Qe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Je(Object(n),!0).forEach((function(t){a()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Je(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ye(e){var t=e.page,n=e.serviceName,r=e.handleRequestModalOpen,o=e.handleOpenPageStyleDialog,s=Object(l.useState)("name"),d=i()(s,2),f=d[0],h=d[1],b=Object(l.useState)("asc"),y=i()(b,2),O=y[0],E=y[1],j=Object(l.useState)(!0),k=i()(j,2),w=k[0],R=k[1],S=Object(l.useState)(null),x=i()(S,2),N=x[0],M=x[1],P=Object(l.useContext)(Ce.b),_=P.rowData,T=P.setRowData,F=P.pageSize,D=P.currentPage,V=P.searchText,q=P.searchType,A=Object(g.d)(),z=t===C.b?A.pages.inputs.table:A.pages.configuration.tabs.filter((function(e){return e.name===n}))[0].table,I=z.header,B=z.moreInfo,L=t===C.b?A.pages.inputs.services:A.pages.configuration.tabs.filter((function(e){return e.name===n})),H=function(){var e=[];L.forEach((function(t){e.push(Object(v.a)({serviceName:t.name}))})),p.a.all(e).catch((function(e){var n="",r="";return e.response?(n="Error received from server: ".concat(e.response.data.messages[0].text),r=t===C.b?"ERR0001":"ERR0002"):e.request?(n="No response received while making request to ".concat(t," services"),r="ERR0003"):(n="Error making request to ".concat(t," services"),r="ERR0004"),e.uccErrorCode=r,Object(g.c)(n),R(!1),M(e),Promise.reject(e)})).then((function(e){var t,n;t=e.map((function(e){return e.data.entry})),n={},L.forEach((function(e,r){if(e&&e.name&&t){var a={};t[r].forEach((function(t){a[t.name]=Qe(Qe({},t.content),{},{id:t.id,name:t.name,serviceName:e.name})})),n[e.name]=a}})),T(n),R(!1)}))};Object(l.useEffect)((function(){H()}),[]);var U=function(e){var t=[],n=[];return I.forEach((function(e){n.push(e.field)})),null==B||B.forEach((function(e){n.push(e.field)})),Object.keys(e).forEach((function(r){var a=!1;Object.keys(e[r]).forEach((function(o){n.includes(o)&&"string"==typeof e[r][o]&&e[r][o].toLowerCase().includes(V.toLowerCase().trim())&&!a&&(t.push(e[r]),a=!0)}))})),t};if(null!=N&&N.uccErrorCode)throw N;if(w)return c.a.createElement(m.d,null);var $=function(){var e=[];"all"===q?Object.keys(_).forEach((function(t){var n=[];n=V&&V.length?U(_[t]):Object.keys(_[t]).map((function(e){return _[t][e]})),e=e.concat(n)})):e=U(_[q]);var t=e.sort((function(e,t){return"asc"===O?e[f]>t[f]?1:-1:"desc"===O?t[f]>e[f]?1:-1:0})),n=t.slice(D*F,(D+1)*F);return D>0&&!n.length&&(n=t.slice((D-1)*F,F)),[n,e.length]}(),W=i()($,2),K=W[0],Z=W[1];return c.a.createElement(c.a.Fragment,null,c.a.createElement(Xe,{page:t,services:L,totalElement:Z,handleRequestModalOpen:r}),c.a.createElement(Ve,{page:t,serviceName:n,data:K,handleToggleActionClick:function(e){return function(e){T((function(t){return u()(t,a()({},e.serviceName,a()({},e.name,{__toggleShowSpinner:{$set:!0}})))}));var t=new URLSearchParams;t.append("disabled",!e.disabled),Object(v.a)({serviceName:"".concat(e.serviceName,"/").concat(e.name),body:t,customHeaders:{"Content-Type":"application/x-www-form-urlencoded"},method:"post",handleError:!0,callbackOnError:function(){T((function(t){return u()(t,a()({},e.serviceName,a()({},e.name,{__toggleShowSpinner:{$set:!1}})))}))}}).then((function(t){T((function(n){return u()(n,a()({},e.serviceName,a()({},e.name,{disabled:{$set:t.data.entry[0].content.disabled},__toggleShowSpinner:{$set:!1}})))}))}))}(e)},handleSort:function(e,t){var n=f===t.sortKey?O:"none";E("asc"===n?"desc":"asc"),h(t.sortKey)},sortDir:O,sortKey:f,handleOpenPageStyleDialog:o}))}Ye.propTypes={page:h.a.string,serviceName:h.a.string,handleRequestModalOpen:h.a.func,handleOpenPageStyleDialog:h.a.func};t.a=Object(l.memo)(Ye)},324:function(e,t,n){"use strict";var r=n(28),a=n.n(r),o=n(29),i=n.n(o),l=n(31),c=n.n(l),s=n(32),u=n.n(s),d=n(20),p=n.n(d),f=n(0),h=n.n(f),m=n(3),v=n.n(m),g=n(307),b=n.n(g),y=n(6),O=n(457),E=n.n(O),j=n(129),k=n.n(j),w=n(120),C=n.n(w),R={ERR0001:h.a.createElement(h.a.Fragment,null,"This is normal on Splunk search heads as they do not require an Input page. Check your installation or return to the ",h.a.createElement(C.a,{to:"configuration"},"configuration page"),"."),ERR0002:"Configuration page failed to load, the server reported internal errors which may indicate you do not have access to this page.",ERR0003:"Failed to load content due to no response from server!",ERR0004:"Failed to load content due to failed request processing!",ERR0005:"Failed to load current state for selected entity in form!"};function S(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=p()(e);if(t){var a=p()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return u()(this,n)}}var x=function(e){c()(n,e);var t=S(n);function n(e){var r;return a()(this,n),(r=t.call(this,e)).state={errorCode:null,error:null,errorInfo:null},r}return i()(n,[{key:"componentDidCatch",value:function(e,t){this.setState({error:e,errorInfo:t})}},{key:"render",value:function(){var e;return this.state.error?h.a.createElement("div",{align:"center",style:{marginTop:"10%"}},h.a.createElement(E.a,{style:{boxShadow:"10px 10px 5px #aaaaaa"}},h.a.createElement(E.a.Header,null,h.a.createElement(b.a,{style:{textAlign:"center"},level:2},h.a.createElement(k.a,{style:{fontSize:"120px",color:"#ff9900"}}),h.a.createElement("br",null),h.a.createElement("br",null),"ERR0001"===this.state.errorCode?Object(y._)("Failed to load Inputs Page"):Object(y._)("Something went wrong!"))),h.a.createElement(E.a.Body,null,this.state.errorCode?h.a.createElement(h.a.Fragment,null,Object(y._)(R[this.state.errorCode]),h.a.createElement("br",null),h.a.createElement("br",null)):null,h.a.createElement("details",{style:{whiteSpace:"pre-wrap"}},null===(e=this.state.error)||void 0===e?void 0:e.toString())),h.a.createElement(E.a.Footer,{showBorder:!1},this.state.errorCode?this.state.errorCode:null))):this.props.children}}],[{key:"getDerivedStateFromError",value:function(e){return{errorCode:e.uccErrorCode}}}]),n}(h.a.Component);x.propTypes={children:v.a.oneOfType([v.a.arrayOf(v.a.node),v.a.node]).isRequired};t.a=x}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvY29udGV4dC9UYWJsZUNvbnRleHQuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb25zdGFudHMvbW9kZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL3V0aWwvYXhpb3NDYWxsV3JhcHBlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvcGFnZXMvSW5wdXQvSW5wdXRQYWdlU3R5bGUuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9ob29rcy91c2VRdWVyeS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvY29tcG9uZW50cy9FbnRpdHlNb2RhbC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvTWFya2Rvd25NZXNzYWdlLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvY29tcG9uZW50cy9IZWxwTGlua0NvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvVGV4dENvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvU2luZ2xlSW5wdXRDb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb21wb25lbnRzL011bHRpSW5wdXRDb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb21wb25lbnRzL0NoZWNrQm94Q29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvY29tcG9uZW50cy9SYWRpb0NvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvUGxhY2Vob2xkZXJDb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb21wb25lbnRzL0N1c3RvbUNvbnRyb2wuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb25zdGFudHMvQ29udHJvbFR5cGVNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvQ29udHJvbFdyYXBwZXIuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb25zdGFudHMvcHJlRGVmaW5lZFJlZ2V4LmpzIiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC91dGlsL1ZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvY29tcG9uZW50cy9CYXNlRm9ybVZpZXcuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb25zdGFudHMvb0F1dGhFcnJvck1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbnN0YW50cy9kaWFsb2dTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvdGFibGUvQ3VzdG9tVGFibGVDb250cm9sLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvY29tcG9uZW50cy90YWJsZS9UYWJsZUV4cGFuc2lvblJvdy5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvdGFibGUvQ3VzdG9tVGFibGVSb3cuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb21wb25lbnRzL0RlbGV0ZU1vZGFsLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvY29tcG9uZW50cy90YWJsZS9DdXN0b21UYWJsZS5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvdGFibGUvVGFibGVGaWx0ZXIuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb21wb25lbnRzL3RhYmxlL1RhYmxlSGVhZGVyLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvY29tcG9uZW50cy90YWJsZS9UYWJsZVdyYXBwZXIuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb25zdGFudHMvZXJyb3JDb2Rlcy5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvRXJyb3JCb3VuZGFyeS5qc3giXSwibmFtZXMiOlsiVGFibGVDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsInJvd0RhdGEiLCJzZXRSb3dEYXRhIiwiVGFibGVDb250ZXh0UHJvdmlkZXIiLCJjaGlsZHJlbiIsInVzZVN0YXRlIiwic2VhcmNoVGV4dCIsInNldFNlYXJjaFRleHQiLCJzZWFyY2hUeXBlIiwic2V0U2VhcmNoVHlwZSIsInBhZ2VTaXplIiwic2V0UGFnZVNpemUiLCJjdXJyZW50UGFnZSIsInNldEN1cnJlbnRQYWdlIiwiUHJvdmlkZXIiLCJ2YWx1ZSIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsIm9uZU9mVHlwZSIsImFycmF5T2YiLCJub2RlIiwiaXNSZXF1aXJlZCIsIk1PREVfQ0xPTkUiLCJNT0RFX0NSRUFURSIsIk1PREVfRURJVCIsIk1PREVfQ09ORklHIiwiYXhpb3NDYWxsV3JhcHBlciIsInNlcnZpY2VOYW1lIiwiZW5kcG9pbnRVcmwiLCJwYXJhbXMiLCJib2R5IiwiY2FuY2VsVG9rZW4iLCJjdXN0b21IZWFkZXJzIiwibWV0aG9kIiwiaGFuZGxlRXJyb3IiLCJjYWxsYmFja09uRXJyb3IiLCJlbmRwb2ludCIsImdlbmVyYXRlRW5kUG9pbnRVcmwiLCJhcHBEYXRhIiwiYXBwIiwib3duZXIiLCJiYXNlSGVhZGVycyIsIkNTUkZUb2tlbiIsImhlYWRlcnMiLCJPYmplY3QiLCJhc3NpZ24iLCJ1cmwiLCJjcmVhdGVSRVNUVVJMIiwibmV3UGFyYW1zIiwib3V0cHV0X21vZGUiLCJvcHRpb25zIiwiY3JlZGVudGlhbHMiLCJkYXRhIiwiYXhpb3MiLCJlcnJvciIsIm1lc3NhZ2UiLCJpc0NhbmNlbCIsInJlc3BvbnNlIiwibWVzc2FnZXMiLCJ0ZXh0IiwicmVxdWVzdCIsImdlbmVyYXRlVG9hc3QiLCJQcm9taXNlIiwicmVqZWN0IiwiVGl0bGVDb21wb25lbnQiLCJzdHlsZWQiLCJkaXYiLCJhdHRycyIsImNsYXNzTmFtZSIsInZhcmlhYmxlcyIsImZvbnRTaXplWFhMYXJnZSIsIlN1YlRpdGxlQ29tcG9uZW50IiwiZm9udFNpemUiLCJ1c2VRdWVyeSIsIlVSTFNlYXJjaFBhcmFtcyIsInVzZUxvY2F0aW9uIiwic2VhcmNoIiwiTW9kYWxXcmFwcGVyIiwiTW9kYWwiLCJFbnRpdHlNb2RhbCIsInByb3BzIiwiaGFuZGxlUmVxdWVzdENsb3NlIiwiZm9ybSIsImN1cnJlbnQiLCJoYW5kbGVTdWJtaXQiLCJzZXQiLCJjbG9zZSIsInNldFN0YXRlIiwiaXNTdWJtaXRpdG5nIiwiUmVhY3QiLCJjcmVhdGVSZWYiLCJzdGF0ZSIsIm1vZGUiLCJidXR0b25UZXh0IiwiXyIsIm9wZW4iLCJ0aGlzIiwiSGVhZGVyIiwidGl0bGUiLCJmb3JtTGFiZWwiLCJvblJlcXVlc3RDbG9zZSIsIkJvZHkiLCJyZWYiLCJwYWdlIiwic3RhbnphTmFtZSIsImhhbmRsZUZvcm1TdWJtaXQiLCJGb290ZXIiLCJhcHBlYXJhbmNlIiwib25DbGljayIsImxhYmVsIiwiZGlzYWJsZWQiLCJDb21wb25lbnQiLCJzdHJpbmciLCJib29sIiwiZnVuYyIsIk1hcmtkb3duV3JhcHBlciIsInNwYW4iLCJjb2xvciIsIk1hcmtkb3duTWVzc2FnZSIsImRhdGEtdGVzdCIsIm1hcmtkb3duVGV4dCIsIm1hcmtkb3duVHlwZSIsInRvIiwibGluayIsImFycmF5IiwiZm4iLCJpIiwibGVuZ3RoIiwibWFwcGluZyIsImNvbmNhdCIsImZsYXRNYXAiLCJzcGxpdCIsInRva2VuIiwicGFydCIsImtleSIsImxpbmtUZXh0IiwicG9wIiwibWVtbyIsIkhlbHBMaW5rQ29tcG9uZW50IiwiY29udHJvbE9wdGlvbnMiLCJvcGVuSW5OZXdDb250ZXh0Iiwib2JqZWN0IiwiVGV4dFdyYXBwZXIiLCJUZXh0IiwiVGV4dENvbXBvbmVudCIsImUiLCJoYW5kbGVDaGFuZ2UiLCJmaWVsZCIsImlubGluZSIsInBsYWNlaG9sZGVyIiwidG9TdHJpbmciLCJvbkNoYW5nZSIsInR5cGUiLCJlbmNyeXB0ZWQiLCJudW1iZXIiLCJTZWxlY3RXcmFwcGVyIiwiU2VsZWN0IiwiU3R5bGVkRGl2IiwiU2luZ2xlSW5wdXRDb21wb25lbnQiLCJkZXBlbmRlbmN5VmFsdWVzIiwicmVzdFByb3BzIiwiZGVueUxpc3QiLCJhbGxvd0xpc3QiLCJkZXBlbmRlbmNpZXMiLCJjcmVhdGVTZWFyY2hDaG9pY2UiLCJyZWZlcmVuY2VOYW1lIiwiZGlzYWJsZVNlYXJjaCIsImxhYmVsRmllbGQiLCJhdXRvQ29tcGxldGVGaWVsZHMiLCJoaWRlQ2xlYXJCdG4iLCJvYmoiLCJPcHRpb24iLCJDb21ib0JveCIsIkhlYWRpbmciLCJnZW5lcmF0ZU9wdGlvbnMiLCJpdGVtcyIsImZvckVhY2giLCJpdGVtIiwicHVzaCIsImNoaWxkIiwibG9hZGluZyIsInNldExvYWRpbmciLCJzZXRPcHRpb25zIiwidXNlRWZmZWN0Iiwic291cmNlIiwiQ2FuY2VsVG9rZW4iLCJ0aGVuIiwiZmlsdGVyUmVzcG9uc2UiLCJlbnRyeSIsImNhbmNlbCIsImVmZmVjdGl2ZURpc2FibGVkIiwiZWZmZWN0aXZlUGxhY2Vob2xkZXIiLCJlZmZlY3RpdmVJc0NsZWFyYWJsZSIsIm5hbWUiLCJkYXRhLXRlc3QtbG9hZGluZyIsImZpbHRlciIsImljb24iLCJzaGFwZSIsIk11bHRpU2VsZWN0V3JhcHBlciIsIk11bHRpc2VsZWN0IiwiTXVsdGlJbnB1dENvbXBvbmVudCIsImRlbGltaXRlciIsIml0ZW1MaXN0IiwibWFwIiwiZ2V0Rm9ybWF0dGVkTWVzc2FnZSIsInZhbHVlTGlzdCIsInZhbHVlcyIsImFsbG93TmV3VmFsdWVzIiwiam9pbiIsIkNoZWNrQm94Q29tcG9uZW50IiwiaXNGYWxzZSIsInNlbGVjdGVkIiwiUmFkaW9CYXJXcmFwcGVyIiwiUmFkaW9CYXIiLCJSYWRpb0NvbXBvbmVudCIsIlBsYWNlaG9sZGVyQ29tcG9uZW50IiwiZGVmYXVsdFZhbHVlIiwiQ3VzdG9tQ29udHJvbCIsIm1vZHVsZSIsImFwcE5hbWUiLCJyZXNvbHZlIiwiaW1wb3J0IiwiZ2V0QnVpbGREaXJQYXRoIiwiZXh0ZXJuYWwiLCJDb250cm9sIiwiX19ub25fd2VicGFja19yZXF1aXJlX18iLCJuZXdWYWx1ZSIsInNob3VsZFJlbmRlciIsImdsb2JhbENvbmZpZyIsImdldFVuaWZpZWRDb25maWdzIiwibWV0YSIsImxvYWRDdXN0b21Db250cm9sIiwic3JjIiwiY3VzdG9tQ29udHJvbCIsImVsIiwic2V0VmFsdWUiLCJ1dGlsQ3VzdG9tRnVuY3Rpb25zIiwicmVuZGVyIiwidmFsaWRhdGlvbiIsImFkZEN1c3RvbVZhbGlkYXRvciIsIm5leHRQcm9wcyIsIm5leHRTdGF0ZSIsInN0eWxlIiwidmlzaWJpbGl0eSIsInNpbmdsZVNlbGVjdCIsImhlbHBMaW5rIiwibXVsdGlwbGVTZWxlY3QiLCJjaGVja2JveCIsInJhZGlvIiwiY3VzdG9tIiwiQ3VzdG9tRWxlbWVudCIsIkNvbnRyb2xHcm91cFdyYXBwZXIiLCJDb250cm9sR3JvdXAiLCJkYXRhTmFtZSIsIkNvbnRyb2xXcmFwcGVyIiwic3RyIiwiU3RyaW5nIiwiY29udHJvbFR5cGUiLCJpc1N0cmluZyIsImVudGl0eSIsIkNPTlRST0xfVFlQRV9NQVAiLCJyZXF1aXJlZCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInJvd1ZpZXciLCJ0b29sdGlwIiwiaGVscCIsInV0aWxpdHlGdW5jdHMiLCJtYXJrZG93bk1lc3NhZ2UiLCJjcmVhdGVFbGVtZW50IiwiaGVscFRleHQiLCJkaXNwbGF5IiwiUHVyZUNvbXBvbmVudCIsImFueSIsIlBSRURFRklORURfVkFMSURBVE9SU19ESUNUIiwicmVnZXgiLCJpbnB1dFZhbHVlVHlwZSIsImVtYWlsIiwiaXB2NCIsImRhdGUiLCJWYWxpZGF0b3IiLCJlbnRpdGllcyIsImF0dHJWYWx1ZSIsInVuZGVmaW5lZCIsImlzTmFtZSIsImZpbmQiLCJjaGVja0lzRmllbGRIYXNJbnB1dCIsImVycm9yRmllbGQiLCJlcnJvck1zZyIsInZhbGlkYXRvciIsInBhcnNlU3RyaW5nVmFsaWRhdG9yIiwibWluTGVuZ3RoIiwibWF4TGVuZ3RoIiwicGFyc2VSZWdleFJhd1N0ciIsInBhdHRlcm4iLCJyZXN1bHQiLCJ0ZXN0IiwicGFyc2VOdW1iZXJWYWxpZGF0b3IiLCJyYW5nZSIsInZhbCIsIk51bWJlciIsImlzTmFOIiwidGFyZ2V0VmFsdWUiLCJuYW1lRmllbGRMYWJlbCIsInN0YXJ0c1dpdGgiLCJ0b0xvd2VyQ2FzZSIsInNvbWUiLCJkIiwiaW5kZXhPZiIsInJldCIsImoiLCJSZXF1aXJlZFZhbGlkYXRvciIsInZhbGlkYXRvcnMiLCJTdHJpbmdWYWxpZGF0b3IiLCJSZWdleFZhbGlkYXRvciIsIk51bWJlclZhbGlkYXRvciIsIlByZURlZmluZWRSZWdleFZhbGlkYXRvciIsIkN1c3RvbVZhbGlkYXRvciIsInZhbGlkYXRvckZ1bmMiLCJDb2xsYXBzaWJsZVBhbmVsV3JhcHBlciIsIkNvbGxhcHNpYmxlUGFuZWwiLCJDdXN0b21Hcm91cExhYmVsIiwiQmFzZUZvcm1WaWV3IiwiY29udGV4dCIsInNlcnZpY2UiLCJncm91cHMiLCJncm91cCIsImZpZWxkcyIsImZpZWxkTmFtZSIsImluZGV4IiwiZmluZEluZGV4IiwidXBkYXRlZE9iaiIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsImlzR3JvdXBpbmciLCJzcGxpY2UiLCJjbGVhckVycm9yTXNnIiwiZGF0YWRpY3QiLCJrZXlzIiwiaG9vayIsIm9uU2F2ZSIsImV4ZWN1dGVWYWxpZGF0aW9uU3VibWl0IiwidGVtRW50aXRpZXMiLCJpbmNsdWRlcyIsIkJvb2xlYW4iLCJzZXRFcnJvckZpZWxkTXNnIiwiaXNPQXV0aCIsInJlcUZpZWxkcyIsImF1dGhNYXAiLCJhdXRoX3R5cGUiLCJpc0F1dGhWYWwiLCJkb1ZhbGlkYXRpb24iLCJzYXZlVmFsaWRhdG9yIiwiZm9ybURhdGEiLCJwYXJzZUZ1bmN0aW9uUmF3U3RyIiwiU2F2ZVZhbGlkYXRvciIsInNldEVycm9yTXNnIiwiaXNTaW5nbGVPYXV0aCIsInBhcmFtZXRlcnMiLCJjbGllbnRfaWQiLCJyZWRpcmVjdF91cmwiLCJzdGF0ZUVuYWJsZWQiLCJpc29hdXRoU3RhdGUiLCJzdGF0ZV9lbmFibGVkIiwib2F1dGhfc3RhdGUiLCJ1dWlkdjQiLCJyZXBsYWNlIiwiaG9zdCIsIm9hdXRoQ29uZiIsImF1dGhDb2RlRW5kcG9pbnQiLCJhIiwiaXNDYWxsZWQiLCJpc0Vycm9yIiwiaXNSZXNwb25zZSIsImNoaWxkV2luIiwid2luZG93IiwicG9wdXBXaWR0aCIsInBvcHVwSGVpZ2h0IiwiZ2V0TWVzc2FnZSIsImhhbmRsZU9hdXRoVG9rZW4iLCJ3YWl0Rm9yQXV0aGVudGljYXRpb24iLCJhdXRoVGltZW91dCIsImNsb3NlZCIsIndhaXRGb3JCYWNrZW5kUmVzcG9uc2UiLCJzYXZlRGF0YSIsIm9uU2F2ZVByb21pc2UiLCJhcHBlbmQiLCJ0bXBPYmoiLCJjb250ZW50IiwiaWQiLCJ1cGRhdGUiLCIkbWVyZ2UiLCJvblNhdmVTdWNjZXNzIiwibW9kZV9jb25maWdfdGl0bGUiLCJlcnIiLCJlcnJvclN1Ym1pdE1zZyIsInBhcnNlRXJyb3JNc2ciLCJvblNhdmVGYWlsIiwiY2hhbmdlcyIsIiRzZXQiLCJkZXBlbmRlbmN5TWFwIiwiaGFzIiwiZ2V0IiwibG9hZEZpZWxkIiwibG9hZCIsImRlcGVuZGVuY3kiLCJjdXJyZW50VmFsdWUiLCJuZXdGaWVsZHMiLCJ0ZW1wU3RhdGUiLCJjbGVhckFsbEVycm9yTXNnIiwiaG9va0RlZmVycmVkIiwieCIsIm1zZyIsInByZXZpb3VzU3RhdGUiLCJTdGF0ZSIsIndhcm5pbmdNc2ciLCJuZXdEYXRhIiwidGVtRGF0YSIsIkhvb2siLCJ1dGlsIiwiY29kZSIsInN0YXRlUmVzcG9uc2UiLCJkZWNvZGVVUklDb21wb25lbnQiLCJhY2Nlc3NUb2tlbkVuZHBvaW50IiwiZ3JhbnRfdHlwZSIsImNsaWVudF9zZWNyZXQiLCJyZWRpcmVjdF91cmkiLCJPQXV0aEVuZHBvaW50IiwiYWNjZXNzVG9rZW4iLCJhY2Nlc3NfdG9rZW4iLCJpbnN0YW5jZVVybCIsImluc3RhbmNlX3VybCIsInJlZnJlc2hUb2tlbiIsInJlZnJlc2hfdG9rZW4iLCJjb3VudCIsInNsZWVwIiwidGltZW91dCIsImFyZ3MiLCJtcyIsInNldFRpbWVvdXQiLCJjb2xscHNpYmxlRWxlbWVudCIsInRlbVN0YXRlIiwidXRpbENvbnRyb2xXcmFwcGVyIiwiaXNFeHBhbmRhYmxlIiwiZmxhZyIsImN1cnJlbnRJbnB1dCIsImVuY29kZVVSSUNvbXBvbmVudCIsImNhbGxiYWNrIiwiUEFHRV9JTlBVVCIsInBhZ2VzIiwiaW5wdXRzIiwic2VydmljZXMiLCJ1cGRhdGVFbnRpdGllc0Zvckdyb3VwIiwibG9hZEhvb2siLCJjb25maWd1cmF0aW9uIiwidGFicyIsInRhYiIsInRhYmxlIiwiY3VycmVudFNlcnZpY2VTdGF0ZSIsIk1hcCIsIlBBR0VfQ09ORiIsImF1dGhUeXBlIiwib2F1dGhfc3RhdGVfZW5hYmxlZCIsInRlbXBFbnRpdHkiLCJiYXNpYyIsIm9hdXRoIiwiYXV0aGZpZWxkcyIsImlzRW5jcnlwdGVkIiwibG9jYXRpb24iLCJocmVmIiwib2F1dGhDb25mRGF0YSIsIm9hdXRoX3BvcHVwX3dpZHRoIiwib2F1dGhfcG9wdXBfaGVpZ2h0Iiwib2F1dGhfdGltZW91dCIsImF1dGhfY29kZV9lbmRwb2ludCIsImFjY2Vzc190b2tlbl9lbmRwb2ludCIsImRpc2FibGVvbkVkaXQiLCJFcnJvciIsImNoYW5nZUZpZWxkcyIsImZsYXR0ZW5lZE1hcCIsIm9uQ3JlYXRlIiwiY29uc29sZSIsIm9uUmVuZGVyIiwib25FZGl0TG9hZCIsIm1hcmdpblRvcCIsImdlbmVyYXRlV2FybmluZ01lc3NhZ2UiLCJnZW5lcmF0ZUVycm9yTWVzc2FnZSIsInJlbmRlckdyb3VwRWxlbWVudHMiLCJTVFlMRV9QQUdFIiwiU1RZTEVfTU9EQUwiLCJDdXN0b21UYWJsZUNvbnRyb2wiLCJmaWxlTmFtZSIsInJvdyIsIlRhYmxlQ2VsbFdyYXBwZXIiLCJUYWJsZSIsIkNlbGwiLCJnZXRFeHBhbnNpb25Sb3ciLCJjb2xTcGFuIiwibW9yZUluZm8iLCJjdXN0b21Sb3ciLCJSb3ciLCJ0ZXJtV2lkdGgiLCJEZWZpbml0aW9uTGlzdHMiLCJUZXJtIiwiRGVzY3JpcHRpb24iLCJnZXRFeHBhbnNpb25Sb3dEYXRhIiwiU3dpdGNoV3JhcHBlciIsIkN1c3RvbVRhYmxlUm93IiwiY29sdW1ucyIsImhlYWRlck1hcHBpbmciLCJoYW5kbGVUb2dnbGVBY3Rpb25DbGljayIsImhhbmRsZUVkaXRBY3Rpb25DbGljayIsImhhbmRsZUNsb25lQWN0aW9uQ2xpY2siLCJoYW5kbGVEZWxldGVBY3Rpb25DbGljayIsInJvd0FjdGlvbnNQcmltYXJ5QnV0dG9uIiwidXNlQ2FsbGJhY2siLCJzZWxlY3RlZFJvdyIsImRhdGEtY29sdW1uIiwic2NyZWVuUmVhZGVyVGV4dCIsInNpemUiLCJzdGF0dXNDb250ZW50IiwiX190b2dnbGVTaG93U3Bpbm5lciIsImhlYWRlciIsImNlbGxIVE1MIiwiY3VzdG9tQ2VsbCIsImdldEN1c3RvbUNlbGwiLCJzZWxlY3RlZExhYmVsIiwidW5zZWxlY3RlZExhYmVsIiwiRGVsZXRlTW9kYWwiLCJFcnJvck1zZyIsInByZXZTdGF0ZSIsImlzRGVsZXRpbmciLCIkdW5zZXQiLCJkZWxldGVNc2ciLCJoYW5kbGVEZWxldGUiLCJDdXN0b21UYWJsZSIsImhhbmRsZU9wZW5QYWdlU3R5bGVEaWFsb2ciLCJoYW5kbGVTb3J0Iiwic29ydERpciIsInNvcnRLZXkiLCJ1bmlmaWVkQ29uZmlncyIsImVudGl0eU1vZGFsIiwic2V0RW50aXR5TW9kYWwiLCJkZWxldGVNb2RhbCIsInNldERlbGV0ZU1vZGFsIiwidXNlQ29udGV4dCIsInRhYmxlQ29uZmlnIiwic2VydmljZVRvU3R5bGVNYXAiLCJxdWVyeSIsInNlcnZpY2VLZXkiLCJjb2x1bW4iLCJoYW5kbGVFbnRpdHlDbG9zZSIsImhhbmRsZURlbGV0ZUNsb3NlIiwiZ2V0VGFibGVIZWFkZXJDZWxsIiwiSGVhZCIsImhlYWREYXRhIiwiSGVhZENlbGwiLCJvblNvcnQiLCJzdHJpcGVSb3dzIiwicm93RXhwYW5zaW9uIiwiZXhwYW5zaW9uUm93IiwiZ2VuZXJhdGVNb2RhbERpYWxvZyIsIlRhYmxlRmlsdGVyIiwid2FpdCIsImxhdGVyIiwiY2xlYXJUaW1lb3V0IiwiVGFibGVIZWFkZXJXcmFwcGVyIiwiVGFibGVGaWx0ZXJXcmFwcGVyIiwiVGFibGVIZWFkZXIiLCJ0b3RhbEVsZW1lbnQiLCJoYW5kbGVSZXF1ZXN0TW9kYWxPcGVuIiwiaXRlbUxhYmVsIiwiYXJyIiwidW5zaGlmdCIsImdldFNlYXJjaFR5cGVEcm9wZG93biIsInBhZ2VOdW1iZXIiLCJhbHdheXNTaG93TGFzdFBhZ2VMaW5rIiwidG90YWxQYWdlcyIsIk1hdGgiLCJjZWlsIiwiVGFibGVXcmFwcGVyIiwic2V0U29ydEtleSIsInNldFNvcnREaXIiLCJzZXRFcnJvciIsImZldGNoSW5wdXRzIiwicmVxdWVzdHMiLCJhbGwiLCJlcnJvckNvZGUiLCJ1Y2NFcnJvckNvZGUiLCJyZXMiLCJmaW5kQnlNYXRjaGluZ1ZhbHVlIiwidGFibGVGaWVsZHMiLCJtb3JlSW5mb0RhdGEiLCJ2IiwiZm91bmQiLCJ2diIsInRyaW0iLCJuZXdBcnIiLCJzb3J0ZWRBcnIiLCJzb3J0Iiwicm93QSIsInJvd0IiLCJ1cGRhdGVkQXJyIiwic2xpY2UiLCJnZXRSb3dEYXRhIiwiZmlsdGVyZWREYXRhIiwiY3VycmVudFJvd0RhdGEiLCJjaGFuZ2VUb2dnbGVTdGF0dXMiLCJwcmV2U29ydERpciIsIkVSUjAwMDEiLCJFUlIwMDAyIiwiRVJSMDAwMyIsIkVSUjAwMDQiLCJFUlIwMDA1IiwiRXJyb3JCb3VuZGFyeSIsImVycm9ySW5mbyIsImFsaWduIiwiYm94U2hhZG93IiwidGV4dEFsaWduIiwibGV2ZWwiLCJlcnJvckNvZGVz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ZixJQUFNc0IsV0F1RGxDeWYsRUFBY3hsQixVQUFZLENBQ3RCWixTQUFVYSxJQUFVQyxVQUFVLENBQUNELElBQVVFLFFBQVFGLElBQVVHLE1BQU9ILElBQVVHLE9BQU9DLFlBR3hFbWxCIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgY3JlYXRlQ29udGV4dCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5jb25zdCBUYWJsZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0KHtcbiAgICByb3dEYXRhOiB7fSxcbiAgICBzZXRSb3dEYXRhOiAoKSA9PiB7fSxcbn0pO1xuXG5leHBvcnQgY29uc3QgVGFibGVDb250ZXh0UHJvdmlkZXIgPSAoeyBjaGlsZHJlbiB9KSA9PiB7XG4gICAgY29uc3QgW3Jvd0RhdGEsIHNldFJvd0RhdGFdID0gdXNlU3RhdGUoe30pO1xuICAgIGNvbnN0IFtzZWFyY2hUZXh0LCBzZXRTZWFyY2hUZXh0XSA9IHVzZVN0YXRlKCcnKTtcbiAgICBjb25zdCBbc2VhcmNoVHlwZSwgc2V0U2VhcmNoVHlwZV0gPSB1c2VTdGF0ZSgnYWxsJyk7XG4gICAgY29uc3QgW3BhZ2VTaXplLCBzZXRQYWdlU2l6ZV0gPSB1c2VTdGF0ZSgxMCk7XG4gICAgY29uc3QgW2N1cnJlbnRQYWdlLCBzZXRDdXJyZW50UGFnZV0gPSB1c2VTdGF0ZSgwKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxUYWJsZUNvbnRleHQuUHJvdmlkZXJcbiAgICAgICAgICAgIHZhbHVlPXt7XG4gICAgICAgICAgICAgICAgcm93RGF0YSxcbiAgICAgICAgICAgICAgICBzZXRSb3dEYXRhLFxuICAgICAgICAgICAgICAgIHNlYXJjaFRleHQsXG4gICAgICAgICAgICAgICAgc2V0U2VhcmNoVGV4dCxcbiAgICAgICAgICAgICAgICBzZWFyY2hUeXBlLFxuICAgICAgICAgICAgICAgIHNldFNlYXJjaFR5cGUsXG4gICAgICAgICAgICAgICAgcGFnZVNpemUsXG4gICAgICAgICAgICAgICAgc2V0UGFnZVNpemUsXG4gICAgICAgICAgICAgICAgY3VycmVudFBhZ2UsXG4gICAgICAgICAgICAgICAgc2V0Q3VycmVudFBhZ2UsXG4gICAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvVGFibGVDb250ZXh0LlByb3ZpZGVyPlxuICAgICk7XG59O1xuXG5UYWJsZUNvbnRleHRQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5ub2RlKSwgUHJvcFR5cGVzLm5vZGVdKS5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgVGFibGVDb250ZXh0O1xuIiwiZXhwb3J0IGNvbnN0IE1PREVfQ0xPTkUgPSAnY2xvbmUnO1xuZXhwb3J0IGNvbnN0IE1PREVfQ1JFQVRFID0gJ2NyZWF0ZSc7XG5leHBvcnQgY29uc3QgTU9ERV9ERUxFVEUgPSAnZGVsZXRlJztcbmV4cG9ydCBjb25zdCBNT0RFX0VESVQgPSAnZWRpdCc7XG5leHBvcnQgY29uc3QgTU9ERV9DT05GSUcgPSAnY29uZmlnJztcbiIsImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBDU1JGVG9rZW4sIGFwcCB9IGZyb20gJ0BzcGx1bmsvc3BsdW5rLXV0aWxzL2NvbmZpZyc7XG5pbXBvcnQgeyBjcmVhdGVSRVNUVVJMIH0gZnJvbSAnQHNwbHVuay9zcGx1bmstdXRpbHMvdXJsJztcbmltcG9ydCB7IGdlbmVyYXRlRW5kUG9pbnRVcmwsIGdlbmVyYXRlVG9hc3QgfSBmcm9tICcuL3V0aWwnO1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YSBUaGUgb2JqZWN0IGNvbnRhaW5pbmcgcmVxdWlyZWQgcGFyYW1zIGZvciByZXF1ZXN0XG4gKiBAcGFyYW0ge3N0cmluZ30gZGF0YS5zZXJ2aWNlTmFtZSBzZXJ2aWNlIG5hbWUgd2hpY2ggaXMgaW5wdXQgbmFtZSBvciB0YWIgbmFtZSBiYXNlZCBvbiB0aGUgcGFnZVxuICogQHBhcmFtIHtzdHJpbmd9IGRhdGEuZW5kcG9pbnRVcmwgcmVzdCBlbmRwb2ludCBwYXRoXG4gKiBAcGFyYW0ge29iamVjdH0gZGF0YS5wYXJhbXMgb2JqZWN0IHdpdGggcGFyYW1zIGFzIGtleSB2YWx1ZSBwYWlyc1xuICogQHBhcmFtIHtvYmplY3R9IGRhdGEuYm9keSBvYmplY3Qgd2l0aCBib2R5IGFzIGtleSB2YWx1ZSBwYWlycyBmb3IgcG9zdCByZXF1ZXN0XG4gKiBAcGFyYW0ge29iamVjdH0gZGF0YS5jdXN0b21IZWFkZXJzIGV4dHJhIGhlYWRlcnMgYXMga2V5IHZhbHVlIHBhaXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhLm1ldGhvZCByZXN0IG1ldGhvZCB0eXBlXG4gKiBAcGFyYW0ge3N0cmluZ30gZGF0YS5oYW5kbGVFcnJvciB3aGV0aGVyIG9yIG5vdCBzaG93IHRvYXN0IG5vdGlmaWNhdGlvbnMgb24gZmFpbHVyZVxuICogQHBhcmFtIHtzdHJpbmd9IGRhdGEuY2FsbGJhY2tPbkVycm9yIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgYWZ0ZXIgaGFuZGxpbmcgZXJyb3IuIE9ubHkgZXhlY3V0ZWQgd2hlbiBoYW5kbGVFcnJvciBpcyBzZXQgdG8gdHJ1ZVxuICogQHJldHVybnNcbiAqL1xuY29uc3QgYXhpb3NDYWxsV3JhcHBlciA9ICh7XG4gICAgc2VydmljZU5hbWUsXG4gICAgZW5kcG9pbnRVcmwsXG4gICAgcGFyYW1zLFxuICAgIGJvZHksXG4gICAgY2FuY2VsVG9rZW4sXG4gICAgY3VzdG9tSGVhZGVycyA9IHt9LFxuICAgIG1ldGhvZCA9ICdnZXQnLFxuICAgIGhhbmRsZUVycm9yID0gZmFsc2UsXG4gICAgY2FsbGJhY2tPbkVycm9yID0gKCkgPT4ge30sXG59KSA9PiB7XG4gICAgY29uc3QgZW5kcG9pbnQgPSBzZXJ2aWNlTmFtZSA/IGdlbmVyYXRlRW5kUG9pbnRVcmwoc2VydmljZU5hbWUpIDogZW5kcG9pbnRVcmw7XG4gICAgY29uc3QgYXBwRGF0YSA9IHtcbiAgICAgICAgYXBwLFxuICAgICAgICBvd25lcjogJ25vYm9keScsXG4gICAgfTtcbiAgICBjb25zdCBiYXNlSGVhZGVycyA9IHtcbiAgICAgICAgJ1gtU3BsdW5rLUZvcm0tS2V5JzogQ1NSRlRva2VuLFxuICAgICAgICAnWC1SZXF1ZXN0ZWQtV2l0aCc6ICdYTUxIdHRwUmVxdWVzdCcsXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgfTtcbiAgICBjb25zdCBoZWFkZXJzID0gT2JqZWN0LmFzc2lnbihiYXNlSGVhZGVycywgY3VzdG9tSGVhZGVycyk7XG4gICAgY29uc3QgdXJsID0gY3JlYXRlUkVTVFVSTChlbmRwb2ludCwgYXBwRGF0YSk7XG5cbiAgICBsZXQgbmV3UGFyYW1zID0geyBvdXRwdXRfbW9kZTogJ2pzb24nIH07XG4gICAgaWYgKHBhcmFtcykge1xuICAgICAgICBuZXdQYXJhbXMgPSB7IC4uLm5ld1BhcmFtcywgLi4ucGFyYW1zIH07XG4gICAgfVxuXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgcGFyYW1zOiBuZXdQYXJhbXMsXG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgdXJsLFxuICAgICAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnLFxuICAgICAgICBoZWFkZXJzLFxuICAgICAgICBjYW5jZWxUb2tlbixcbiAgICB9O1xuXG4gICAgaWYgKG1ldGhvZCA9PT0gJ3Bvc3QnKSB7XG4gICAgICAgIG9wdGlvbnMuZGF0YSA9IGJvZHk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhhbmRsZUVycm9yXG4gICAgICAgID8gYXhpb3Mob3B0aW9ucykuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgIGxldCBtZXNzYWdlID0gJyc7XG4gICAgICAgICAgICAgIGlmIChheGlvcy5pc0NhbmNlbChlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGVycm9yLnJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAvLyBUaGUgcmVxdWVzdCB3YXMgbWFkZSBhbmQgdGhlIHNlcnZlciByZXNwb25kZWQgd2l0aCBhIHN0YXR1cyBjb2RlXG4gICAgICAgICAgICAgICAgICBtZXNzYWdlID0gYEVycm9yIHJlc3BvbnNlIHJlY2VpdmVkIGZyb20gc2VydmVyOiAke2Vycm9yLnJlc3BvbnNlLmRhdGEubWVzc2FnZXNbMF0udGV4dH1gO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yLnJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICAgIC8vIFRoZSByZXF1ZXN0IHdhcyBtYWRlIGJ1dCBubyByZXNwb25zZSB3YXMgcmVjZWl2ZWRcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgTm8gcmVzcG9uc2UgcmVjZWl2ZWQgd2hpbGUgbWFraW5nIHJlcXVlc3QgdG8gJHtlbmRwb2ludH1gO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgLy8gU29tZXRoaW5nIGhhcHBlbmVkIGluIHNldHRpbmcgdXAgdGhlIHJlcXVlc3QgdGhhdCB0cmlnZ2VyZWQgYW4gRXJyb3JcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgRXJyb3IgbWFraW5nICR7bWV0aG9kfSByZXF1ZXN0IHRvICR7ZW5kcG9pbnR9YDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBnZW5lcmF0ZVRvYXN0KG1lc3NhZ2UsICdlcnJvcicpO1xuICAgICAgICAgICAgICBjYWxsYmFja09uRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgIH0pXG4gICAgICAgIDogYXhpb3Mob3B0aW9ucyk7XG59O1xuXG5leHBvcnQgeyBheGlvc0NhbGxXcmFwcGVyIH07XG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCB7IHZhcmlhYmxlcyB9IGZyb20gJ0BzcGx1bmsvdGhlbWVzJztcblxuZXhwb3J0IGNvbnN0IFRpdGxlQ29tcG9uZW50ID0gc3R5bGVkLmRpdi5hdHRycyh7XG4gICAgY2xhc3NOYW1lOiAncGFnZVRpdGxlJyxcbn0pYFxuICAgICYucGFnZVRpdGxlIHtcbiAgICAgICAgZm9udC1zaXplOiAke3ZhcmlhYmxlcy5mb250U2l6ZVhYTGFyZ2V9O1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICAgIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBTdWJUaXRsZUNvbXBvbmVudCA9IHN0eWxlZC5kaXYuYXR0cnMoe1xuICAgIGNsYXNzTmFtZTogJ3BhZ2VTdWJ0aXRsZScsXG59KWBcbiAgICAmLnBhZ2VTdWJ0aXRsZSB7XG4gICAgICAgIGZvbnQtc2l6ZTogJHt2YXJpYWJsZXMuZm9udFNpemV9O1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBUYWJsZUNhcHRpb25Db21wb25lbnQgPSBzdHlsZWQuZGl2YFxuICAgIC50YWJsZS1jYXB0aW9uLWlubmVyIHtcbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICB9XG5gO1xuIiwiaW1wb3J0IHsgdXNlTG9jYXRpb24gfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcblxuLy8gQSBjdXN0b20gaG9vayB0aGF0IGJ1aWxkcyBvbiB1c2VMb2NhdGlvbiB0byBwYXJzZSB0aGUgcXVlcnkgc3RyaW5nIGZvciB5b3UuXG5mdW5jdGlvbiB1c2VRdWVyeSgpIHtcbiAgICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtcyh1c2VMb2NhdGlvbigpLnNlYXJjaCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHVzZVF1ZXJ5O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvQnV0dG9uJztcbmltcG9ydCBNb2RhbCBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL01vZGFsJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IFdhaXRTcGlubmVyIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvV2FpdFNwaW5uZXInO1xuaW1wb3J0IHsgXyB9IGZyb20gJ0BzcGx1bmsvdWktdXRpbHMvaTE4bic7XG5cbmltcG9ydCB7IE1PREVfQ0xPTkUsIE1PREVfQ1JFQVRFLCBNT0RFX0VESVQgfSBmcm9tICcuLi9jb25zdGFudHMvbW9kZXMnO1xuaW1wb3J0IEJhc2VGb3JtVmlldyBmcm9tICcuL0Jhc2VGb3JtVmlldyc7XG5cbmNvbnN0IE1vZGFsV3JhcHBlciA9IHN0eWxlZChNb2RhbClgXG4gICAgd2lkdGg6IDgwMHB4O1xuYDtcblxuY2xhc3MgRW50aXR5TW9kYWwgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgLy8gUmVmIGlzIHVzZWQgaGVyZSB0byBjYWxsIHN1Ym1pdCBtZXRob2Qgb2YgZm9ybSBvbmx5XG4gICAgICAgIHRoaXMuZm9ybSA9IFJlYWN0LmNyZWF0ZVJlZigpOyAvLyBub3NlbWdyZXA6IHR5cGVzY3JpcHQucmVhY3Quc2VjdXJpdHkuYXVkaXQucmVhY3Qtbm8tcmVmcy5yZWFjdC1uby1yZWZzXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7IGlzU3VibWl0aXRuZzogZmFsc2UgfTtcblxuICAgICAgICBpZiAocHJvcHMubW9kZSA9PT0gTU9ERV9DUkVBVEUpIHtcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uVGV4dCA9IF8oJ0FkZCcpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb3BzLm1vZGUgPT09IE1PREVfQ0xPTkUpIHtcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uVGV4dCA9IF8oJ1NhdmUnKTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9wcy5tb2RlID09PSBNT0RFX0VESVQpIHtcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uVGV4dCA9IF8oJ1VwZGF0ZScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5idXR0b25UZXh0ID0gXygnU3VibWl0Jyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVSZXF1ZXN0Q2xvc2UgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMucHJvcHMuaGFuZGxlUmVxdWVzdENsb3NlKCk7XG4gICAgfTtcblxuICAgIGhhbmRsZVN1Ym1pdCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5mb3JtLmN1cnJlbnQuaGFuZGxlU3VibWl0KCk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlUmVxdWVzdENsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLypcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNldDogd2hldGhlciBmb3JtIGlzIHN1Ym1pdHRpbmdcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNsb3NlIDogY2xvc2UgdGhlIEVudGl0eSBtb2RhbFxuICAgICAqL1xuICAgIGhhbmRsZUZvcm1TdWJtaXQgPSAoc2V0LCBjbG9zZSkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgaXNTdWJtaXRpdG5nOiBzZXQgfSk7XG4gICAgICAgIGlmIChjbG9zZSkge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVSZXF1ZXN0Q2xvc2UoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8TW9kYWxXcmFwcGVyIG9wZW49e3RoaXMucHJvcHMub3Blbn0+XG4gICAgICAgICAgICAgICAgPE1vZGFsLkhlYWRlclxuICAgICAgICAgICAgICAgICAgICB0aXRsZT17dGhpcy5wcm9wcy5mb3JtTGFiZWx9XG4gICAgICAgICAgICAgICAgICAgIG9uUmVxdWVzdENsb3NlPXt0aGlzLmhhbmRsZVJlcXVlc3RDbG9zZX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxNb2RhbC5Cb2R5PlxuICAgICAgICAgICAgICAgICAgICA8QmFzZUZvcm1WaWV3IC8vIG5vc2VtZ3JlcDogdHlwZXNjcmlwdC5yZWFjdC5zZWN1cml0eS5hdWRpdC5yZWFjdC1uby1yZWZzLnJlYWN0LW5vLXJlZnNcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZj17dGhpcy5mb3JtfVxuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZT17dGhpcy5wcm9wcy5wYWdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZU5hbWU9e3RoaXMucHJvcHMuc2VydmljZU5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlPXt0aGlzLnByb3BzLm1vZGV9XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFuemFOYW1lPXt0aGlzLnByb3BzLnN0YW56YU5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVGb3JtU3VibWl0PXt0aGlzLmhhbmRsZUZvcm1TdWJtaXR9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9Nb2RhbC5Cb2R5PlxuICAgICAgICAgICAgICAgIDxNb2RhbC5Gb290ZXI+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVhcmFuY2U9XCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVSZXF1ZXN0Q2xvc2V9XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17XygnQ2FuY2VsJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17dGhpcy5zdGF0ZS5pc1N1Ym1pdGl0bmd9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNhdmVCdG5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwZWFyYW5jZT1cInByaW1hcnlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e3RoaXMuc3RhdGUuaXNTdWJtaXRpdG5nID8gPFdhaXRTcGlubmVyIC8+IDogdGhpcy5idXR0b25UZXh0fVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVTdWJtaXR9XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17dGhpcy5zdGF0ZS5pc1N1Ym1pdGl0bmd9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgICAgICAgICA8L01vZGFsV3JhcHBlcj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbkVudGl0eU1vZGFsLnByb3BUeXBlcyA9IHtcbiAgICBwYWdlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9wZW46IFByb3BUeXBlcy5ib29sLFxuICAgIGhhbmRsZVJlcXVlc3RDbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2VydmljZU5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbW9kZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzdGFuemFOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGZvcm1MYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEVudGl0eU1vZGFsO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCBMaW5rIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvTGluayc7XG5cbmNvbnN0IE1hcmtkb3duV3JhcHBlciA9IHN0eWxlZC5zcGFuYFxuICAgIGNvbG9yOiAkeyhwcm9wcykgPT4gcHJvcHMuY29sb3J9O1xuYDtcblxuZnVuY3Rpb24gTWFya2Rvd25NZXNzYWdlKHByb3BzKSB7XG4gICAgLy8gZmxhdE1hcCBhZGRzIHRoZSBsaW5rIHRvIHRoZSBwYXJ0IG9mIHRleHQgdGhhdCBoYXMgYmVlbiBzcGxpdCBmcm9tIHRleHRcbiAgICAvLyBhbmQgcmV0dXJucyBhIG5ldyBhcnJheSBmb3JtZWQgYnkgYXBwbHlpbmcgYSBnaXZlbiBmdW5jdGlvbiB0byBlYWNoIGVsZW1lbnQgb2YgdGhlIGFycmF5LFxuICAgIC8vIGFuZCB0aGVuIGZsYXR0ZW5pbmcgdGhlIHJlc3VsdCBieSBvbmUgbGV2ZWxcbiAgICBmdW5jdGlvbiBmbGF0TWFwKGFycmF5LCBmbikge1xuICAgICAgICBsZXQgbWFya2Rvd25UZXh0ID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hcHBpbmcgPSBmbihhcnJheVtpXSk7XG4gICAgICAgICAgICBtYXJrZG93blRleHQgPSBtYXJrZG93blRleHQuY29uY2F0KG1hcHBpbmcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXJrZG93blRleHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0TWFya2Rvd25UZXh0KCkge1xuICAgICAgICBsZXQgbWFya2Rvd25UZXh0ID0gcHJvcHMudGV4dDtcbiAgICAgICAgaWYgKHByb3BzLm1hcmtkb3duVHlwZSA9PT0gJ2xpbmsnKSB7XG4gICAgICAgICAgICBtYXJrZG93blRleHQgPSA8TGluayB0bz17cHJvcHMubGlua30+e3Byb3BzLnRleHR9PC9MaW5rPjtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9wcy5tYXJrZG93blR5cGUgPT09ICdoeWJyaWQnKSB7XG4gICAgICAgICAgICAvLyBtYXJrZG93blR5cGUgaHlicmlkIGlzIGZvciBzdXBwb3J0IG9mIGJvdGggdGV4dCBhbmQgbGlua1xuICAgICAgICAgICAgbWFya2Rvd25UZXh0ID0gZmxhdE1hcChtYXJrZG93blRleHQuc3BsaXQocHJvcHMudG9rZW4pLCAocGFydCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgIHBhcnQsXG4gICAgICAgICAgICAgICAgICAgIDxMaW5rIGtleT17cGFydH0gdG89e3Byb3BzLmxpbmt9PlxuICAgICAgICAgICAgICAgICAgICAgICAge3Byb3BzLmxpbmtUZXh0fVxuICAgICAgICAgICAgICAgICAgICA8L0xpbms+LFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG1hcmtkb3duVGV4dC5wb3AoKTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9wcy5tYXJrZG93blR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgbWFya2Rvd25UZXh0ID0gPE1hcmtkb3duV3JhcHBlciBjb2xvcj17cHJvcHMuY29sb3J9Pntwcm9wcy50ZXh0fTwvTWFya2Rvd25XcmFwcGVyPjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtYXJrZG93blRleHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIDxkaXYgZGF0YS10ZXN0PVwibXNnLW1hcmtkb3duXCI+e2dldE1hcmtkb3duVGV4dCgpfTwvZGl2Pjtcbn1cblxuTWFya2Rvd25NZXNzYWdlLnByb3BUeXBlcyA9IHtcbiAgICB0ZXh0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGxpbms6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbWFya2Rvd25UeXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRva2VuOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGxpbmtUZXh0OiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUmVhY3QubWVtbyhNYXJrZG93bk1lc3NhZ2UpO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgTGluayBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL0xpbmsnO1xuXG5mdW5jdGlvbiBIZWxwTGlua0NvbXBvbmVudChwcm9wcykge1xuICAgIGNvbnN0IHsgdGV4dCwgbGluayB9ID0gcHJvcHMuY29udHJvbE9wdGlvbnM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8TGluayB0bz17bGlua30gb3BlbkluTmV3Q29udGV4dD5cbiAgICAgICAgICAgIHt0ZXh0fVxuICAgICAgICA8L0xpbms+XG4gICAgKTtcbn1cblxuSGVscExpbmtDb21wb25lbnQucHJvcFR5cGVzID0ge1xuICAgIGNvbnRyb2xPcHRpb25zOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuXG5leHBvcnQgZGVmYXVsdCBIZWxwTGlua0NvbXBvbmVudDtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFRleHQgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9UZXh0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuXG5jb25zdCBUZXh0V3JhcHBlciA9IHN0eWxlZChUZXh0KWBcbiAgICB3aWR0aDogMzIwcHggIWltcG9ydGFudDtcbmA7XG5cbmNsYXNzIFRleHRDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGhhbmRsZUNoYW5nZSA9IChlLCB7IHZhbHVlIH0pID0+IHtcbiAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVDaGFuZ2UodGhpcy5wcm9wcy5maWVsZCwgdmFsdWUpO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8VGV4dFdyYXBwZXJcbiAgICAgICAgICAgICAgICBpbmxpbmVcbiAgICAgICAgICAgICAgICBlcnJvcj17dGhpcy5wcm9wcy5lcnJvcn1cbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17dGhpcy5wcm9wcz8uY29udHJvbE9wdGlvbnM/LnBsYWNlaG9sZGVyfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17dGhpcy5wcm9wcy5maWVsZH1cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17dGhpcy5wcm9wcy5kaXNhYmxlZH1cbiAgICAgICAgICAgICAgICB2YWx1ZT17XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMudmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHRoaXMucHJvcHMudmFsdWUgPT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMucHJvcHMudmFsdWUudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICAgICAgdHlwZT17dGhpcy5wcm9wcy5lbmNyeXB0ZWQgPyAncGFzc3dvcmQnIDogJ3RleHQnfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cblRleHRDb21wb25lbnQucHJvcFR5cGVzID0ge1xuICAgIC8vIE51bWJlciBpcyBleHBlY3RlZCBpZiBwcm92aWRlZCBudW1iZXIgaW4gZ2xvYmFsQ29uZmlnLmpzb24gaW5zdGVhZCBvZiBhIHN0cmluZy5cbiAgICB2YWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuICAgIGhhbmRsZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBmaWVsZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgY29udHJvbE9wdGlvbnM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgZW5jcnlwdGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBUZXh0Q29tcG9uZW50O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFNlbGVjdCBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL1NlbGVjdCc7XG5pbXBvcnQgQ29tYm9Cb3ggZnJvbSAnQHNwbHVuay9yZWFjdC11aS9Db21ib0JveCc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvQnV0dG9uJztcbmltcG9ydCBDbGVhciBmcm9tICdAc3BsdW5rL3JlYWN0LWljb25zL0NsZWFyJztcbmltcG9ydCB7IF8gfSBmcm9tICdAc3BsdW5rL3VpLXV0aWxzL2kxOG4nO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuXG5pbXBvcnQgeyBheGlvc0NhbGxXcmFwcGVyIH0gZnJvbSAnLi4vdXRpbC9heGlvc0NhbGxXcmFwcGVyJztcbmltcG9ydCB7IGZpbHRlclJlc3BvbnNlIH0gZnJvbSAnLi4vdXRpbC91dGlsJztcblxuY29uc3QgU2VsZWN0V3JhcHBlciA9IHN0eWxlZChTZWxlY3QpYFxuICAgIHdpZHRoOiAzMjBweCAhaW1wb3J0YW50O1xuYDtcblxuY29uc3QgU3R5bGVkRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBkaXY6Zmlyc3QtY2hpbGQge1xuICAgICAgICB3aWR0aDogMzIwcHggIWltcG9ydGFudDtcbiAgICB9XG5gO1xuXG5mdW5jdGlvbiBTaW5nbGVJbnB1dENvbXBvbmVudChwcm9wcykge1xuICAgIGNvbnN0IHtcbiAgICAgICAgZmllbGQsXG4gICAgICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgICAgIGVycm9yID0gZmFsc2UsXG4gICAgICAgIGNvbnRyb2xPcHRpb25zLFxuICAgICAgICBkZXBlbmRlbmN5VmFsdWVzLFxuICAgICAgICAuLi5yZXN0UHJvcHNcbiAgICB9ID0gcHJvcHM7XG4gICAgY29uc3Qge1xuICAgICAgICBlbmRwb2ludFVybCxcbiAgICAgICAgZGVueUxpc3QsXG4gICAgICAgIGFsbG93TGlzdCxcbiAgICAgICAgcGxhY2Vob2xkZXIgPSBfKCdTZWxlY3QgYSB2YWx1ZScpLFxuICAgICAgICBkZXBlbmRlbmNpZXMsXG4gICAgICAgIGNyZWF0ZVNlYXJjaENob2ljZSxcbiAgICAgICAgcmVmZXJlbmNlTmFtZSxcbiAgICAgICAgZGlzYWJsZVNlYXJjaCxcbiAgICAgICAgbGFiZWxGaWVsZCxcbiAgICAgICAgYXV0b0NvbXBsZXRlRmllbGRzLFxuICAgICAgICBoaWRlQ2xlYXJCdG4sXG4gICAgfSA9IGNvbnRyb2xPcHRpb25zO1xuXG4gICAgZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGUsIG9iaikge1xuICAgICAgICByZXN0UHJvcHMuaGFuZGxlQ2hhbmdlKGZpZWxkLCBvYmoudmFsdWUpO1xuICAgIH1cbiAgICBjb25zdCBPcHRpb24gPSBjcmVhdGVTZWFyY2hDaG9pY2UgPyBDb21ib0JveC5PcHRpb24gOiBTZWxlY3QuT3B0aW9uO1xuICAgIGNvbnN0IEhlYWRpbmcgPSBjcmVhdGVTZWFyY2hDaG9pY2UgPyBDb21ib0JveC5IZWFkaW5nIDogU2VsZWN0LkhlYWRpbmc7XG5cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZU9wdGlvbnMoaXRlbXMpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IFtdO1xuICAgICAgICBpdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXRlbS52YWx1ZSAmJiBpdGVtLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5wdXNoKDxPcHRpb24gbGFiZWw9e2l0ZW0ubGFiZWx9IHZhbHVlPXtpdGVtLnZhbHVlfSBrZXk9e2l0ZW0udmFsdWV9IC8+KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpdGVtLmNoaWxkcmVuICYmIGl0ZW0ubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBkYXRhLnB1c2goPEhlYWRpbmcga2V5PXtpdGVtLmxhYmVsfT57aXRlbS5sYWJlbH08L0hlYWRpbmc+KTtcbiAgICAgICAgICAgICAgICBpdGVtLmNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEucHVzaCg8T3B0aW9uIGxhYmVsPXtjaGlsZC5sYWJlbH0gdmFsdWU9e2NoaWxkLnZhbHVlfSBrZXk9e2NoaWxkLnZhbHVlfSAvPik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgW29wdGlvbnMsIHNldE9wdGlvbnNdID0gdXNlU3RhdGUobnVsbCk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWVuZHBvaW50VXJsICYmICFyZWZlcmVuY2VOYW1lICYmIGF1dG9Db21wbGV0ZUZpZWxkcykge1xuICAgICAgICAgICAgc2V0T3B0aW9ucyhnZW5lcmF0ZU9wdGlvbnMoYXV0b0NvbXBsZXRlRmllbGRzKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY3VycmVudCA9IHRydWU7XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IGF4aW9zLkNhbmNlbFRva2VuLnNvdXJjZSgpO1xuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHsgQ2FuY2VsVG9rZW46IHNvdXJjZS50b2tlbiwgaGFuZGxlRXJyb3I6IHRydWUgfTtcbiAgICAgICAgaWYgKHJlZmVyZW5jZU5hbWUpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuc2VydmljZU5hbWUgPSByZWZlcmVuY2VOYW1lO1xuICAgICAgICB9IGVsc2UgaWYgKGVuZHBvaW50VXJsKSB7XG4gICAgICAgICAgICBvcHRpb25zLmVuZHBvaW50VXJsID0gZW5kcG9pbnRVcmw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGVwZW5kZW5jeVZhbHVlcykge1xuICAgICAgICAgICAgb3B0aW9ucy5wYXJhbXMgPSBkZXBlbmRlbmN5VmFsdWVzO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGVwZW5kZW5jaWVzIHx8IGRlcGVuZGVuY3lWYWx1ZXMpIHtcbiAgICAgICAgICAgIHNldExvYWRpbmcodHJ1ZSk7XG4gICAgICAgICAgICBheGlvc0NhbGxXcmFwcGVyKG9wdGlvbnMpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRPcHRpb25zKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlT3B0aW9ucyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyUmVzcG9uc2UocmVzcG9uc2UuZGF0YS5lbnRyeSwgbGFiZWxGaWVsZCwgYWxsb3dMaXN0LCBkZW55TGlzdClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgc291cmNlLmNhbmNlbCgnT3BlcmF0aW9uIGNhbmNlbGVkLicpO1xuICAgICAgICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICAgfSwgW2RlcGVuZGVuY3lWYWx1ZXNdKTtcblxuICAgIGNvbnN0IGVmZmVjdGl2ZURpc2FibGVkID0gbG9hZGluZyA/IHRydWUgOiBkaXNhYmxlZDtcbiAgICBjb25zdCBlZmZlY3RpdmVQbGFjZWhvbGRlciA9IGxvYWRpbmcgPyBfKCdMb2FkaW5nJykgOiBwbGFjZWhvbGRlcjtcbiAgICAvLyBoaWRlQ2xlYXJCdG49dHJ1ZSBvbmx5IHBhc3NlZCBmb3IgT0F1dGggZWxzZSBpdHMgdW5kZWZpbmVkXG4gICAgY29uc3QgZWZmZWN0aXZlSXNDbGVhcmFibGUgPSBlZmZlY3RpdmVEaXNhYmxlZCA/IGZhbHNlIDogIWhpZGVDbGVhckJ0bjtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgICB7Y3JlYXRlU2VhcmNoQ2hvaWNlID8gKFxuICAgICAgICAgICAgICAgIDxTdHlsZWREaXYgY2xhc3NOYW1lPVwiZHJvcGRvd25Cb3hcIj5cbiAgICAgICAgICAgICAgICAgICAgPENvbWJvQm94XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17cHJvcHMudmFsdWUgPT09IG51bGwgPyAnJyA6IHByb3BzLnZhbHVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT17ZmllbGR9XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcj17ZXJyb3J9XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17ZWZmZWN0aXZlUGxhY2Vob2xkZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17ZWZmZWN0aXZlRGlzYWJsZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgaW5saW5lXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtvcHRpb25zICYmIG9wdGlvbnMubGVuZ3RoID4gMCAmJiBvcHRpb25zfVxuICAgICAgICAgICAgICAgICAgICA8L0NvbWJvQm94PlxuICAgICAgICAgICAgICAgIDwvU3R5bGVkRGl2PlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0V3JhcHBlclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZHJvcGRvd25Cb3hcIlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10ZXN0LWxvYWRpbmc9e2xvYWRpbmd9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17cHJvcHMudmFsdWV9XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lPXtmaWVsZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yPXtlcnJvcn1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtlZmZlY3RpdmVQbGFjZWhvbGRlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtlZmZlY3RpdmVEaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXI9eyFkaXNhYmxlU2VhcmNofVxuICAgICAgICAgICAgICAgICAgICAgICAgaW5saW5lXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtvcHRpb25zICYmIG9wdGlvbnMubGVuZ3RoID4gMCAmJiBvcHRpb25zfVxuICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdFdyYXBwZXI+XG4gICAgICAgICAgICAgICAgICAgIHtlZmZlY3RpdmVJc0NsZWFyYWJsZSA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRlc3Q9XCJjbGVhclwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZWFyYW5jZT1cInNlY29uZGFyeVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj17PENsZWFyIC8+fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHJlc3RQcm9wcy5oYW5kbGVDaGFuZ2UoZmllbGQsICcnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgPC8+XG4gICAgKTtcbn1cblxuU2luZ2xlSW5wdXRDb21wb25lbnQucHJvcFR5cGVzID0ge1xuICAgIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgaGFuZGxlQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGZpZWxkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGRlcGVuZGVuY3lWYWx1ZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY29udHJvbE9wdGlvbnM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgIGF1dG9Db21wbGV0ZUZpZWxkczogUHJvcFR5cGVzLmFycmF5LFxuICAgICAgICBlbmRwb2ludFVybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgZGVueUxpc3Q6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGFsbG93TGlzdDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGRlcGVuZGVuY2llczogUHJvcFR5cGVzLmFycmF5LFxuICAgICAgICBjcmVhdGVTZWFyY2hDaG9pY2U6IFByb3BUeXBlcy5ib29sLFxuICAgICAgICByZWZlcmVuY2VOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBkaXNhYmxlU2VhcmNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgbGFiZWxGaWVsZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgaGlkZUNsZWFyQnRuOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB9KSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNpbmdsZUlucHV0Q29tcG9uZW50O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IE11bHRpc2VsZWN0IGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvTXVsdGlzZWxlY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuXG5pbXBvcnQgeyBheGlvc0NhbGxXcmFwcGVyIH0gZnJvbSAnLi4vdXRpbC9heGlvc0NhbGxXcmFwcGVyJztcbmltcG9ydCB7IGZpbHRlclJlc3BvbnNlIH0gZnJvbSAnLi4vdXRpbC91dGlsJztcbmltcG9ydCB7IGdldEZvcm1hdHRlZE1lc3NhZ2UgfSBmcm9tICcuLi91dGlsL21lc3NhZ2VVdGlsJztcblxuY29uc3QgTXVsdGlTZWxlY3RXcmFwcGVyID0gc3R5bGVkKE11bHRpc2VsZWN0KWBcbiAgICB3aWR0aDogMzIwcHggIWltcG9ydGFudDtcbmA7XG5cbmZ1bmN0aW9uIE11bHRpSW5wdXRDb21wb25lbnQocHJvcHMpIHtcbiAgICBjb25zdCB7XG4gICAgICAgIGZpZWxkLFxuICAgICAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgICAgICBlcnJvciA9IGZhbHNlLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgY29udHJvbE9wdGlvbnMsXG4gICAgICAgIGRlcGVuZGVuY3lWYWx1ZXMsXG4gICAgICAgIC4uLnJlc3RQcm9wc1xuICAgIH0gPSBwcm9wcztcbiAgICBjb25zdCB7XG4gICAgICAgIGVuZHBvaW50VXJsLFxuICAgICAgICBkZW55TGlzdCxcbiAgICAgICAgYWxsb3dMaXN0LFxuICAgICAgICBpdGVtcyxcbiAgICAgICAgZGVwZW5kZW5jaWVzLFxuICAgICAgICByZWZlcmVuY2VOYW1lLFxuICAgICAgICBwbGFjZWhvbGRlcixcbiAgICAgICAgY3JlYXRlU2VhcmNoQ2hvaWNlLFxuICAgICAgICBsYWJlbEZpZWxkLFxuICAgICAgICBkZWxpbWl0ZXIgPSAnLCcsXG4gICAgfSA9IGNvbnRyb2xPcHRpb25zO1xuXG4gICAgZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGUsIHsgdmFsdWVzIH0pIHtcbiAgICAgICAgcmVzdFByb3BzLmhhbmRsZUNoYW5nZShmaWVsZCwgdmFsdWVzLmpvaW4oZGVsaW1pdGVyKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVPcHRpb25zKGl0ZW1MaXN0KSB7XG4gICAgICAgIHJldHVybiBpdGVtTGlzdC5tYXAoKGl0ZW0pID0+IChcbiAgICAgICAgICAgIDxNdWx0aXNlbGVjdC5PcHRpb24gbGFiZWw9e2l0ZW0ubGFiZWx9IHZhbHVlPXtpdGVtLnZhbHVlfSBrZXk9e2l0ZW0udmFsdWV9IC8+XG4gICAgICAgICkpO1xuICAgIH1cblxuICAgIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBbb3B0aW9ucywgc2V0T3B0aW9uc10gPSB1c2VTdGF0ZShudWxsKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghZW5kcG9pbnRVcmwgJiYgaXRlbXMpIHtcbiAgICAgICAgICAgIHNldE9wdGlvbnMoZ2VuZXJhdGVPcHRpb25zKGl0ZW1zKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY3VycmVudCA9IHRydWU7XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IGF4aW9zLkNhbmNlbFRva2VuLnNvdXJjZSgpO1xuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHsgQ2FuY2VsVG9rZW46IHNvdXJjZS50b2tlbiwgaGFuZGxlRXJyb3I6IHRydWUgfTtcbiAgICAgICAgaWYgKHJlZmVyZW5jZU5hbWUpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuc2VydmljZU5hbWUgPSByZWZlcmVuY2VOYW1lO1xuICAgICAgICB9IGVsc2UgaWYgKGVuZHBvaW50VXJsKSB7XG4gICAgICAgICAgICBvcHRpb25zLmVuZHBvaW50VXJsID0gZW5kcG9pbnRVcmw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGVwZW5kZW5jeVZhbHVlcykge1xuICAgICAgICAgICAgb3B0aW9ucy5wYXJhbXMgPSBkZXBlbmRlbmN5VmFsdWVzO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGVwZW5kZW5jaWVzIHx8IGRlcGVuZGVuY3lWYWx1ZXMpIHtcbiAgICAgICAgICAgIHNldExvYWRpbmcodHJ1ZSk7XG4gICAgICAgICAgICBheGlvc0NhbGxXcmFwcGVyKG9wdGlvbnMpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRPcHRpb25zKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlT3B0aW9ucyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyUmVzcG9uc2UocmVzcG9uc2UuZGF0YS5lbnRyeSwgbGFiZWxGaWVsZCwgYWxsb3dMaXN0LCBkZW55TGlzdClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgc291cmNlLmNhbmNlbCgnT3BlcmF0aW9uIGNhbmNlbGVkLicpO1xuICAgICAgICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICAgfSwgW2RlcGVuZGVuY3lWYWx1ZXNdKTtcblxuICAgIGNvbnN0IGVmZmVjdGl2ZURpc2FibGVkID0gbG9hZGluZyA/IHRydWUgOiBkaXNhYmxlZDtcbiAgICBjb25zdCBlZmZlY3RpdmVQbGFjZWhvbGRlciA9IGxvYWRpbmcgPyBnZXRGb3JtYXR0ZWRNZXNzYWdlKDExNSkgOiBwbGFjZWhvbGRlcjtcblxuICAgIGNvbnN0IHZhbHVlTGlzdCA9IHZhbHVlID8gdmFsdWUuc3BsaXQoZGVsaW1pdGVyKSA6IFtdO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPE11bHRpU2VsZWN0V3JhcHBlclxuICAgICAgICAgICAgdmFsdWVzPXt2YWx1ZUxpc3R9XG4gICAgICAgICAgICBlcnJvcj17ZXJyb3J9XG4gICAgICAgICAgICBuYW1lPXtmaWVsZH1cbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtlZmZlY3RpdmVQbGFjZWhvbGRlcn1cbiAgICAgICAgICAgIGRpc2FibGVkPXtlZmZlY3RpdmVEaXNhYmxlZH1cbiAgICAgICAgICAgIGFsbG93TmV3VmFsdWVzPXtjcmVhdGVTZWFyY2hDaG9pY2V9XG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxuICAgICAgICAgICAgaW5saW5lXG4gICAgICAgID5cbiAgICAgICAgICAgIHtvcHRpb25zICYmIG9wdGlvbnMubGVuZ3RoID4gMCAmJiBvcHRpb25zfVxuICAgICAgICA8L011bHRpU2VsZWN0V3JhcHBlcj5cbiAgICApO1xufVxuXG5NdWx0aUlucHV0Q29tcG9uZW50LnByb3BUeXBlcyA9IHtcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuICAgIGhhbmRsZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBmaWVsZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBkZXBlbmRlbmN5VmFsdWVzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNvbnRyb2xPcHRpb25zOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICBkZWxpbWl0ZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBjcmVhdGVTZWFyY2hDaG9pY2U6IFByb3BUeXBlcy5ib29sLFxuICAgICAgICByZWZlcmVuY2VOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBkZXBlbmRlbmNpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICAgICAgZW5kcG9pbnRVcmw6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGRlbnlMaXN0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBhbGxvd0xpc3Q6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGxhYmVsRmllbGQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGl0ZW1zOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICAgICAgICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgKSxcbiAgICB9KSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE11bHRpSW5wdXRDb21wb25lbnQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBTd2l0Y2ggZnJvbSAnQHNwbHVuay9yZWFjdC11aS9Td2l0Y2gnO1xuaW1wb3J0IHsgaXNGYWxzZSB9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5cbmNsYXNzIENoZWNrQm94Q29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBoYW5kbGVDaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlICYmICFpc0ZhbHNlKHRoaXMucHJvcHMudmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmhhbmRsZUNoYW5nZSh0aGlzLnByb3BzLmZpZWxkLCAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuaGFuZGxlQ2hhbmdlKHRoaXMucHJvcHMuZmllbGQsIDEpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxTd2l0Y2hcbiAgICAgICAgICAgICAgICBrZXk9e3RoaXMucHJvcHMuZmllbGR9XG4gICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMucHJvcHMuZmllbGR9XG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9e3RoaXMucHJvcHMuZGlzYWJsZWR9XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQ9eyEodGhpcy5wcm9wcy52YWx1ZSA/IGlzRmFsc2UodGhpcy5wcm9wcy52YWx1ZSkgOiB0cnVlKX1cbiAgICAgICAgICAgICAgICBhcHBlYXJhbmNlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbkNoZWNrQm94Q29tcG9uZW50LnByb3BUeXBlcyA9IHtcbiAgICB2YWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmJvb2wsIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgICBoYW5kbGVDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZmllbGQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ2hlY2tCb3hDb21wb25lbnQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSYWRpb0JhciBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL1JhZGlvQmFyJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuXG5jb25zdCBSYWRpb0JhcldyYXBwZXIgPSBzdHlsZWQoUmFkaW9CYXIpYFxuICAgIHdpZHRoOiAzMjBweDtcbmA7XG5cbmNsYXNzIFJhZGlvQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBoYW5kbGVDaGFuZ2UgPSAoZSwgeyB2YWx1ZSB9KSA9PiB7XG4gICAgICAgIHRoaXMucHJvcHMuaGFuZGxlQ2hhbmdlKHRoaXMucHJvcHMuZmllbGQsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFJhZGlvQmFyV3JhcHBlclxuICAgICAgICAgICAgICAgIGlubGluZVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy52YWx1ZX1cbiAgICAgICAgICAgICAgICBrZXk9e3RoaXMucHJvcHMuZmllbGR9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY29udHJvbE9wdGlvbnMuaXRlbXMubWFwKChpdGVtKSA9PiAoXG4gICAgICAgICAgICAgICAgICAgIDxSYWRpb0Jhci5PcHRpb24ga2V5PXtpdGVtLnZhbHVlfSB2YWx1ZT17aXRlbS52YWx1ZX0gbGFiZWw9e2l0ZW0ubGFiZWx9IC8+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L1JhZGlvQmFyV3JhcHBlcj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cblJhZGlvQ29tcG9uZW50LnByb3BUeXBlcyA9IHtcbiAgICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBoYW5kbGVDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZmllbGQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29udHJvbE9wdGlvbnM6IFByb3BUeXBlcy5vYmplY3QsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBSYWRpb0NvbXBvbmVudDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFN0YXRpY0NvbnRlbnQgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9TdGF0aWNDb250ZW50JztcblxuZnVuY3Rpb24gUGxhY2Vob2xkZXJDb21wb25lbnQocHJvcHMpIHtcbiAgICBjb25zdCB7IGRlZmF1bHRWYWx1ZSB9ID0gcHJvcHMuY29udHJvbE9wdGlvbnM7XG5cbiAgICByZXR1cm4gPFN0YXRpY0NvbnRlbnQ+e2RlZmF1bHRWYWx1ZX08L1N0YXRpY0NvbnRlbnQ+O1xufVxuXG5QbGFjZWhvbGRlckNvbXBvbmVudC5wcm9wVHlwZXMgPSB7XG4gICAgY29udHJvbE9wdGlvbnM6IFByb3BUeXBlcy5vYmplY3QsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBQbGFjZWhvbGRlckNvbXBvbmVudDtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgXyB9IGZyb20gJ0BzcGx1bmsvdWktdXRpbHMvaTE4bic7XG5cbmltcG9ydCB7IGdldFVuaWZpZWRDb25maWdzIH0gZnJvbSAnLi4vdXRpbC91dGlsJztcbmltcG9ydCB7IGdldEJ1aWxkRGlyUGF0aCB9IGZyb20gJy4uL3V0aWwvc2NyaXB0JztcblxuY2xhc3MgQ3VzdG9tQ29udHJvbCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zaG91bGRSZW5kZXIgPSB0cnVlO1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBjb25zdCBnbG9iYWxDb25maWcgPSBnZXRVbmlmaWVkQ29uZmlncygpO1xuICAgICAgICBjb25zdCBhcHBOYW1lID0gZ2xvYmFsQ29uZmlnLm1ldGEubmFtZTtcblxuICAgICAgICB0aGlzLmxvYWRDdXN0b21Db250cm9sKFxuICAgICAgICAgICAgdGhpcy5wcm9wcy5jb250cm9sT3B0aW9ucy5zcmMsXG4gICAgICAgICAgICB0aGlzLnByb3BzLmNvbnRyb2xPcHRpb25zLnR5cGUsXG4gICAgICAgICAgICBhcHBOYW1lXG4gICAgICAgICkudGhlbigoQ29udHJvbCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY3VzdG9tQ29udHJvbCA9IG5ldyBDb250cm9sKFxuICAgICAgICAgICAgICAgIGdsb2JhbENvbmZpZyxcbiAgICAgICAgICAgICAgICB0aGlzLmVsLFxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuZGF0YSxcbiAgICAgICAgICAgICAgICB0aGlzLnNldFZhbHVlLFxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMudXRpbEN1c3RvbUZ1bmN0aW9uc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGN1c3RvbUNvbnRyb2wucmVuZGVyKCk7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY3VzdG9tQ29udHJvbC52YWxpZGF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5hZGRDdXN0b21WYWxpZGF0b3IodGhpcy5wcm9wcy5maWVsZCwgY3VzdG9tQ29udHJvbC52YWxpZGF0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBsb2FkaW5nOiBmYWxzZSB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgICAgIGlmICghbmV4dFN0YXRlLmxvYWRpbmcgJiYgdGhpcy5zaG91bGRSZW5kZXIpIHtcbiAgICAgICAgICAgIHRoaXMuc2hvdWxkUmVuZGVyID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgbG9hZEN1c3RvbUNvbnRyb2wgPSAobW9kdWxlLCB0eXBlLCBhcHBOYW1lKSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdleHRlcm5hbCcpIHtcbiAgICAgICAgICAgICAgICBpbXBvcnQoLyogd2VicGFja0lnbm9yZTogdHJ1ZSAqLyBgJHtnZXRCdWlsZERpclBhdGgoKX0vY3VzdG9tLyR7bW9kdWxlfS5qc2ApLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgIChleHRlcm5hbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgQ29udHJvbCA9IGV4dGVybmFsLmRlZmF1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKENvbnRyb2wpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX19ub25fd2VicGFja19yZXF1aXJlX18oW2BhcHAvJHthcHBOYW1lfS9qcy9idWlsZC9jdXN0b20vJHttb2R1bGV9YF0sIChDb250cm9sKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoQ29udHJvbCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBzZXRWYWx1ZSA9IChuZXdWYWx1ZSkgPT4ge1xuICAgICAgICB0aGlzLnByb3BzLmhhbmRsZUNoYW5nZSh0aGlzLnByb3BzLmZpZWxkLCBuZXdWYWx1ZSk7XG4gICAgfTtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAge3RoaXMuc3RhdGUubG9hZGluZyAmJiBfKCdMb2FkaW5nLi4uJyl9XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICA8c3BhbiAvLyBub3NlbWdyZXA6IHR5cGVzY3JpcHQucmVhY3Quc2VjdXJpdHkuYXVkaXQucmVhY3Qtbm8tcmVmcy5yZWFjdC1uby1yZWZzXG4gICAgICAgICAgICAgICAgICAgICAgICByZWY9eyhlbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWwgPSBlbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyB2aXNpYmlsaXR5OiB0aGlzLnN0YXRlLmxvYWRpbmcgPyAnaGlkZGVuJyA6ICd2aXNpYmxlJyB9fVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuQ3VzdG9tQ29udHJvbC5wcm9wVHlwZXMgPSB7XG4gICAgZGF0YTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBmaWVsZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBoYW5kbGVDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAgIGNvbnRyb2xPcHRpb25zOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGFkZEN1c3RvbVZhbGlkYXRvcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgdXRpbEN1c3RvbUZ1bmN0aW9uczogUHJvcFR5cGVzLm9iamVjdCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEN1c3RvbUNvbnRyb2w7XG4iLCJpbXBvcnQgSGVscExpbmtDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50cy9IZWxwTGlua0NvbXBvbmVudCc7XG5pbXBvcnQgVGV4dENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnRzL1RleHRDb21wb25lbnQnO1xuaW1wb3J0IFNpbmdsZUlucHV0Q29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudHMvU2luZ2xlSW5wdXRDb21wb25lbnQnO1xuaW1wb3J0IE11bHRpSW5wdXRDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50cy9NdWx0aUlucHV0Q29tcG9uZW50JztcbmltcG9ydCBDaGVja0JveENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnRzL0NoZWNrQm94Q29tcG9uZW50JztcbmltcG9ydCBSYWRpb0NvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnRzL1JhZGlvQ29tcG9uZW50JztcbmltcG9ydCBQbGFjZWhvbGRlckNvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnRzL1BsYWNlaG9sZGVyQ29tcG9uZW50JztcbmltcG9ydCBDdXN0b21Db250cm9sIGZyb20gJy4uL2NvbXBvbmVudHMvQ3VzdG9tQ29udHJvbCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICB0ZXh0OiBUZXh0Q29tcG9uZW50LFxuICAgIHNpbmdsZVNlbGVjdDogU2luZ2xlSW5wdXRDb21wb25lbnQsXG4gICAgaGVscExpbms6IEhlbHBMaW5rQ29tcG9uZW50LFxuICAgIG11bHRpcGxlU2VsZWN0OiBNdWx0aUlucHV0Q29tcG9uZW50LFxuICAgIGNoZWNrYm94OiBDaGVja0JveENvbXBvbmVudCxcbiAgICByYWRpbzogUmFkaW9Db21wb25lbnQsXG4gICAgcGxhY2Vob2xkZXI6IFBsYWNlaG9sZGVyQ29tcG9uZW50LFxuICAgIGN1c3RvbTogQ3VzdG9tQ29udHJvbCxcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBDb250cm9sR3JvdXAgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9Db250cm9sR3JvdXAnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbmltcG9ydCBNYXJrZG93bk1lc3NhZ2UgZnJvbSAnLi9NYXJrZG93bk1lc3NhZ2UnO1xuaW1wb3J0IENPTlRST0xfVFlQRV9NQVAgZnJvbSAnLi4vY29uc3RhbnRzL0NvbnRyb2xUeXBlTWFwJztcblxuY29uc3QgQ3VzdG9tRWxlbWVudCA9IHN0eWxlZC5kaXZgXG4gICAgbWFyZ2luLWxlZnQ6IDMwcHg7XG5gO1xuXG5jb25zdCBDb250cm9sR3JvdXBXcmFwcGVyID0gc3R5bGVkKENvbnRyb2xHcm91cCkuYXR0cnMoKHByb3BzKSA9PiAoe1xuICAgICdkYXRhLW5hbWUnOiBwcm9wcy5kYXRhTmFtZSxcbn0pKWBcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG5cbiAgICA+ICoge1xuICAgICAgICAmOmZpcnN0LWNoaWxkIHtcbiAgICAgICAgICAgIHdpZHRoOiAyNDBweCAhaW1wb3J0YW50O1xuICAgICAgICB9XG4gICAgICAgICY6bnRoLWNoaWxkKDMpIHtcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAyNzBweCAhaW1wb3J0YW50O1xuICAgICAgICAgICAgd2lkdGg6IDMyMHB4O1xuICAgICAgICB9XG4gICAgfVxuYDtcblxuY2xhc3MgQ29udHJvbFdyYXBwZXIgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuY29udHJvbFR5cGUgPSB0aGlzLmlzU3RyaW5nKHByb3BzLmVudGl0eS50eXBlKVxuICAgICAgICAgICAgPyBDT05UUk9MX1RZUEVfTUFQW3Byb3BzLmVudGl0eS50eXBlXVxuICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAvLyBBZGQgJ29wdGlvbmFsJyBwbGFjZWhvbGRlciBmb3Igb3B0aW9uYWwgZmllbGRcbiAgICAgICAgLy8gTm90ZTogZm9yIG9hdXRoIGZpZWxkIGl0IGlzIHBvc3NpYmxlIHJlcXVpcmVkIGlzIGZhbHNlIGJ1dCB0aGUgZmllbGQgaXMgYWN0dWFsbHkgcmVxdWlyZWRcbiAgICAgICAgLy8gYmFzZWQgb24gd2hhdCB0eXBlIG9mIGF1dGhlbnRpY2F0aW9uIGlzIHNlbGVjdGVkXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHRoaXMucHJvcHMuZW50aXR5Lm9wdGlvbnM7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICF0aGlzLnByb3BzLmVudGl0eS5yZXF1aXJlZCAmJlxuICAgICAgICAgICAgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLnByb3BzLmVudGl0eSwgJ29hdXRoX2ZpZWxkJykgJiZcbiAgICAgICAgICAgICF0aGlzLm9wdGlvbnM/LnBsYWNlaG9sZGVyXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ29wdGlvbmFsJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpc1N0cmluZyA9IChzdHIpID0+IHtcbiAgICAgICAgcmV0dXJuICEhKHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnIHx8IHN0ciBpbnN0YW5jZW9mIFN0cmluZyk7XG4gICAgfTtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBmaWVsZCwgdHlwZSwgbGFiZWwsIHRvb2x0aXAsIGhlbHAsIGVuY3J5cHRlZCA9IGZhbHNlIH0gPSB0aGlzLnByb3BzLmVudGl0eTtcbiAgICAgICAgY29uc3QgeyBoYW5kbGVDaGFuZ2UsIGFkZEN1c3RvbVZhbGlkYXRvciwgdXRpbEN1c3RvbUZ1bmN0aW9ucyB9ID0gdGhpcy5wcm9wcy51dGlsaXR5RnVuY3RzO1xuICAgICAgICAvLyBXZSBoYXZlIHRvIHB1dCBlbXB0eSBvYmplY3QgYmVjYXVzZSBtYXJrRG93bk1lc3NhZ2UgcHJvcCBjYW4gYmUgdW5kZWZpbmVkXG4gICAgICAgIC8vIGJlY2F1c2Ugd2UgYXJlIG5vdCBleHBsaWNpdGx5IHNldHRpbmcgaXQgYnV0IGV4cGVjdGluZyBpdCBmcm9tIGN1c3RvbSBob29rcyBvbmx5LlxuICAgICAgICBjb25zdCB7IHRleHQsIGxpbmssIGNvbG9yLCBtYXJrZG93blR5cGUsIHRva2VuLCBsaW5rVGV4dCB9ID1cbiAgICAgICAgICAgIHRoaXMucHJvcHMubWFya2Rvd25NZXNzYWdlIHx8IHt9O1xuICAgICAgICBsZXQgcm93VmlldztcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZW50aXR5LnR5cGUgPT09ICdjdXN0b20nKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnByb3BzLnZhbHVlLFxuICAgICAgICAgICAgICAgIG1vZGU6IHRoaXMucHJvcHMubW9kZSxcbiAgICAgICAgICAgICAgICBzZXJ2aWNlTmFtZTogdGhpcy5wcm9wcy5zZXJ2aWNlTmFtZSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJvd1ZpZXcgPSB0aGlzLmNvbnRyb2xUeXBlXG4gICAgICAgICAgICAgICAgPyBSZWFjdC5jcmVhdGVFbGVtZW50KHRoaXMuY29udHJvbFR5cGUsIHtcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUNoYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgICBhZGRDdXN0b21WYWxpZGF0b3IsXG4gICAgICAgICAgICAgICAgICAgICAgdXRpbEN1c3RvbUZ1bmN0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICBjb250cm9sT3B0aW9uczogdGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICA6IGBObyBWaWV3IEZvdW5kIGZvciAke3R5cGV9IHR5cGVgO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcm93VmlldyA9IHRoaXMuY29udHJvbFR5cGVcbiAgICAgICAgICAgICAgICA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQodGhpcy5jb250cm9sVHlwZSwge1xuICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUNoYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5wcm9wcy52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICBmaWVsZCxcbiAgICAgICAgICAgICAgICAgICAgICBjb250cm9sT3B0aW9uczogdGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiB0aGlzLnByb3BzLmVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0aGlzLnByb3BzLmRpc2FibGVkLFxuICAgICAgICAgICAgICAgICAgICAgIGVuY3J5cHRlZCxcbiAgICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmN5VmFsdWVzOiB0aGlzLnByb3BzLmRlcGVuZGVuY3lWYWx1ZXMsXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIDogYE5vIFZpZXcgRm91bmQgZm9yICR7dHlwZX0gdHlwZWA7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBoZWxwVGV4dCA9IChcbiAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgPE1hcmtkb3duTWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICB0ZXh0PXt0ZXh0IHx8ICcnfVxuICAgICAgICAgICAgICAgICAgICBsaW5rPXtsaW5rIHx8ICcnfVxuICAgICAgICAgICAgICAgICAgICBjb2xvcj17Y29sb3IgfHwgJyd9XG4gICAgICAgICAgICAgICAgICAgIG1hcmtkb3duVHlwZT17bWFya2Rvd25UeXBlIHx8ICcnfVxuICAgICAgICAgICAgICAgICAgICB0b2tlbj17dG9rZW4gfHwgJyd9XG4gICAgICAgICAgICAgICAgICAgIGxpbmtUZXh0PXtsaW5rVGV4dCB8fCAnJ31cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIHtoZWxwfVxuICAgICAgICAgICAgPC8+XG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMucHJvcHMuZGlzcGxheSAmJiAoXG4gICAgICAgICAgICAgICAgPENvbnRyb2xHcm91cFdyYXBwZXJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw9e2xhYmVsfVxuICAgICAgICAgICAgICAgICAgICBoZWxwPXtoZWxwVGV4dH1cbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcD17dG9vbHRpcH1cbiAgICAgICAgICAgICAgICAgICAgZXJyb3I9e3RoaXMucHJvcHMuZXJyb3J9XG4gICAgICAgICAgICAgICAgICAgIGRhdGFOYW1lPXtmaWVsZH1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxDdXN0b21FbGVtZW50Pntyb3dWaWV3fTwvQ3VzdG9tRWxlbWVudD5cbiAgICAgICAgICAgICAgICA8L0NvbnRyb2xHcm91cFdyYXBwZXI+XG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxufVxuXG5Db250cm9sV3JhcHBlci5wcm9wVHlwZXMgPSB7XG4gICAgbW9kZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB1dGlsaXR5RnVuY3RzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuICAgIGRpc3BsYXk6IFByb3BUeXBlcy5ib29sLFxuICAgIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBlbnRpdHk6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIG1hcmtkb3duTWVzc2FnZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzZXJ2aWNlTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBkZXBlbmRlbmN5VmFsdWVzOiBQcm9wVHlwZXMub2JqZWN0LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbFdyYXBwZXI7XG4iLCJpbXBvcnQgeyBnZXRGb3JtYXR0ZWRNZXNzYWdlIH0gZnJvbSAnLi4vdXRpbC9tZXNzYWdlVXRpbCc7XG5cbi8vIFJlZ2V4IG9mIGlwdjQsIGVtYWlsIGFuZCBkYXRlIGNvbWUgZnJvbVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZGVlZC9tZXRlb3Itc2ltcGxlLXNjaGVtYS9ibG9iLzRjMWUyNTcwYjEwNTVhZDYwZTFlNjU0MDU4MmI4ODJmNzY1ZmRlMTMvc2ltcGxlLXNjaGVtYS5qcyNMNTI1XG5leHBvcnQgY29uc3QgUkVHRVhfSVBWNCA9IC9eKD86KD86WzAtMV0/XFxkezEsMn18MlswLTRdXFxkfDI1WzAtNV0pKD86XFwufCQpKXs0fSQvO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1lc2NhcGVcbmV4cG9ydCBjb25zdCBSRUdFWF9FTUFJTCA9IC9eW2EtekEtWjAtOS4hIyQlJicqK1xcLz0/Xl9ge3x9fi1dK0BbYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8oPzpcXC5bYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8pKiQvO1xuXG4vLyBDb2RlUUw6IFRoaXMgUmVnZXggd2lsbCBiZSBleGVjdXRlZCBhdCBjbGllbnQgc2lkZSBhbmQgdG8gYXZvaWQgcmVncmVzc2lvbiB3ZSB3b24ndCBmaXguXG5leHBvcnQgY29uc3QgUkVHRVhfVVJMID0gL14oPzooPzpodHRwcz98ZnRwfG9wY1xcLnRjcCk6XFwvXFwvKT8oPzpcXFMrKD86OlxcUyopP0ApPyg/Oig/OlsxLTldXFxkP3wxXFxkXFxkfDJbMDFdXFxkfDIyWzAtM10pKD86XFwuKD86MT9cXGR7MSwyfXwyWzAtNF1cXGR8MjVbMC01XSkpezJ9KD86XFwuKD86WzEtOV1cXGQ/fDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNF0pKXwoPzooPzpbYS16XFx1MDBhMS1cXHVmZmZmMC05XSstP18/KSpbYS16XFx1MDBhMS1cXHVmZmZmMC05XSspKD86XFwuKD86W2EtelxcdTAwYTEtXFx1ZmZmZjAtOV0rLT8pKlthLXpcXHUwMGExLVxcdWZmZmYwLTldKykqKD86XFwuKD86W2EtelxcdTAwYTEtXFx1ZmZmZl17Mix9KSk/KSg/OjpcXGR7Miw1fSk/KD86XFwvW15cXHNdKik/JC87XG5cbi8vIEZyb20gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvYmxvYi8yLjE3LjEvbW9tZW50LmpzI0wxOTgwIG1vbWVudC5qcyBpcyB1c2luZyByZWdleCBiZWxvdyBmb3IgY2hlY2tpbmcgSVNPODYwMSBkYXRlIHN0cmluZ1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG5leHBvcnQgY29uc3QgUkVHRVhfREFURSA9IC9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSktKD86XFxkXFxkLVxcZFxcZHxXXFxkXFxkLVxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGQpKSg/OihUfCApKFxcZFxcZCg/OjpcXGRcXGQoPzo6XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFtcXCtcXC1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLztcblxuZXhwb3J0IGNvbnN0IFBSRURFRklORURfVkFMSURBVE9SU19ESUNUID0ge1xuICAgIHVybDogeyByZWdleDogUkVHRVhfVVJMLCBpbnB1dFZhbHVlVHlwZTogZ2V0Rm9ybWF0dGVkTWVzc2FnZSgxMTEpIH0sXG4gICAgZW1haWw6IHsgcmVnZXg6IFJFR0VYX0VNQUlMLCBpbnB1dFZhbHVlVHlwZTogZ2V0Rm9ybWF0dGVkTWVzc2FnZSgxMTIpIH0sXG4gICAgaXB2NDogeyByZWdleDogUkVHRVhfSVBWNCwgaW5wdXRWYWx1ZVR5cGU6IGdldEZvcm1hdHRlZE1lc3NhZ2UoMTEzKSB9LFxuICAgIGRhdGU6IHsgcmVnZXg6IFJFR0VYX0RBVEUsIGlucHV0VmFsdWVUeXBlOiBnZXRGb3JtYXR0ZWRNZXNzYWdlKDExNCkgfSxcbn07XG4iLCJpbXBvcnQgeyBQUkVERUZJTkVEX1ZBTElEQVRPUlNfRElDVCB9IGZyb20gJy4uL2NvbnN0YW50cy9wcmVEZWZpbmVkUmVnZXgnO1xuaW1wb3J0IHsgZ2V0Rm9ybWF0dGVkTWVzc2FnZSB9IGZyb20gJy4vbWVzc2FnZVV0aWwnO1xuaW1wb3J0IHtcbiAgICBwYXJzZU51bWJlclZhbGlkYXRvcixcbiAgICBwYXJzZVJlZ2V4UmF3U3RyLFxuICAgIHBhcnNlU3RyaW5nVmFsaWRhdG9yLFxuICAgIHBhcnNlRnVuY3Rpb25SYXdTdHIsXG59IGZyb20gJy4vdWNjQ29uZmlndXJhdGlvblZhbGlkYXRvcnMnO1xuXG4vLyBWYWxpZGF0ZSBwcm92aWRlZCBzYXZlVmFsaWRhdG9yIGZ1bmN0aW9uXG5leHBvcnQgZnVuY3Rpb24gU2F2ZVZhbGlkYXRvcih2YWxpZGF0b3JGdW5jLCBmb3JtRGF0YSkge1xuICAgIGNvbnN0IHsgZXJyb3IsIHJlc3VsdCB9ID0gcGFyc2VGdW5jdGlvblJhd1N0cih2YWxpZGF0b3JGdW5jKTtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3JNc2c6IGVycm9yIH07XG4gICAgfVxuICAgIGNvbnN0IHJldCA9IHJlc3VsdChmb3JtRGF0YSk7XG4gICAgaWYgKHR5cGVvZiByZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB7IGVycm9yTXNnOiByZXQgfTtcbiAgICB9XG59XG5cbmNsYXNzIFZhbGlkYXRvciB7XG4gICAgY29uc3RydWN0b3IoZW50aXRpZXMpIHtcbiAgICAgICAgdGhpcy5lbnRpdGllcyA9IGVudGl0aWVzO1xuICAgICAgICB0aGlzLmlzTmFtZSA9IGVudGl0aWVzLmZpbmQoKGUpID0+IGUuZmllbGQgPT09ICduYW1lJyk7XG4gICAgfVxuXG4gICAgY2hlY2tJc0ZpZWxkSGFzSW5wdXQgPSAoYXR0clZhbHVlKSA9PiB7XG4gICAgICAgIHJldHVybiBhdHRyVmFsdWUgIT09IHVuZGVmaW5lZCAmJiBhdHRyVmFsdWUgIT09ICcnICYmIGF0dHJWYWx1ZSAhPT0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gVmFsaWRhdGUgdGhlIHJlcXVpcmVkIGZpZWxkIGhhcyB2YWx1ZVxuICAgIFJlcXVpcmVkVmFsaWRhdG9yKGZpZWxkLCBsYWJlbCwgZGF0YSkge1xuICAgICAgICBpZiAoIXRoaXMuY2hlY2tJc0ZpZWxkSGFzSW5wdXQoZGF0YSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGVycm9yRmllbGQ6IGZpZWxkLCBlcnJvck1zZzogZ2V0Rm9ybWF0dGVkTWVzc2FnZSg2LCBbbGFiZWxdKSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBWYWxpZGF0ZSB0aGUgc3RyaW5nIGxlbmd0aCBvZiBmaWVsZFxuICAgIFN0cmluZ1ZhbGlkYXRvcihmaWVsZCwgbGFiZWwsIHZhbGlkYXRvciwgZGF0YSkge1xuICAgICAgICBjb25zdCB7IGVycm9yIH0gPSBwYXJzZVN0cmluZ1ZhbGlkYXRvcih2YWxpZGF0b3IubWluTGVuZ3RoLCB2YWxpZGF0b3IubWF4TGVuZ3RoKTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4geyBlcnJvckZpZWxkOiBmaWVsZCwgZXJyb3JNc2c6IGVycm9yIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY2hlY2tJc0ZpZWxkSGFzSW5wdXQoZGF0YSkgJiYgZGF0YS5sZW5ndGggPiB2YWxpZGF0b3IubWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVycm9yRmllbGQ6IGZpZWxkLFxuICAgICAgICAgICAgICAgIGVycm9yTXNnOiB2YWxpZGF0b3IuZXJyb3JNc2dcbiAgICAgICAgICAgICAgICAgICAgPyB2YWxpZGF0b3IuZXJyb3JNc2dcbiAgICAgICAgICAgICAgICAgICAgOiBnZXRGb3JtYXR0ZWRNZXNzYWdlKDE4LCBbbGFiZWwsIHZhbGlkYXRvci5tYXhMZW5ndGhdKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY2hlY2tJc0ZpZWxkSGFzSW5wdXQoZGF0YSkgJiYgZGF0YS5sZW5ndGggPCB2YWxpZGF0b3IubWluTGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVycm9yRmllbGQ6IGZpZWxkLFxuICAgICAgICAgICAgICAgIGVycm9yTXNnOiB2YWxpZGF0b3IuZXJyb3JNc2dcbiAgICAgICAgICAgICAgICAgICAgPyB2YWxpZGF0b3IuZXJyb3JNc2dcbiAgICAgICAgICAgICAgICAgICAgOiBnZXRGb3JtYXR0ZWRNZXNzYWdlKDE3LCBbbGFiZWwsIHZhbGlkYXRvci5taW5MZW5ndGhdKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFZhbGlkYXRlIHRoZSBmaWVsZCBzaG91bGQgbWF0Y2ggdGhlIHByb3ZpZGVkIFJlZ2V4XG4gICAgUmVnZXhWYWxpZGF0b3IoZmllbGQsIGxhYmVsLCB2YWxpZGF0b3IsIGRhdGEpIHtcbiAgICAgICAgY29uc3QgeyBlcnJvciwgcmVzdWx0OiByZWdleCB9ID0gcGFyc2VSZWdleFJhd1N0cih2YWxpZGF0b3IucGF0dGVybik7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3JGaWVsZDogZmllbGQsIGVycm9yTXNnOiBlcnJvciB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNoZWNrSXNGaWVsZEhhc0lucHV0KGRhdGEpICYmICFyZWdleC50ZXN0KGRhdGEpKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVycm9yRmllbGQ6IGZpZWxkLFxuICAgICAgICAgICAgICAgIGVycm9yTXNnOiB2YWxpZGF0b3IuZXJyb3JNc2dcbiAgICAgICAgICAgICAgICAgICAgPyB2YWxpZGF0b3IuZXJyb3JNc2dcbiAgICAgICAgICAgICAgICAgICAgOiBnZXRGb3JtYXR0ZWRNZXNzYWdlKDE1LCBbbGFiZWwsIHZhbGlkYXRvci5wYXR0ZXJuXSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBWYWxpZGF0ZSB0aGUgY3VzdG9tIGNvbXBvbmVudFxuICAgIHN0YXRpYyBDdXN0b21WYWxpZGF0b3IodmFsaWRhdG9yRnVuYywgZmllbGQsIGRhdGEpIHtcbiAgICAgICAgY29uc3QgcmV0ID0gdmFsaWRhdG9yRnVuYyhmaWVsZCwgZGF0YSk7XG4gICAgICAgIGlmICh0eXBlb2YgcmV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3JGaWVsZDogZmllbGQsIGVycm9yTXNnOiByZXQgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gVmFsaWRhdGUgdGhlIGZpZWxkIHNob3VsZCBtYXRjaCBwcmVkZWZpbmVkIFJlZ2V4ZXNcbiAgICBQcmVEZWZpbmVkUmVnZXhWYWxpZGF0b3IoZmllbGQsIGxhYmVsLCB2YWxpZGF0b3IsIGRhdGEsIHBhdHRlcm4sIGlucHV0VmFsdWVUeXBlKSB7XG4gICAgICAgIGNvbnN0IHsgZXJyb3IsIHJlc3VsdDogcmVnZXggfSA9IHBhcnNlUmVnZXhSYXdTdHIocGF0dGVybik7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3JGaWVsZDogZmllbGQsIGVycm9yTXNnOiBlcnJvciB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNoZWNrSXNGaWVsZEhhc0lucHV0KGRhdGEpICYmICFyZWdleC50ZXN0KGRhdGEpKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVycm9yRmllbGQ6IGZpZWxkLFxuICAgICAgICAgICAgICAgIGVycm9yTXNnOiB2YWxpZGF0b3IuZXJyb3JNc2dcbiAgICAgICAgICAgICAgICAgICAgPyB2YWxpZGF0b3IuZXJyb3JNc2dcbiAgICAgICAgICAgICAgICAgICAgOiBnZXRGb3JtYXR0ZWRNZXNzYWdlKDE5LCBbbGFiZWwsIGlucHV0VmFsdWVUeXBlXSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBWYWxpZGF0ZSB0aGUgcmFuZ2Ugb2YgbnVtZXJpYyBmaWVsZFxuICAgIE51bWJlclZhbGlkYXRvcihmaWVsZCwgbGFiZWwsIHZhbGlkYXRvciwgZGF0YSkge1xuICAgICAgICBjb25zdCB7IGVycm9yIH0gPSBwYXJzZU51bWJlclZhbGlkYXRvcih2YWxpZGF0b3IucmFuZ2UpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGVycm9yRmllbGQ6IGZpZWxkLCBlcnJvck1zZzogZXJyb3IgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHZhbCA9IE51bWJlcihkYXRhKTtcbiAgICAgICAgaWYgKE51bWJlci5pc05hTih2YWwpKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVycm9yRmllbGQ6IGZpZWxkLFxuICAgICAgICAgICAgICAgIGVycm9yTXNnOiB2YWxpZGF0b3IuZXJyb3JNc2dcbiAgICAgICAgICAgICAgICAgICAgPyB2YWxpZGF0b3IuZXJyb3JNc2dcbiAgICAgICAgICAgICAgICAgICAgOiBnZXRGb3JtYXR0ZWRNZXNzYWdlKDE2LCBbbGFiZWxdKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgKHRoaXMuY2hlY2tJc0ZpZWxkSGFzSW5wdXQoZGF0YSkgJiYgdmFsID4gdmFsaWRhdG9yLnJhbmdlWzFdKSB8fFxuICAgICAgICAgICAgdmFsIDwgdmFsaWRhdG9yLnJhbmdlWzBdXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBlcnJvckZpZWxkOiBmaWVsZCxcbiAgICAgICAgICAgICAgICBlcnJvck1zZzogdmFsaWRhdG9yLmVycm9yTXNnXG4gICAgICAgICAgICAgICAgICAgID8gdmFsaWRhdG9yLmVycm9yTXNnXG4gICAgICAgICAgICAgICAgICAgIDogZ2V0Rm9ybWF0dGVkTWVzc2FnZSg4LCBbbGFiZWwsIHZhbGlkYXRvci5yYW5nZVswXSwgdmFsaWRhdG9yLnJhbmdlWzFdXSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBkb1ZhbGlkYXRpb24oZGF0YSkge1xuICAgICAgICBpZiAodGhpcy5pc05hbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldFZhbHVlID0gZGF0YS5uYW1lO1xuICAgICAgICAgICAgY29uc3QgbmFtZUZpZWxkTGFiZWwgPSB0aGlzLmlzTmFtZS5sYWJlbDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXRWYWx1ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgdGFyZ2V0VmFsdWUgPT09ICcnIHx8IHRhcmdldFZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBlcnJvckZpZWxkOiAnbmFtZScsIGVycm9yTXNnOiBnZXRGb3JtYXR0ZWRNZXNzYWdlKDAsIFtuYW1lRmllbGRMYWJlbF0pIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoISh0eXBlb2YgdGFyZ2V0VmFsdWUgPT09ICdzdHJpbmcnIHx8IHRhcmdldFZhbHVlIGluc3RhbmNlb2YgU3RyaW5nKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGVycm9yRmllbGQ6ICduYW1lJywgZXJyb3JNc2c6IGdldEZvcm1hdHRlZE1lc3NhZ2UoMSwgW25hbWVGaWVsZExhYmVsXSkgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB0YXJnZXRWYWx1ZS5zdGFydHNXaXRoKCdfJykgfHxcbiAgICAgICAgICAgICAgICB0YXJnZXRWYWx1ZSA9PT0gJy4nIHx8XG4gICAgICAgICAgICAgICAgdGFyZ2V0VmFsdWUgPT09ICcuLicgfHxcbiAgICAgICAgICAgICAgICB0YXJnZXRWYWx1ZS50b0xvd2VyQ2FzZSgpID09PSAnZGVmYXVsdCdcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGVycm9yRmllbGQ6ICduYW1lJywgZXJyb3JNc2c6IGdldEZvcm1hdHRlZE1lc3NhZ2UoMywgW25hbWVGaWVsZExhYmVsXSkgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlZ2V4TWV0YUNoYXJhY3RlcnMgPSBbJyonLCAnXFxcXCcsICdbJywgJ10nLCAnKCcsICcpJywgJz8nLCAnOiddO1xuICAgICAgICAgICAgaWYgKHJlZ2V4TWV0YUNoYXJhY3RlcnMuc29tZSgoZCkgPT4gdGFyZ2V0VmFsdWUuaW5kZXhPZihkKSA+IC0xKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGVycm9yRmllbGQ6ICduYW1lJywgZXJyb3JNc2c6IGdldEZvcm1hdHRlZE1lc3NhZ2UoMywgW25hbWVGaWVsZExhYmVsXSkgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRhcmdldFZhbHVlLmxlbmd0aCA+PSAxMDI0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3JGaWVsZDogJ25hbWUnLCBlcnJvck1zZzogZ2V0Rm9ybWF0dGVkTWVzc2FnZSgyMiwgW25hbWVGaWVsZExhYmVsXSkgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXQ7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBsZXQgajtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5lbnRpdGllcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZW50aXRpZXNbaV0ucmVxdWlyZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByZXQgPSB0aGlzLlJlcXVpcmVkVmFsaWRhdG9yKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzW2ldLmZpZWxkLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzW2ldLmxhYmVsLFxuICAgICAgICAgICAgICAgICAgICBkYXRhW3RoaXMuZW50aXRpZXNbaV0uZmllbGRdXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBpZiAocmV0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGFbdGhpcy5lbnRpdGllc1tpXS5maWVsZF0gPT09ICcnIHx8IGRhdGFbdGhpcy5lbnRpdGllc1tpXS5maWVsZF0gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmVudGl0aWVzW2ldLnZhbGlkYXRvcnMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgdGhpcy5lbnRpdGllc1tpXS52YWxpZGF0b3JzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5lbnRpdGllc1tpXS52YWxpZGF0b3JzW2pdLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gdGhpcy5TdHJpbmdWYWxpZGF0b3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXNbaV0uZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXNbaV0ubGFiZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXNbaV0udmFsaWRhdG9yc1tqXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVt0aGlzLmVudGl0aWVzW2ldLmZpZWxkXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3JlZ2V4JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQgPSB0aGlzLlJlZ2V4VmFsaWRhdG9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzW2ldLmZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzW2ldLmxhYmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzW2ldLnZhbGlkYXRvcnNbal0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbdGhpcy5lbnRpdGllc1tpXS5maWVsZF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IHRoaXMuTnVtYmVyVmFsaWRhdG9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzW2ldLmZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzW2ldLmxhYmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzW2ldLnZhbGlkYXRvcnNbal0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbdGhpcy5lbnRpdGllc1tpXS5maWVsZF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd1cmwnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IHRoaXMuUHJlRGVmaW5lZFJlZ2V4VmFsaWRhdG9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzW2ldLmZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzW2ldLmxhYmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzW2ldLnZhbGlkYXRvcnNbal0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbdGhpcy5lbnRpdGllc1tpXS5maWVsZF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBSRURFRklORURfVkFMSURBVE9SU19ESUNULnVybC5yZWdleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUFJFREVGSU5FRF9WQUxJREFUT1JTX0RJQ1QudXJsLmlucHV0VmFsdWVUeXBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gdGhpcy5QcmVEZWZpbmVkUmVnZXhWYWxpZGF0b3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXNbaV0uZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXNbaV0ubGFiZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXNbaV0udmFsaWRhdG9yc1tqXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVt0aGlzLmVudGl0aWVzW2ldLmZpZWxkXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUFJFREVGSU5FRF9WQUxJREFUT1JTX0RJQ1QuZGF0ZS5yZWdleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUFJFREVGSU5FRF9WQUxJREFUT1JTX0RJQ1QuZGF0ZS5pbnB1dFZhbHVlVHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2VtYWlsJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQgPSB0aGlzLlByZURlZmluZWRSZWdleFZhbGlkYXRvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllc1tpXS5maWVsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllc1tpXS5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllc1tpXS52YWxpZGF0b3JzW2pdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW3RoaXMuZW50aXRpZXNbaV0uZmllbGRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQUkVERUZJTkVEX1ZBTElEQVRPUlNfRElDVC5lbWFpbC5yZWdleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUFJFREVGSU5FRF9WQUxJREFUT1JTX0RJQ1QuZW1haWwuaW5wdXRWYWx1ZVR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdpcHY0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQgPSB0aGlzLlByZURlZmluZWRSZWdleFZhbGlkYXRvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllc1tpXS5maWVsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllc1tpXS5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllc1tpXS52YWxpZGF0b3JzW2pdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW3RoaXMuZW50aXRpZXNbaV0uZmllbGRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQUkVERUZJTkVEX1ZBTElEQVRPUlNfRElDVC5pcHY0LnJlZ2V4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQUkVERUZJTkVEX1ZBTElEQVRPUlNfRElDVC5pcHY0LmlucHV0VmFsdWVUeXBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY3VzdG9tJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQgPSBWYWxpZGF0b3IuQ3VzdG9tVmFsaWRhdG9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzW2ldLnZhbGlkYXRvcnNbal0udmFsaWRhdG9yRnVuYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllc1tpXS5maWVsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVt0aGlzLmVudGl0aWVzW2ldLmZpZWxkXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVmFsaWRhdG9yO1xuIiwiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHVwZGF0ZSBmcm9tICdpbW11dGFiaWxpdHktaGVscGVyJztcbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gJ3V1aWQnO1xuXG5pbXBvcnQgQ29sbGFwc2libGVQYW5lbCBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL0NvbGxhcHNpYmxlUGFuZWwnO1xuaW1wb3J0IE1lc3NhZ2UgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9NZXNzYWdlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuXG5pbXBvcnQgQ29udHJvbFdyYXBwZXIgZnJvbSAnLi9Db250cm9sV3JhcHBlcic7XG5pbXBvcnQgVmFsaWRhdG9yLCB7IFNhdmVWYWxpZGF0b3IgfSBmcm9tICcuLi91dGlsL1ZhbGlkYXRvcic7XG5pbXBvcnQgeyBnZXRVbmlmaWVkQ29uZmlncywgZ2VuZXJhdGVUb2FzdCB9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgeyBNT0RFX0NMT05FLCBNT0RFX0NSRUFURSwgTU9ERV9FRElULCBNT0RFX0NPTkZJRyB9IGZyb20gJy4uL2NvbnN0YW50cy9tb2Rlcyc7XG5pbXBvcnQgeyBQQUdFX0lOUFVULCBQQUdFX0NPTkYgfSBmcm9tICcuLi9jb25zdGFudHMvcGFnZXMnO1xuaW1wb3J0IHsgYXhpb3NDYWxsV3JhcHBlciB9IGZyb20gJy4uL3V0aWwvYXhpb3NDYWxsV3JhcHBlcic7XG5pbXBvcnQgeyBwYXJzZUVycm9yTXNnLCBnZXRGb3JtYXR0ZWRNZXNzYWdlIH0gZnJvbSAnLi4vdXRpbC9tZXNzYWdlVXRpbCc7XG5pbXBvcnQgeyBnZXRCdWlsZERpclBhdGggfSBmcm9tICcuLi91dGlsL3NjcmlwdCc7XG5cbmltcG9ydCB7XG4gICAgRVJST1JfUkVRVUVTVF9USU1FT1VUX1RSWV9BR0FJTixcbiAgICBFUlJPUl9SRVFVRVNUX1RJTUVPVVRfQUNDRVNTX1RPS0VOX1RSWV9BR0FJTixcbiAgICBFUlJPUl9PQ0NVUlJFRF9UUllfQUdBSU4sXG4gICAgRVJST1JfQVVUSF9QUk9DRVNTX1RFUk1JTkFURURfVFJZX0FHQUlOLFxuICAgIEVSUk9SX1NUQVRFX01JU1NJTkdfVFJZX0FHQUlOLFxufSBmcm9tICcuLi9jb25zdGFudHMvb0F1dGhFcnJvck1lc3NhZ2UnO1xuaW1wb3J0IFRhYmxlQ29udGV4dCBmcm9tICcuLi9jb250ZXh0L1RhYmxlQ29udGV4dCc7XG5cbmNvbnN0IENvbGxhcHNpYmxlUGFuZWxXcmFwcGVyID0gc3R5bGVkKENvbGxhcHNpYmxlUGFuZWwpYFxuICAgIHNwYW4ge1xuICAgICAgICBidXR0b24ge1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICAgICAgICBtYXJnaW46IDEwcHggMDtcblxuICAgICAgICAgICAgJjpob3Zlcjpub3QoW2Rpc2FibGVkXSksXG4gICAgICAgICAgICAmOmZvY3VzOm5vdChbZGlzYWJsZWRdKSxcbiAgICAgICAgICAgICY6YWN0aXZlOm5vdChbZGlzYWJsZWRdKSB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICAgICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC5jb2xsYXBzaWJsZS1lbGVtZW50IHtcbiAgICAgICAgcGFkZGluZy10b3A6IDE1cHg7XG4gICAgfVxuYDtcblxuY29uc3QgQ3VzdG9tR3JvdXBMYWJlbCA9IHN0eWxlZC5kaXZgXG4gICAgcGFkZGluZzogNnB4IDEwcHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YyZjRmNTtcbmA7XG5cbmNsYXNzIEJhc2VGb3JtVmlldyBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICAgIHN0YXRpYyBjb250ZXh0VHlwZSA9IFRhYmxlQ29udGV4dDtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgLy8gZmxhZyBmb3IgdG8gcmVuZGVyIGhvb2sgbWV0aG9kIGZvciBvbmNlXG4gICAgICAgIHRoaXMuZmxhZyA9IHRydWU7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7fTtcbiAgICAgICAgdGhpcy5jdXJyZW50SW5wdXQgPSB7fTtcbiAgICAgICAgY29uc3QgZ2xvYmFsQ29uZmlnID0gZ2V0VW5pZmllZENvbmZpZ3MoKTtcbiAgICAgICAgdGhpcy5hcHBOYW1lID0gZ2xvYmFsQ29uZmlnLm1ldGEubmFtZTtcbiAgICAgICAgdGhpcy5lbmRwb2ludCA9XG4gICAgICAgICAgICBwcm9wcy5tb2RlID09PSBNT0RFX0VESVQgfHwgcHJvcHMubW9kZSA9PT0gTU9ERV9DT05GSUdcbiAgICAgICAgICAgICAgICA/IGAke3RoaXMucHJvcHMuc2VydmljZU5hbWV9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMucHJvcHMuc3RhbnphTmFtZSl9YFxuICAgICAgICAgICAgICAgIDogYCR7dGhpcy5wcm9wcy5zZXJ2aWNlTmFtZX1gO1xuXG4gICAgICAgIHRoaXMudXRpbCA9IHtcbiAgICAgICAgICAgIHNldFN0YXRlOiAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uU2F2ZVByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKChwcmV2aW91c1N0YXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2socHJldmlvdXNTdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIHJlc29sdmUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldEVycm9yRmllbGRNc2c6IHRoaXMuc2V0RXJyb3JGaWVsZE1zZyxcbiAgICAgICAgICAgIGNsZWFyQWxsRXJyb3JNc2c6IHRoaXMuY2xlYXJBbGxFcnJvck1zZyxcbiAgICAgICAgICAgIHNldEVycm9yTXNnOiB0aGlzLnNldEVycm9yTXNnLFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMudXRpbENvbnRyb2xXcmFwcGVyID0ge1xuICAgICAgICAgICAgaGFuZGxlQ2hhbmdlOiB0aGlzLmhhbmRsZUNoYW5nZSxcbiAgICAgICAgICAgIGFkZEN1c3RvbVZhbGlkYXRvcjogdGhpcy5hZGRDdXN0b21WYWxpZGF0b3IsXG4gICAgICAgICAgICB1dGlsQ3VzdG9tRnVuY3Rpb25zOiB0aGlzLnV0aWwsXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHByb3BzLnBhZ2UgPT09IFBBR0VfSU5QVVQpIHtcbiAgICAgICAgICAgIGdsb2JhbENvbmZpZy5wYWdlcy5pbnB1dHMuc2VydmljZXMuZm9yRWFjaCgoc2VydmljZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChzZXJ2aWNlLm5hbWUgPT09IHByb3BzLnNlcnZpY2VOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JvdXBzID0gc2VydmljZS5ncm91cHM7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXMgPSBzZXJ2aWNlLmVudGl0eTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVFbnRpdGllc0Zvckdyb3VwKHNlcnZpY2UpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBzZXJ2aWNlLm9wdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXJ2aWNlLmhvb2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaG9va0RlZmVycmVkID0gdGhpcy5sb2FkSG9vayhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlLmhvb2suc3JjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2UuaG9vay50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbENvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcHMubW9kZSA9PT0gTU9ERV9FRElUIHx8IHByb3BzLm1vZGUgPT09IE1PREVfQ0xPTkUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudElucHV0ID0gY29udGV4dC5yb3dEYXRhW3Byb3BzLnNlcnZpY2VOYW1lXVtwcm9wcy5zdGFuemFOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsQ29uZmlnLnBhZ2VzLmNvbmZpZ3VyYXRpb24udGFicy5mb3JFYWNoKCh0YWIpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBmbGFnID0gdGFiLnRhYmxlXG4gICAgICAgICAgICAgICAgICAgID8gdGFiLm5hbWUgPT09IHByb3BzLnNlcnZpY2VOYW1lXG4gICAgICAgICAgICAgICAgICAgIDogdGFiLm5hbWUgPT09IHByb3BzLnN0YW56YU5hbWU7XG4gICAgICAgICAgICAgICAgaWYgKGZsYWcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllcyA9IHRhYi5lbnRpdHk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IHRhYi5vcHRpb25zO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFiLmhvb2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaG9va0RlZmVycmVkID0gdGhpcy5sb2FkSG9vayhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWIuaG9vay5zcmMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFiLmhvb2sudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxDb25maWdcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhYi50YWJsZSAmJiAocHJvcHMubW9kZSA9PT0gTU9ERV9FRElUIHx8IHByb3BzLm1vZGUgPT09IE1PREVfQ0xPTkUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRJbnB1dCA9IGNvbnRleHQucm93RGF0YVtwcm9wcy5zZXJ2aWNlTmFtZV1bcHJvcHMuc3RhbnphTmFtZV07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvcHMubW9kZSA9PT0gTU9ERV9DT05GSUcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudElucHV0ID0gcHJvcHMuY3VycmVudFNlcnZpY2VTdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZV9jb25maWdfdGl0bGUgPSB0YWIudGl0bGU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRJbnB1dCA9IGNvbnRleHQucm93RGF0YVtwcm9wcy5zZXJ2aWNlTmFtZV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlcGVuZGVuY3lNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuaXNPQXV0aCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzQXV0aFZhbCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmF1dGhNYXAgPSB7fTtcbiAgICAgICAgbGV0IHRlbVN0YXRlID0ge307XG4gICAgICAgIGNvbnN0IHRlbUVudGl0aWVzID0gW107XG5cbiAgICAgICAgdGhpcy5lbnRpdGllcy5mb3JFYWNoKChlKSA9PiB7XG4gICAgICAgICAgICBpZiAoZS50eXBlID09PSAnb2F1dGgnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc09BdXRoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAocHJvcHMucGFnZSA9PT0gUEFHRV9DT05GICYmIHByb3BzLnNlcnZpY2VOYW1lID09PSAnYWNjb3VudCcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXV0aFR5cGUgPSBlPy5vcHRpb25zPy5hdXRoX3R5cGU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNvYXV0aFN0YXRlID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBlPy5vcHRpb25zPy5vYXV0aF9zdGF0ZV9lbmFibGVkICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZT8ub3B0aW9ucz8ub2F1dGhfc3RhdGVfZW5hYmxlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoYXV0aFR5cGUubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0F1dGhWYWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGVmaW5pbmcgc3RhdGUgZm9yIGF1dGhfdHlwZSBpbiBjYXNlIG9mIG11bHRpcGxlIEF1dGhlbnRpY2F0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZW1wRW50aXR5ID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LnZhbHVlID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5tb2RlID09PSBNT0RFX0NSRUFURSA/IGF1dGhUeXBlWzBdIDogdGhpcy5jdXJyZW50SW5wdXQuYXV0aF90eXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS5kaXNwbGF5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkuZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbVN0YXRlLmF1dGhfdHlwZSA9IHRlbXBFbnRpdHk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlZmluaW5nIEVudGl0eSBmb3IgYXV0aF90eXBlIGluIGVudGl0eWxpc3Qgb2YgZ2xvYmFsQ29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbnRpdHkgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eS5maWVsZCA9ICdhdXRoX3R5cGUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50aXR5LnR5cGUgPSAnc2luZ2xlU2VsZWN0JztcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eS5sYWJlbCA9ICdBdXRoIFR5cGUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGVudCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXNpYzogJ0Jhc2ljIEF1dGhlbnRpY2F0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYXV0aDogJ09BdXRoIDIuMCBBdXRoZW50aWNhdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50aXR5Lm9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eS5vcHRpb25zLmhpZGVDbGVhckJ0biA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHkub3B0aW9ucy5hdXRvQ29tcGxldGVGaWVsZHMgPSBhdXRoVHlwZS5tYXAoKHR5cGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBsYWJlbDogY29udGVudFt0eXBlXSwgdmFsdWU6IHR5cGUgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtRW50aXRpZXMucHVzaChlbnRpdHkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1NpbmdsZU9hdXRoID0gYXV0aFR5cGUuaW5jbHVkZXMoJ29hdXRoJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBBZGRpbmcgU3RhdGUgYW5kIEVudGl0eShpbiBlbnRpdHlsaXN0KSBmb3IgZXZlcnkgRmllbGRzIG9mIFwib2F1dGhcIiB0eXBlXG4gICAgICAgICAgICAgICAgICAgIC8vIEl0ZXJhdGluZyBvdmVyIGV2ZXJ5dHlwZSBvZiBBdXRoZW50aWNhdGlvbiB1bmRlciBcIm9hdXRoXCIgdHlwZVxuICAgICAgICAgICAgICAgICAgICBhdXRoVHlwZS5mb3JFYWNoKCh0eXBlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdXRoZmllbGRzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWVsZHMgPSBlPy5vcHRpb25zW3R5cGVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvciBQYXJ0aWNhdWxhciB0eXBlIGl0ZXJhdGluZyBvdmVyIGZpZWxkc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkcy5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBldmVyeSBmaWVsZCBmb3IgYXV0aCB0eXBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBFbnRpdHkgPSB7fTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvcHMubW9kZSA9PT0gTU9ERV9DUkVBVEUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkudmFsdWUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBmaWVsZD8uZGVmYXVsdFZhbHVlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGZpZWxkLmRlZmF1bHRWYWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc0VuY3J5cHRlZCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGZpZWxkPy5lbmNyeXB0ZWQgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZmllbGQ/LmVuY3J5cHRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS52YWx1ZSA9IGlzRW5jcnlwdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5jdXJyZW50SW5wdXRbZmllbGQuZmllbGRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkuZGlzcGxheSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdGVtU3RhdGUuYXV0aF90eXBlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdHlwZSA9PT0gdGVtU3RhdGUuYXV0aF90eXBlLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LmVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtU3RhdGVbZmllbGQuZmllbGRdID0gdGVtcEVudGl0eTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLnR5cGUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGZpZWxkPy50eXBlICE9PSAndW5kZWZpbmVkJyA/IGZpZWxkLnR5cGUgOiAndGV4dCc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlZCBzcGVjaWFsIGNhc2UgZm9yIHJlZGlyZWN0X3VybFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQuZmllbGQgPT09ICdyZWRpcmVjdF91cmwnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LnZhbHVlID0gd2luZG93LmxvY2F0aW9uLmhyZWZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3BsaXQoJz8nKVswXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY29uZmlndXJhdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3RoaXMuYXBwTmFtZS50b0xvd2VyQ2FzZSgpfV9yZWRpcmVjdGBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtRW50aXRpZXMucHVzaChmaWVsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhmaWVsZHMucHVzaChmaWVsZC5maWVsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hdXRoTWFwW3R5cGVdID0gYXV0aGZpZWxkcztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdXRoVHlwZS5pbmNsdWRlcygnb2F1dGgnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2F1dGhDb25mRGF0YSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3RvcmluZyBPLUF1dGggQ29uZmlndXJhdGlvbiBkYXRhIHRvIGNsYXNzIHZhcmlhYmxlIHRvIHVzZSBsYXRlclxuICAgICAgICAgICAgICAgICAgICAgICAgb2F1dGhDb25mRGF0YS5wb3B1cFdpZHRoID0gZS5vcHRpb25zLm9hdXRoX3BvcHVwX3dpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBlLm9wdGlvbnMub2F1dGhfcG9wdXBfd2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IDYwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9hdXRoQ29uZkRhdGEucG9wdXBIZWlnaHQgPSBlLm9wdGlvbnMub2F1dGhfcG9wdXBfaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBlLm9wdGlvbnMub2F1dGhfcG9wdXBfaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiA2MDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYXV0aENvbmZEYXRhLmF1dGhUaW1lb3V0ID0gZS5vcHRpb25zLm9hdXRoX3RpbWVvdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGUub3B0aW9ucy5vYXV0aF90aW1lb3V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAxODA7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYXV0aENvbmZEYXRhLmF1dGhDb2RlRW5kcG9pbnQgPSBlLm9wdGlvbnMuYXV0aF9jb2RlX2VuZHBvaW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBlLm9wdGlvbnMuYXV0aF9jb2RlX2VuZHBvaW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2F1dGhDb25mRGF0YS5hY2Nlc3NUb2tlbkVuZHBvaW50ID0gZS5vcHRpb25zLmFjY2Vzc190b2tlbl9lbmRwb2ludFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZS5vcHRpb25zLmFjY2Vzc190b2tlbl9lbmRwb2ludFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vYXV0aENvbmYgPSBvYXV0aENvbmZEYXRhO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wRW50aXR5ID0ge307XG4gICAgICAgICAgICAgICAgZS5lbmNyeXB0ZWQgPSB0eXBlb2YgZS5lbmNyeXB0ZWQgIT09ICd1bmRlZmluZWQnID8gZS5lbmNyeXB0ZWQgOiBmYWxzZTtcblxuICAgICAgICAgICAgICAgIGlmIChwcm9wcy5tb2RlID09PSBNT0RFX0NSRUFURSkge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LnZhbHVlID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBlLmRlZmF1bHRWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcgPyBlLmRlZmF1bHRWYWx1ZSA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkuZGlzcGxheSA9XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgZT8ub3B0aW9ucz8uZGlzcGxheSAhPT0gJ3VuZGVmaW5lZCcgPyBlLm9wdGlvbnMuZGlzcGxheSA6IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkuZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0ZW1TdGF0ZVtlLmZpZWxkXSA9IHRlbXBFbnRpdHk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9wcy5tb2RlID09PSBNT0RFX0VESVQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS52YWx1ZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdGhpcy5jdXJyZW50SW5wdXRbZS5maWVsZF0gIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmN1cnJlbnRJbnB1dFtlLmZpZWxkXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS52YWx1ZSA9IGUuZW5jcnlwdGVkID8gJycgOiB0ZW1wRW50aXR5LnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkuZGlzcGxheSA9XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgZT8ub3B0aW9ucz8uZGlzcGxheSAhPT0gJ3VuZGVmaW5lZCcgPyBlLm9wdGlvbnMuZGlzcGxheSA6IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkuZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS5maWVsZCA9PT0gJ25hbWUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZT8ub3B0aW9ucz8uZGlzYWJsZW9uRWRpdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkuZGlzYWJsZWQgPSBlLm9wdGlvbnMuZGlzYWJsZW9uRWRpdDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0ZW1TdGF0ZVtlLmZpZWxkXSA9IHRlbXBFbnRpdHk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9wcy5tb2RlID09PSBNT0RFX0NMT05FKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkudmFsdWUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgZS5maWVsZCA9PT0gJ25hbWUnIHx8IGUuZW5jcnlwdGVkID8gJycgOiB0aGlzLmN1cnJlbnRJbnB1dFtlLmZpZWxkXTtcbiAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS5kaXNwbGF5ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBlPy5vcHRpb25zPy5kaXNwbGF5ICE9PSAndW5kZWZpbmVkJyA/IGUub3B0aW9ucy5kaXNwbGF5IDogdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS5lcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRlbVN0YXRlW2UuZmllbGRdID0gdGVtcEVudGl0eTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BzLm1vZGUgPT09IE1PREVfQ09ORklHKSB7XG4gICAgICAgICAgICAgICAgICAgIGUuZGVmYXVsdFZhbHVlID0gdHlwZW9mIGUuZGVmYXVsdFZhbHVlICE9PSAndW5kZWZpbmVkJyA/IGUuZGVmYXVsdFZhbHVlIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS52YWx1ZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdGhpcy5jdXJyZW50SW5wdXRbZS5maWVsZF0gIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmN1cnJlbnRJbnB1dFtlLmZpZWxkXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZS5kZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkudmFsdWUgPSBlLmVuY3J5cHRlZCA/ICcnIDogdGVtcEVudGl0eS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS5kaXNwbGF5ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBlPy5vcHRpb25zPy5kaXNwbGF5ICE9PSAndW5kZWZpbmVkJyA/IGUub3B0aW9ucy5kaXNwbGF5IDogdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS5lcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmZpZWxkID09PSAnbmFtZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkuZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBlPy5vcHRpb25zPy5kaXNhYmxlb25FZGl0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS5kaXNhYmxlZCA9IGUub3B0aW9ucy5kaXNhYmxlb25FZGl0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRlbVN0YXRlW2UuZmllbGRdID0gdGVtcEVudGl0eTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbW9kZSA6JywgcHJvcHMubW9kZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gaGFuZGxlIGRlcGVuZGVudCBmaWVsZHNcbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZHMgPSBlLm9wdGlvbnM/LmRlcGVuZGVuY2llcztcbiAgICAgICAgICAgICAgICBpZiAoZmllbGRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkcy5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhbmdlRmllbGRzID0gdGhpcy5kZXBlbmRlbmN5TWFwLmdldChmaWVsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhbmdlRmllbGRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlRmllbGRzW2UuZmllbGRdID0gZmllbGRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlcGVuZGVuY3lNYXAuc2V0KGZpZWxkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtlLmZpZWxkXTogZmllbGRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGVtRW50aXRpZXMucHVzaChlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5lbnRpdGllcyA9IHRlbUVudGl0aWVzO1xuXG4gICAgICAgIC8vIGZsYXR0ZW4gdGhlIGRlcGVuZGVuY3lNYXAgdG8gcmVtb3ZlIHJlZHVuZGFudCBpdGVyYXRpb25zIGZvciByZXNvbHZpbmcgdGhlbVxuICAgICAgICAvLyBvbmUtYnktb25lIGluIGZvbGxvd2luZyBsb29wXG4gICAgICAgIGxldCBmbGF0dGVuZWRNYXAgPSB7fTtcbiAgICAgICAgdGhpcy5kZXBlbmRlbmN5TWFwLmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBmbGF0dGVuZWRNYXAgPSB7IC4uLmZsYXR0ZW5lZE1hcCwgLi4udmFsdWUgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgY2hhbmdlcyA9IHt9O1xuICAgICAgICBPYmplY3Qua2V5cyhmbGF0dGVuZWRNYXApLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZXMgPSBmbGF0dGVuZWRNYXBbZmllbGRdO1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHt9O1xuICAgICAgICAgICAgbGV0IGxvYWQgPSB0cnVlO1xuXG4gICAgICAgICAgICB2YWx1ZXMuZm9yRWFjaCgoZGVwZW5kZW5jeSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVpcmVkID0gISF0aGlzLmVudGl0aWVzLmZpbmQoKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuZmllbGQgPT09IGRlcGVuZGVuY3k7XG4gICAgICAgICAgICAgICAgfSkucmVxdWlyZWQ7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSB0ZW1TdGF0ZVtkZXBlbmRlbmN5XS52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAocmVxdWlyZWQgJiYgIWN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBsb2FkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFbZGVwZW5kZW5jeV0gPSBudWxsO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFbZGVwZW5kZW5jeV0gPSBjdXJyZW50VmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChsb2FkKSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlc1tmaWVsZF0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGRlcGVuZGVuY3lWYWx1ZXM6IHsgJHNldDogZGF0YSB9LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGFwcGx5IGRlcGVuZGVuY3kgZmllbGQgY2hhbmdlcyBpbiBzdGF0ZVxuICAgICAgICB0ZW1TdGF0ZSA9IHVwZGF0ZSh0ZW1TdGF0ZSwgY2hhbmdlcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBkYXRhOiB0ZW1TdGF0ZSxcbiAgICAgICAgICAgIGVycm9yTXNnOiAnJyxcbiAgICAgICAgICAgIHdhcm5pbmdNc2c6ICcnLFxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEhvb2sgb24gY3JlYXRlIG1ldGhvZCBjYWxsXG4gICAgICAgIGlmICh0aGlzLmhvb2tEZWZlcnJlZCkge1xuICAgICAgICAgICAgdGhpcy5ob29rRGVmZXJyZWQudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmhvb2sub25DcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaG9vay5vbkNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZUVudGl0aWVzRm9yR3JvdXAgPSAoc2VydmljZSkgPT4ge1xuICAgICAgICBpZiAodGhpcy5ncm91cHMgJiYgdGhpcy5ncm91cHMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmdyb3Vwcy5mb3JFYWNoKChncm91cCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChncm91cCAmJiBncm91cC5maWVsZHM/Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBncm91cC5maWVsZHMuZm9yRWFjaCgoZmllbGROYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IHNlcnZpY2UuZW50aXR5LmZpbmRJbmRleCgoZSkgPT4gZS5maWVsZCA9PT0gZmllbGROYW1lKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRPYmogPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHNlcnZpY2UuZW50aXR5W2luZGV4XSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRPYmouaXNHcm91cGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllcy5zcGxpY2UoaW5kZXgsIDEsIHVwZGF0ZWRPYmopO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBoYW5kbGVTdWJtaXQgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuY2xlYXJFcnJvck1zZygpO1xuICAgICAgICB0aGlzLnByb3BzLmhhbmRsZUZvcm1TdWJtaXQoLyogaXNTdWJtaXR0aW5nICovIHRydWUsIC8qIGNsb3NlRW50aXR5ICovIGZhbHNlKTtcblxuICAgICAgICB0aGlzLmRhdGFkaWN0ID0ge307XG5cbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5zdGF0ZS5kYXRhKS5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kYXRhZGljdFtmaWVsZF0gPSB0aGlzLnN0YXRlLmRhdGFbZmllbGRdLnZhbHVlO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5ob29rICYmIHR5cGVvZiB0aGlzLmhvb2sub25TYXZlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zdCB2YWxpZGF0aW9uUGFzcyA9IHRoaXMuaG9vay5vblNhdmUodGhpcy5kYXRhZGljdCk7XG4gICAgICAgICAgICBpZiAoIXZhbGlkYXRpb25QYXNzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVGb3JtU3VibWl0KC8qIGlzU3VibWl0dGluZyAqLyBmYWxzZSwgLyogY2xvc2VFbnRpdHkgKi8gZmFsc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBleGVjdXRlVmFsaWRhdGlvblN1Ym1pdCA9ICgpID0+IHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMuc3RhdGUuZGF0YSkuZm9yRWFjaCgoZmllbGQpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFkaWN0W2ZpZWxkXSA9IHRoaXMuc3RhdGUuZGF0YVtmaWVsZF0udmFsdWU7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gdmFsaWRhdGlvbiBmb3IgdW5pcXVlIG5hbWVcbiAgICAgICAgICAgIGlmIChbTU9ERV9DUkVBVEUsIE1PREVfQ0xPTkVdLmluY2x1ZGVzKHRoaXMucHJvcHMubW9kZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpc0V4aXN0aW5nTmFtZSA9IEJvb2xlYW4oXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC52YWx1ZXModGhpcy5jb250ZXh0LnJvd0RhdGEpLmZpbmQoKHZhbCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHZhbCkuZmluZCgobmFtZSkgPT4gbmFtZSA9PT0gdGhpcy5kYXRhZGljdC5uYW1lKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIGlmIChpc0V4aXN0aW5nTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuZW50aXRpZXMuZmluZEluZGV4KChlKSA9PiBlLmZpZWxkID09PSAnbmFtZScpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEVycm9yRmllbGRNc2coXG4gICAgICAgICAgICAgICAgICAgICAgICAnbmFtZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRGb3JtYXR0ZWRNZXNzYWdlKDIsIFt0aGlzLmVudGl0aWVzW2luZGV4XS5sYWJlbCwgdGhpcy5kYXRhZGljdC5uYW1lXSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVGb3JtU3VibWl0KC8qIGlzU3VibWl0dGluZyAqLyBmYWxzZSwgLyogY2xvc2VFbnRpdHkgKi8gZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyB2YWxpZGF0aW9uIGNvbmRpdGlvbiBvZiByZXF1aXJlZCBmaWVsZHMgaW4gTy1BdXRoXG4gICAgICAgICAgICBsZXQgdGVtRW50aXRpZXM7XG4gICAgICAgICAgICBpZiAodGhpcy5pc09BdXRoKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlcUZpZWxkcyA9IFtdO1xuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMuYXV0aE1hcCkuZm9yRWFjaCgodHlwZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBgaXNBdXRoVmFsYCBpcyByZXF1aXJlZCBpbiBhIGNhc2Ugd2hlcmUgb25seSBzaW5nbGUgYXV0aCB0eXBlIGlzIHByb3ZpZGVkXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSB0aGlzLmRhdGFkaWN0LmF1dGhfdHlwZSB8fCAhdGhpcy5pc0F1dGhWYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcUZpZWxkcyA9IFsuLi5yZXFGaWVsZHMsIC4uLnRoaXMuYXV0aE1hcFt0eXBlXV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0ZW1FbnRpdGllcyA9IHRoaXMuZW50aXRpZXMubWFwKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXFGaWVsZHMuaW5jbHVkZXMoZS5maWVsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFsbCBvYXV0aCBmaWVsZHMgYXJlIHJlcXVpcmVkIGV4Y2VwdCBpZiBleHBsaWNpdGVseSBgcmVxdWlyZWRgIGlzIHNldCB0byBgZmFsc2VgXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyByZXF1aXJlZDogdHJ1ZSwgLi4uZSB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0ZW1FbnRpdGllcyA9IHRoaXMuZW50aXRpZXM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFZhbGlkYXRpb24gb2YgZm9ybSBmaWVsZHMgb24gU3VibWl0XG4gICAgICAgICAgICBjb25zdCB2YWxpZGF0b3IgPSBuZXcgVmFsaWRhdG9yKHRlbUVudGl0aWVzKTtcbiAgICAgICAgICAgIGxldCBlcnJvciA9IHZhbGlkYXRvci5kb1ZhbGlkYXRpb24odGhpcy5kYXRhZGljdCk7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEVycm9yRmllbGRNc2coZXJyb3IuZXJyb3JGaWVsZCwgZXJyb3IuZXJyb3JNc2cpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLnNhdmVWYWxpZGF0b3IpIHtcbiAgICAgICAgICAgICAgICBlcnJvciA9IFNhdmVWYWxpZGF0b3IodGhpcy5vcHRpb25zLnNhdmVWYWxpZGF0b3IsIHRoaXMuZGF0YWRpY3QpO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEVycm9yTXNnKGVycm9yLmVycm9yTXNnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGFuZGxlRm9ybVN1Ym1pdCgvKiBpc1N1Ym1pdHRpbmcgKi8gZmFsc2UsIC8qIGNsb3NlRW50aXR5ICovIGZhbHNlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgdGhpcy5pc09BdXRoICYmXG4gICAgICAgICAgICAgICAgKHRoaXMuaXNTaW5nbGVPYXV0aCB8fCAodGhpcy5pc0F1dGhWYWwgJiYgdGhpcy5kYXRhZGljdC5hdXRoX3R5cGUgPT09ICdvYXV0aCcpKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgLy8gaGFuZGxlIG9hdXRoIEF1dGhlbnRpY2F0aW9uXG4gICAgICAgICAgICAgICAgLy8gUG9wdWxhdGUgdGhlIHBhcmFtZXRlciBzdHJpbmcgd2l0aCBjbGllbnRfaWQsIHJlZGlyZWN0X3VybCBhbmQgcmVzcG9uc2VfdHlwZVxuICAgICAgICAgICAgICAgIGxldCBwYXJhbWV0ZXJzID0gYD9yZXNwb25zZV90eXBlPWNvZGUmY2xpZW50X2lkPSR7dGhpcy5kYXRhZGljdC5jbGllbnRfaWR9JnJlZGlyZWN0X3VyaT0ke3RoaXMuZGF0YWRpY3QucmVkaXJlY3RfdXJsfWA7XG4gICAgICAgICAgICAgICAgLy8gR2V0IHRoZSB2YWx1ZSBmb3Igc3RhdGVfZW5hYmxlZFxuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRlRW5hYmxlZCA9IHRoaXMuaXNvYXV0aFN0YXRlICE9IG51bGwgPyB0aGlzLmlzb2F1dGhTdGF0ZSA6IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZUVuYWJsZWQgPT09ICd0cnVlJyB8fCBzdGF0ZUVuYWJsZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZV9lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gR2VuZXJhdGluZyBhIGNyeXB0b2dyYXBoaWNhbGx5IHN0cm9uZyBzdGF0ZSBwYXJhbWV0ZXIsIHdoaWNoIHdpbGwgYmUgdXNlZCBPTkxZIGR1cmluZyBjb25maWd1cmF0aW9uXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub2F1dGhfc3RhdGUgPSB1dWlkdjQoKS5yZXBsYWNlKC8tL2csICcnKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBBcHBlbmRpbmcgdGhlIHN0YXRlIGluIHRoZSBoZWFkZXJzXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMgPSBgJHtwYXJhbWV0ZXJzfSZzdGF0ZT0ke3RoaXMub2F1dGhfc3RhdGV9YDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBob3N0ID0gYGh0dHBzOi8vJHt0aGlzLmRhdGFkaWN0LmVuZHBvaW50fSR7dGhpcy5vYXV0aENvbmYuYXV0aENvZGVFbmRwb2ludH0ke3BhcmFtZXRlcnN9YDtcbiAgICAgICAgICAgICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQ2FsbGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzUmVzcG9uc2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gR2V0IGF1dGhfdHlwZSBlbGVtZW50IGZyb20gZ2xvYmFsIGNvbmZpZyBqc29uXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gT3BlbiBhIHBvcHVwIHRvIG1ha2UgYXV0aCByZXF1ZXN0XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRXaW4gPSB3aW5kb3cub3BlbihcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICBgJHt0aGlzLmFwcE5hbWV9IE9BdXRoYCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGB3aWR0aD0ke3RoaXMub2F1dGhDb25mLnBvcHVwV2lkdGh9LCBoZWlnaHQ9JHt0aGlzLm9hdXRoQ29uZi5wb3B1cEhlaWdodH1gXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIC8vIENhbGxiYWNrIHRvIHJlY2VpdmUgZGF0YSBmcm9tIHJlZGlyZWN0IHVybFxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuZ2V0TWVzc2FnZSA9IChtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQ2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9uIENhbGwgYmFjayB3aXRoIEF1dGggY29kZSB0aGlzIG1ldGhvZCB3aWxsIGJlIGNhbGxlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlT2F1dGhUb2tlbihtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2FpdCB0aWxsIHdlIGdldCBhdXRoX2NvZGUgZnJvbSBjYWxsaW5nIHNpdGUgdGhyb3VnaCByZWRpcmVjdCB1cmwsIHdlIHdpbGwgd2FpdCBmb3IgMyBtaW5zXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdEZvckF1dGhlbnRpY2F0aW9uKHRoaXMub2F1dGhDb25mLmF1dGhUaW1lb3V0KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNDYWxsZWQgJiYgdGhpcy5jaGlsZFdpbi5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCBlcnJvciBtZXNzYWdlIGlmIHRoZSB1c2VyIGhhcyBjbG9zZSB0aGUgYXV0aGVudGljYXRpb24gd2luZG93IHdpdGhvdXQgdGFraW5nIGFueSBhY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RXJyb3JNc2coRVJST1JfQVVUSF9QUk9DRVNTX1RFUk1JTkFURURfVFJZX0FHQUlOKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGFuZGxlRm9ybVN1Ym1pdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBpc1N1Ym1pdHRpbmcgKi8gZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogY2xvc2VFbnRpdHkgKi8gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNDYWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aW1lb3V0IGVycm9yIG1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RXJyb3JNc2coRVJST1JfUkVRVUVTVF9USU1FT1VUX1RSWV9BR0FJTik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmhhbmRsZUZvcm1TdWJtaXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogaXNTdWJtaXR0aW5nICovIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGNsb3NlRW50aXR5ICovIGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUmVzZXQgY2FsbGVkIGZsYWcgYXMgd2UgaGF2ZSB0byB3YWl0IHRpbGwgd2UgZ2V0IHRoZSBhY2Nlc3NfdG9rZW4sIHJlZnJlc2hfdG9rZW4gYW5kIGluc3RhbmNlX3VybFxuICAgICAgICAgICAgICAgICAgICAvLyBXYWl0IHRpbGwgd2UgZ2V0IHRoZSByZXNwb25zZSwgaGVyZSB3ZSBoYXZlIGFkZGVkIHdhaXQgZm9yIDMwIHNlY3NcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0Rm9yQmFja2VuZFJlc3BvbnNlKDMwKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNSZXNwb25zZSAmJiAhdGhpcy5pc0Vycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgZXJyb3IgbWVzc2FnZSB0byBwcmV2ZW50IHNhdmluZy5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNFcnJvciA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aW1lb3V0IGVycm9yIG1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RXJyb3JNc2coRVJST1JfUkVRVUVTVF9USU1FT1VUX0FDQ0VTU19UT0tFTl9UUllfQUdBSU4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVGb3JtU3VibWl0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGlzU3VibWl0dGluZyAqLyBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBjbG9zZUVudGl0eSAqLyBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9KSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlRGF0YSgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVGb3JtU3VibWl0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGlzU3VibWl0dGluZyAqLyBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBjbG9zZUVudGl0eSAqLyBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNhdmVEYXRhKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuaG9vayAmJlxuICAgICAgICAgICAgdHlwZW9mIHRoaXMuaG9vay5vblNhdmUgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICAgIHR5cGVvZiB0aGlzLm9uU2F2ZVByb21pc2UgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5vblNhdmVQcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGV4ZWN1dGVWYWxpZGF0aW9uU3VibWl0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV4ZWN1dGVWYWxpZGF0aW9uU3VibWl0KCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgc2F2ZURhdGEgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGJvZHkgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuZGF0YWRpY3QpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGF0YWRpY3Rba2V5XSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgYm9keS5hcHBlbmQoa2V5LCB0aGlzLmRhdGFkaWN0W2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBjbGVhciBvdXQgZmllbGRzIG9mIG90aGVyIGF1dGhlbnRpY2F0aW9uIG1ldGhvZHMgd2hlbiB1c2luZyBvbmVcbiAgICAgICAgaWYgKHRoaXMuaXNBdXRoVmFsKSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmF1dGhNYXApLmZvckVhY2goKHR5cGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXRhZGljdC5hdXRoX3R5cGUgIT09IHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdXRoTWFwW3R5cGVdLmZvckVhY2goKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkuc2V0KGUsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pc09BdXRoKSB7XG4gICAgICAgICAgICAvLyBQcmV2ZW50IHBhc3NpbmcgcmVkaXJlY3RfdXJsIGZpZWxkIHVzZWQgaW4gT0F1dGggdG8gYmFja2VuZCBjb25mIGZpbGVcbiAgICAgICAgICAgIGJvZHkuZGVsZXRlKCdyZWRpcmVjdF91cmwnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wcm9wcy5tb2RlID09PSBNT0RFX0VESVQpIHtcbiAgICAgICAgICAgIGJvZHkuZGVsZXRlKCduYW1lJyk7XG4gICAgICAgIH1cblxuICAgICAgICBheGlvc0NhbGxXcmFwcGVyKHtcbiAgICAgICAgICAgIHNlcnZpY2VOYW1lOiB0aGlzLmVuZHBvaW50LFxuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIGN1c3RvbUhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnIH0sXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICAgICAgICAgIGhhbmRsZUVycm9yOiBmYWxzZSxcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbCA9IHJlc3BvbnNlPy5kYXRhPy5lbnRyeVswXTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5tb2RlICE9PSBNT0RFX0NPTkZJRykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0bXBPYmogPSB7fTtcblxuICAgICAgICAgICAgICAgICAgICB0bXBPYmpbdmFsLm5hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQURET04tMzg1ODE6IGBkYXRhZGljdGAgcHJvdmlkZXMgZmFsbGJhY2sgdmFsdWVzIGlmIHJoIHNraXBzXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLmRhdGFkaWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgLi4udmFsLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogdmFsLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdmFsLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlTmFtZTogdGhpcy5wcm9wcy5zZXJ2aWNlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuc2V0Um93RGF0YShcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZSh0aGlzLmNvbnRleHQucm93RGF0YSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt0aGlzLnByb3BzLnNlcnZpY2VOYW1lXTogeyAkbWVyZ2U6IHRtcE9iaiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaG9vayAmJiB0eXBlb2YgdGhpcy5ob29rLm9uU2F2ZVN1Y2Nlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ob29rLm9uU2F2ZVN1Y2Nlc3MoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMubW9kZSA9PT0gTU9ERV9FRElUKSB7XG4gICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlVG9hc3QoYFVwZGF0ZWQgXCIke3ZhbC5uYW1lfVwiYCwgJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMubW9kZSA9PT0gTU9ERV9DT05GSUcpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVUb2FzdChcbiAgICAgICAgICAgICAgICAgICAgICAgIGBVcGRhdGVkIFwiJHt0aGlzLm1vZGVfY29uZmlnX3RpdGxlID8gdGhpcy5tb2RlX2NvbmZpZ190aXRsZSA6IHZhbC5uYW1lfVwiYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdzdWNjZXNzJ1xuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlVG9hc3QoYENyZWF0ZWQgXCIke3ZhbC5uYW1lfVwiYCwgJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVGb3JtU3VibWl0KC8qIGlzU3VibWl0dGluZyAqLyBmYWxzZSwgLyogY2xvc2VFbnRpdHkgKi8gdHJ1ZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvclN1Ym1pdE1zZyA9IHBhcnNlRXJyb3JNc2coZXJyKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZXJyb3JNc2c6IGVycm9yU3VibWl0TXNnIH0pO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmhvb2sgJiYgdHlwZW9mIHRoaXMuaG9vay5vblNhdmVGYWlsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaG9vay5vblNhdmVGYWlsKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGFuZGxlRm9ybVN1Ym1pdCgvKiBpc1N1Ym1pdHRpbmcgKi8gZmFsc2UsIC8qIGNsb3NlRW50aXR5ICovIGZhbHNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBoYW5kbGVDaGFuZ2UgPSAoZmllbGQsIHRhcmdldFZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnN0IGNoYW5nZXMgPSB7fTtcbiAgICAgICAgaWYgKGZpZWxkID09PSAnYXV0aF90eXBlJykge1xuICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5hdXRoTWFwKS5mb3JFYWNoKCh0eXBlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IHRhcmdldFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXV0aE1hcFt0eXBlXS5mb3JFYWNoKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzW2VdID0geyBkaXNwbGF5OiB7ICRzZXQ6IHRydWUgfSB9O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmF1dGhNYXBbdHlwZV0uZm9yRWFjaCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlc1tlXSA9IHsgZGlzcGxheTogeyAkc2V0OiBmYWxzZSB9IH07XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZGVwZW5kZW5jeU1hcC5oYXMoZmllbGQpKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZGVwZW5kZW5jeU1hcC5nZXQoZmllbGQpO1xuICAgICAgICAgICAgT2JqZWN0LmtleXModmFsdWUpLmZvckVhY2goKGxvYWRGaWVsZCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7fTtcbiAgICAgICAgICAgICAgICBsZXQgbG9hZCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICB2YWx1ZVtsb2FkRmllbGRdLmZvckVhY2goKGRlcGVuZGVuY3kpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVxdWlyZWQgPSAhIXRoaXMuZW50aXRpZXMuZmluZCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuZmllbGQgPT09IGRlcGVuZGVuY3k7XG4gICAgICAgICAgICAgICAgICAgIH0pLnJlcXVpcmVkO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmN5ID09PSBmaWVsZCA/IHRhcmdldFZhbHVlIDogdGhpcy5zdGF0ZS5kYXRhW2RlcGVuZGVuY3ldLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWlyZWQgJiYgIWN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVtkZXBlbmRlbmN5XSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2RlcGVuZGVuY3ldID0gY3VycmVudFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAobG9hZCkge1xuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzW2xvYWRGaWVsZF0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmN5VmFsdWVzOiB7ICRzZXQ6IGRhdGEgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7ICRzZXQ6IG51bGwgfSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjaGFuZ2VzW2ZpZWxkXSA9IHsgdmFsdWU6IHsgJHNldDogdGFyZ2V0VmFsdWUgfSB9O1xuXG4gICAgICAgIGNvbnN0IG5ld0ZpZWxkcyA9IHVwZGF0ZSh0aGlzLnN0YXRlLCB7IGRhdGE6IGNoYW5nZXMgfSk7XG4gICAgICAgIGNvbnN0IHRlbXBTdGF0ZSA9IHRoaXMuY2xlYXJBbGxFcnJvck1zZyhuZXdGaWVsZHMpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHRlbXBTdGF0ZSk7XG5cbiAgICAgICAgaWYgKHRoaXMuaG9va0RlZmVycmVkKSB7XG4gICAgICAgICAgICB0aGlzLmhvb2tEZWZlcnJlZC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuaG9vay5vbkNoYW5nZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhvb2sub25DaGFuZ2UoZmllbGQsIHRhcmdldFZhbHVlLCB0ZW1wU3RhdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGFkZEN1c3RvbVZhbGlkYXRvciA9IChmaWVsZCwgdmFsaWRhdG9yRnVuYykgPT4ge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuZW50aXRpZXMuZmluZEluZGV4KCh4KSA9PiB4LmZpZWxkID09PSBmaWVsZCk7XG4gICAgICAgIGNvbnN0IHZhbGlkYXRvciA9IFt7IHR5cGU6ICdjdXN0b20nLCB2YWxpZGF0b3JGdW5jIH1dO1xuICAgICAgICB0aGlzLmVudGl0aWVzW2luZGV4XS52YWxpZGF0b3JzID0gdmFsaWRhdG9yO1xuICAgIH07XG5cbiAgICAvLyBTZXQgZXJyb3IgbWVzc2FnZSB0byBkaXNwbGF5IGFuZCBzZXQgZXJyb3IgaW4gcGVydGljdWxhciBmaWVsZFxuICAgIHNldEVycm9yRmllbGRNc2cgPSAoZmllbGQsIG1zZykgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKChwcmV2aW91c1N0YXRlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXdGaWVsZHMgPSB1cGRhdGUocHJldmlvdXNTdGF0ZSwge1xuICAgICAgICAgICAgICAgIGRhdGE6IHsgW2ZpZWxkXTogeyBlcnJvcjogeyAkc2V0OiB0cnVlIH0gfSB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBuZXdGaWVsZHMuZXJyb3JNc2cgPSBtc2c7XG4gICAgICAgICAgICByZXR1cm4gbmV3RmllbGRzO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gU2V0IGVycm9yIGluIHBlcnRpY3VsYXIgZmllbGRcbiAgICBzZXRFcnJvckZpZWxkID0gKGZpZWxkKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoKHByZXZpb3VzU3RhdGUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB1cGRhdGUocHJldmlvdXNTdGF0ZSwgeyBkYXRhOiB7IFtmaWVsZF06IHsgZXJyb3I6IHsgJHNldDogdHJ1ZSB9IH0gfSB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIENsZWFyIGVycm9yIG1lc3NhZ2VcbiAgICBjbGVhckVycm9yTXNnID0gKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5lcnJvck1zZykge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSgocHJldmlvdXNTdGF0ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IC4uLnByZXZpb3VzU3RhdGUsIGVycm9yTXNnOiAnJyB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gU2V0IGVycm9yIG1lc3NhZ2VcbiAgICBzZXRFcnJvck1zZyA9IChtc2cpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSgocHJldmlvdXNTdGF0ZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHsgLi4ucHJldmlvdXNTdGF0ZSwgZXJyb3JNc2c6IG1zZyB9O1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gQ2xlYXIgZXJyb3Ivd2FybmluZyBtZXNzYWdlIGFuZCBlcnJvcnMgZnJvbSBmaWVsZHNcbiAgICBjbGVhckFsbEVycm9yTXNnID0gKFN0YXRlKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld0ZpZWxkcyA9IFN0YXRlID8geyAuLi5TdGF0ZSB9IDogeyAuLi50aGlzLnN0YXRlIH07XG4gICAgICAgIG5ld0ZpZWxkcy5lcnJvck1zZyA9ICcnO1xuICAgICAgICBuZXdGaWVsZHMud2FybmluZ01zZyA9ICcnO1xuICAgICAgICBjb25zdCBuZXdEYXRhID0gU3RhdGUgPyB7IC4uLlN0YXRlLmRhdGEgfSA6IHsgLi4udGhpcy5zdGF0ZS5kYXRhIH07XG4gICAgICAgIGNvbnN0IHRlbURhdGEgPSB7fTtcbiAgICAgICAgT2JqZWN0LmtleXMobmV3RGF0YSkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBpZiAobmV3RGF0YVtrZXldLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGVtRGF0YVtrZXldID0geyAuLi5uZXdEYXRhW2tleV0sIGVycm9yOiBmYWxzZSB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0ZW1EYXRhW2tleV0gPSBuZXdEYXRhW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBuZXdGaWVsZHMuZGF0YSA9IHRlbURhdGE7XG4gICAgICAgIHJldHVybiBTdGF0ZSA/IG5ld0ZpZWxkcyA6IG51bGw7XG4gICAgfTtcblxuICAgIC8vIERpc3BsYXkgZXJyb3IgbWVzc2FnZVxuICAgIGdlbmVyYXRlRXJyb3JNZXNzYWdlID0gKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5lcnJvck1zZykge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8TWVzc2FnZSBhcHBlYXJhbmNlPVwiZmlsbFwiIHR5cGU9XCJlcnJvclwiPlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5lcnJvck1zZ31cbiAgICAgICAgICAgICAgICA8L01lc3NhZ2U+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG5cbiAgICBnZW5lcmF0ZVdhcm5pbmdNZXNzYWdlID0gKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS53YXJuaW5nTXNnKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxNZXNzYWdlIGFwcGVhcmFuY2U9XCJmaWxsXCIgdHlwZT1cIndhcm5pbmdcIj5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMuc3RhdGUud2FybmluZ01zZ31cbiAgICAgICAgICAgICAgICA8L01lc3NhZ2U+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG5cbiAgICAvLyBnZW5lcmF0ZXN1Ym1pdE1lc3NhZ2VcbiAgICBsb2FkSG9vayA9IChtb2R1bGUsIHR5cGUsIGdsb2JhbENvbmZpZykgPT4ge1xuICAgICAgICBjb25zdCBteVByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdleHRlcm5hbCcpIHtcbiAgICAgICAgICAgICAgICBpbXBvcnQoLyogd2VicGFja0lnbm9yZTogdHJ1ZSAqLyBgJHtnZXRCdWlsZERpclBhdGgoKX0vY3VzdG9tLyR7bW9kdWxlfS5qc2ApLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgIChleHRlcm5hbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgSG9vayA9IGV4dGVybmFsLmRlZmF1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhvb2sgPSBuZXcgSG9vayhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxDb25maWcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5zZXJ2aWNlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMubW9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnV0aWxcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKEhvb2spO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX19ub25fd2VicGFja19yZXF1aXJlX18oXG4gICAgICAgICAgICAgICAgICAgIFtgYXBwLyR7dGhpcy5hcHBOYW1lfS9qcy9idWlsZC9jdXN0b20vJHttb2R1bGV9YF0sXG4gICAgICAgICAgICAgICAgICAgIChIb29rKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhvb2sgPSBuZXcgSG9vayhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxDb25maWcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5zZXJ2aWNlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMubW9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnV0aWxcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKEhvb2spO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBteVByb21pc2U7XG4gICAgfTtcblxuICAgIC8qXG4gICAgICogRnVuY3Rpb24gdG8gZ2V0IGFjY2VzcyB0b2tlbiwgcmVmcmVzaCB0b2tlbiBhbmQgaW5zdGFuY2UgdXJsXG4gICAgICogdXNpbmcgcmVzdCBjYWxsIG9uY2Ugb2F1dGggY29kZSByZWNlaXZlZCBmcm9tIGNoaWxkIHdpbmRvd1xuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICAgIGhhbmRsZU9hdXRoVG9rZW4gPSAobWVzc2FnZSkgPT4ge1xuICAgICAgICAvLyBDaGVjayBtZXNzYWdlIGZvciBlcnJvci4gSWYgZXJyb3Igc2hvdyBlcnJvciBtZXNzYWdlLlxuICAgICAgICBpZiAoIW1lc3NhZ2UgfHwgKG1lc3NhZ2UgJiYgbWVzc2FnZS5lcnJvcikgfHwgbWVzc2FnZS5jb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RXJyb3JNc2coRVJST1JfT0NDVVJSRURfVFJZX0FHQUlOKTtcbiAgICAgICAgICAgIHRoaXMuaXNFcnJvciA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmlzUmVzcG9uc2UgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0YXRlUmVzcG9uc2UgPSBtZXNzYWdlLnN0YXRlO1xuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlX2VuYWJsZWQgPT09IHRydWUgJiYgdGhpcy5vYXV0aF9zdGF0ZSAhPT0gc3RhdGVSZXNwb25zZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRFcnJvck1zZyhFUlJPUl9TVEFURV9NSVNTSU5HX1RSWV9BR0FJTik7XG4gICAgICAgICAgICB0aGlzLmlzRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5pc1Jlc3BvbnNlID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvZGUgPSBkZWNvZGVVUklDb21wb25lbnQobWVzc2FnZS5jb2RlKTtcbiAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgdXJsOiBgaHR0cHM6Ly8ke3RoaXMuZGF0YWRpY3QuZW5kcG9pbnR9JHt0aGlzLm9hdXRoQ29uZi5hY2Nlc3NUb2tlbkVuZHBvaW50fWAsXG4gICAgICAgICAgICBncmFudF90eXBlOiAnYXV0aG9yaXphdGlvbl9jb2RlJyxcbiAgICAgICAgICAgIGNsaWVudF9pZDogdGhpcy5kYXRhZGljdC5jbGllbnRfaWQsXG4gICAgICAgICAgICBjbGllbnRfc2VjcmV0OiB0aGlzLmRhdGFkaWN0LmNsaWVudF9zZWNyZXQsXG4gICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgcmVkaXJlY3RfdXJpOiB0aGlzLmRhdGFkaWN0LnJlZGlyZWN0X3VybCxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBib2R5ID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgICAgICBPYmplY3Qua2V5cyhkYXRhKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgIGJvZHkuYXBwZW5kKGtleSwgZGF0YVtrZXldKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgT0F1dGhFbmRwb2ludCA9IGAke3RoaXMuYXBwTmFtZX1fb2F1dGgvb2F1dGhgO1xuICAgICAgICAvLyBJbnRlcm5hbCBoYW5kbGVyIGNhbGwgdG8gZ2V0IHRoZSBhY2Nlc3MgdG9rZW4gYW5kIG90aGVyIHZhbHVlc1xuICAgICAgICBheGlvc0NhbGxXcmFwcGVyKHtcbiAgICAgICAgICAgIGVuZHBvaW50VXJsOiBPQXV0aEVuZHBvaW50LFxuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIGN1c3RvbUhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnIH0sXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICAgICAgICAgIGhhbmRsZUVycm9yOiBmYWxzZSxcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVudHJ5WzBdLmNvbnRlbnQuZXJyb3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IHJlc3BvbnNlLmRhdGEuZW50cnlbMF0uY29udGVudC5hY2Nlc3NfdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlVXJsID0gcmVzcG9uc2UuZGF0YS5lbnRyeVswXS5jb250ZW50Lmluc3RhbmNlX3VybDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVmcmVzaFRva2VuID0gcmVzcG9uc2UuZGF0YS5lbnRyeVswXS5jb250ZW50LnJlZnJlc2hfdG9rZW47XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhZGljdC5pbnN0YW5jZV91cmwgPSBpbnN0YW5jZVVybDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhZGljdC5yZWZyZXNoX3Rva2VuID0gcmVmcmVzaFRva2VuO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFkaWN0LmFjY2Vzc190b2tlbiA9IGFjY2Vzc1Rva2VuO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzUmVzcG9uc2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRFcnJvck1zZyhyZXNwb25zZS5kYXRhLmVudHJ5WzBdLmNvbnRlbnQuZXJyb3IpO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5pc1Jlc3BvbnNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEVycm9yTXNnKEVSUk9SX09DQ1VSUkVEX1RSWV9BR0FJTik7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmlzUmVzcG9uc2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBGdW5jdGlvbiB0byB3YWl0IGZvciBhdXRoZW50aWNhdGlvbiBjYWxsIGJhY2sgaW4gY2hpbGQgd2luZG93LlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICAgIHdhaXRGb3JBdXRoZW50aWNhdGlvbiA9IGFzeW5jIChjb3VudCkgPT4ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgY291bnQgLT0gMTtcbiAgICAgICAgLy8gQ2hlY2sgaWYgY2FsbGJhY2sgZnVuY3Rpb24gY2FsbGVkIGlmIGNhbGxlZCB0aGVuIGV4aXQgZnJvbSB3YWl0XG4gICAgICAgIGlmICh0aGlzLmlzQ2FsbGVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiBjYWxsYmFjayBmdW5jdGlvbiBpcyBub3QgY2FsbGVkIGFuZCBjb3VudCBpcyBub3QgcmVhY2hlZCB0byAxODAgdGhlbiByZXR1cm4gZXJyb3IgZm9yIHRpbWVvdXRcbiAgICAgICAgaWYgKGNvdW50ID09PSAwIHx8IHRoaXMuY2hpbGRXaW4uY2xvc2VkKSB7XG4gICAgICAgICAgICB0aGlzLmlzRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIGVsc2UgY2FsbCBzbGVlcCBhbmQgcmVjYWxsIHRoZSBzYW1lIGZ1bmN0aW9uXG4gICAgICAgIGF3YWl0IHRoaXMuc2xlZXAodGhpcy53YWl0Rm9yQXV0aGVudGljYXRpb24sIGNvdW50KTtcbiAgICB9O1xuXG4gICAgLy8gRnVuY3Rpb24gdG8gd2FpdCBmb3IgYmFja2VuZCBjYWxsIGdldCByZXNwb25zZSBmcm9tIGJhY2tlbmRcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICAgIHdhaXRGb3JCYWNrZW5kUmVzcG9uc2UgPSBhc3luYyAoY291bnQpID0+IHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIGNvdW50ICs9IDE7XG4gICAgICAgIC8vIENoZWNrIGlmIGNhbGxiYWNrIGZ1bmN0aW9uIGNhbGxlZCBpZiBjYWxsZWQgdGhlbiBleGl0IGZyb20gd2FpdFxuICAgICAgICBpZiAodGhpcy5pc1Jlc3BvbnNlID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiBjYWxsYmFjayBmdW5jdGlvbiBpcyBub3QgY2FsbGVkIGFuZCBjb3VudCBpcyBub3QgcmVhY2hlZCB0byA2MCB0aGVuIHJldHVybiBlcnJvciBmb3IgdGltZW91dFxuICAgICAgICBpZiAoY291bnQgPT09IDYwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZWxzZSBjYWxsIHNsZWVwIGFuZCByZWNhbGwgdGhlIHNhbWUgZnVuY3Rpb25cbiAgICAgICAgYXdhaXQgdGhpcy5zbGVlcCh0aGlzLndhaXRGb3JCYWNrZW5kUmVzcG9uc2UsIGNvdW50KTtcbiAgICB9O1xuXG4gICAgLypcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGZpcnN0IGFkZCBzbGVlcCBmb3IgMSBzZWNzIGFuZCB0aGUgY2FsbCB0aGUgZnVuY3Rpb24gcGFzc2VkIGluIGFyZ3VtZW50XG4gICAgICovXG4gICAgc2xlZXAgPSBhc3luYyAoZm4sIC4uLmFyZ3MpID0+IHtcbiAgICAgICAgYXdhaXQgdGhpcy50aW1lb3V0KDEwMDApO1xuICAgICAgICByZXR1cm4gZm4oLi4uYXJncyk7XG4gICAgfTtcblxuICAgIC8qXG4gICAgICogVGhpcyBmdW5jdGlvbiB3aWxsIHJlc29sdmUgdGhlIHByb21pc2Ugb25jZSB0aGUgcHJvdmlkZWQgdGltZW91dCBvY2N1cnNcbiAgICAgKi9cbiAgICB0aW1lb3V0ID0gKG1zKSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xuICAgIH07XG5cbiAgICByZW5kZXJHcm91cEVsZW1lbnRzID0gKCkgPT4ge1xuICAgICAgICBsZXQgZWwgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5ncm91cHMgJiYgdGhpcy5ncm91cHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBlbCA9IHRoaXMuZ3JvdXBzLm1hcCgoZ3JvdXApID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2xscHNpYmxlRWxlbWVudCA9XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLmZpZWxkcz8ubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLmZpZWxkcy5tYXAoKGZpZWxkTmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW50aXRpZXMubWFwKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUuZmllbGQgPT09IGZpZWxkTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZW1TdGF0ZSA9IHRoaXMuc3RhdGUuZGF0YVtlLmZpZWxkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDb250cm9sV3JhcHBlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17ZS5maWVsZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsaXR5RnVuY3RzPXt0aGlzLnV0aWxDb250cm9sV3JhcHBlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGVtU3RhdGUudmFsdWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheT17dGVtU3RhdGUuZGlzcGxheX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcj17dGVtU3RhdGUuZXJyb3J9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50aXR5PXtlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VOYW1lPXt0aGlzLnByb3BzLnNlcnZpY2VOYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU9e3RoaXMucHJvcHMubW9kZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17dGVtU3RhdGUuZGlzYWJsZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2Rvd25NZXNzYWdlPXt0ZW1TdGF0ZS5tYXJrZG93bk1lc3NhZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVwZW5kZW5jeVZhbHVlcz17dGVtU3RhdGUuZGVwZW5kZW5jeVZhbHVlcyB8fCBudWxsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZ3JvdXAub3B0aW9ucy5pc0V4cGFuZGFibGUgPyAoXG4gICAgICAgICAgICAgICAgICAgIDxDb2xsYXBzaWJsZVBhbmVsV3JhcHBlciB0aXRsZT17Z3JvdXAubGFiZWx9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xsYXBzaWJsZS1lbGVtZW50XCI+e2NvbGxwc2libGVFbGVtZW50fTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L0NvbGxhcHNpYmxlUGFuZWxXcmFwcGVyPlxuICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Q3VzdG9tR3JvdXBMYWJlbD57Z3JvdXAubGFiZWx9PC9DdXN0b21Hcm91cExhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj57Y29sbHBzaWJsZUVsZW1lbnR9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWw7XG4gICAgfTtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgLy8gb25SZW5kZXIgbWV0aG9kIG9mIEhvb2tcbiAgICAgICAgaWYgKHRoaXMuZmxhZykge1xuICAgICAgICAgICAgaWYgKHRoaXMuaG9va0RlZmVycmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ob29rRGVmZXJyZWQudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5ob29rLm9uUmVuZGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaG9vay5vblJlbmRlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMubW9kZSA9PT0gTU9ERV9FRElUKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaG9va0RlZmVycmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaG9va0RlZmVycmVkLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmhvb2sub25FZGl0TG9hZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaG9vay5vbkVkaXRMb2FkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZmxhZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxmb3JtIHN0eWxlPXt0aGlzLnByb3BzLm1vZGUgPT09IE1PREVfQ09ORklHID8geyBtYXJnaW5Ub3A6ICcyNXB4JyB9IDoge319PlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5nZW5lcmF0ZVdhcm5pbmdNZXNzYWdlKCl9XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLmdlbmVyYXRlRXJyb3JNZXNzYWdlKCl9XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlckdyb3VwRWxlbWVudHMoKX1cbiAgICAgICAgICAgICAgICAgICAge3RoaXMuZW50aXRpZXMubWFwKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXR1cm4gbnVsbCBpZiB3ZSBuZWVkIHRvIHNob3cgZWxlbWVudCBpbiBhIGdyb3VwXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5pc0dyb3VwaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZW1TdGF0ZSA9IHRoaXMuc3RhdGUuZGF0YVtlLmZpZWxkXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlbVN0YXRlLnBsYWNlaG9sZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogeyAuLi5lLm9wdGlvbnMsIHBsYWNlaG9sZGVyOiB0ZW1TdGF0ZS5wbGFjZWhvbGRlciB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPENvbnRyb2xXcmFwcGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17ZS5maWVsZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbGl0eUZ1bmN0cz17dGhpcy51dGlsQ29udHJvbFdyYXBwZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0ZW1TdGF0ZS52YWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheT17dGVtU3RhdGUuZGlzcGxheX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I9e3RlbVN0YXRlLmVycm9yfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHk9e2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VOYW1lPXt0aGlzLnByb3BzLnNlcnZpY2VOYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlPXt0aGlzLnByb3BzLm1vZGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXt0ZW1TdGF0ZS5kaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2Rvd25NZXNzYWdlPXt0ZW1TdGF0ZS5tYXJrZG93bk1lc3NhZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcGVuZGVuY3lWYWx1ZXM9e3RlbVN0YXRlLmRlcGVuZGVuY3lWYWx1ZXMgfHwgbnVsbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5CYXNlRm9ybVZpZXcucHJvcFR5cGVzID0ge1xuICAgIHBhZ2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgc2VydmljZU5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgc3RhbnphTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjdXJyZW50U2VydmljZVN0YXRlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIG1vZGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgaGFuZGxlRm9ybVN1Ym1pdDogUHJvcFR5cGVzLmZ1bmMsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBCYXNlRm9ybVZpZXc7XG4iLCJleHBvcnQgY29uc3QgRVJST1JfUkVRVUVTVF9USU1FT1VUX1RSWV9BR0FJTiA9ICdSZXF1ZXN0IHRpbWUgb3V0IHdoaWxlIGF1dGhlbnRpY2F0aW5nLiBQbGVhc2UgdHJ5IGFnYWluLic7XG5leHBvcnQgY29uc3QgRVJST1JfUkVRVUVTVF9USU1FT1VUX0FDQ0VTU19UT0tFTl9UUllfQUdBSU4gPSAnUmVxdWVzdCB0aW1lIG91dCB3aGlsZSBnZXR0aW5nIGFjY2Vzc3Rva2VuLiBQbGVhc2UgdHJ5IGFnYWluLic7XG5leHBvcnQgY29uc3QgRVJST1JfT0NDVVJSRURfVFJZX0FHQUlOID0gXCJFcnJvciBvY2N1cnJlZCB3aGlsZSB0cnlpbmcgdG8gYXV0aGVudGljYXRlLiBQbGVhc2UgdHJ5IEFnYWluLlwiO1xuZXhwb3J0IGNvbnN0IEVSUk9SX0FVVEhfUFJPQ0VTU19URVJNSU5BVEVEX1RSWV9BR0FJTiA9IFwiQXV0aGVudGljYXRpb24gcHJvY2VzcyBpbnRlcnJ1cHRlZC4gUGxlYXNlIHRyeSBhZ2Fpbi5cIjtcbmV4cG9ydCBjb25zdCBFUlJPUl9TVEFURV9NSVNTSU5HX1RSWV9BR0FJTiA9IFwiUmVzcG9uc2Ugbm90IHJlY2VpdmVkIGZyb20gdGhlIGV4cGVjdGVkIHNlbmRlci4gUGxlYXNlIHRyeSBhZ2Fpbi5cIjsiLCJleHBvcnQgY29uc3QgU1RZTEVfUEFHRSA9ICdwYWdlJztcbmV4cG9ydCBjb25zdCBTVFlMRV9NT0RBTCA9ICdtb2RhbCc7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IF8gfSBmcm9tICdAc3BsdW5rL3VpLXV0aWxzL2kxOG4nO1xuXG5pbXBvcnQgeyBnZXRVbmlmaWVkQ29uZmlncyB9IGZyb20gJy4uLy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgeyBnZXRCdWlsZERpclBhdGggfSBmcm9tICcuLi8uLi91dGlsL3NjcmlwdCc7XG5cbmNsYXNzIEN1c3RvbVRhYmxlQ29udHJvbCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zaG91bGRSZW5kZXIgPSB0cnVlO1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBjb25zdCBnbG9iYWxDb25maWcgPSBnZXRVbmlmaWVkQ29uZmlncygpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgbG9hZGluZzogdHJ1ZSB9KTtcbiAgICAgICAgdGhpcy5sb2FkQ3VzdG9tQ29udHJvbCgpLnRoZW4oKENvbnRyb2wpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY3VzdG9tQ29udHJvbCA9IG5ldyBDb250cm9sKFxuICAgICAgICAgICAgICAgIGdsb2JhbENvbmZpZyxcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnNlcnZpY2VOYW1lLFxuICAgICAgICAgICAgICAgIHRoaXMuZWwsXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5yb3csXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5maWVsZFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBsb2FkaW5nOiBmYWxzZSB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnJvdyAhPT0gbmV4dFByb3BzLnJvdykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFuZXh0U3RhdGUubG9hZGluZyAmJiB0aGlzLnNob3VsZFJlbmRlcikge1xuICAgICAgICAgICAgdGhpcy5zaG91bGRSZW5kZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBsb2FkQ3VzdG9tQ29udHJvbCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy50eXBlID09PSAnZXh0ZXJuYWwnKSB7XG4gICAgICAgICAgICAgICAgaW1wb3J0KFxuICAgICAgICAgICAgICAgICAgICAvKiB3ZWJwYWNrSWdub3JlOiB0cnVlICovIGAke2dldEJ1aWxkRGlyUGF0aCgpfS9jdXN0b20vJHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuZmlsZU5hbWVcbiAgICAgICAgICAgICAgICAgICAgfS5qc2BcbiAgICAgICAgICAgICAgICApLnRoZW4oKGV4dGVybmFsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IENvbnRyb2wgPSBleHRlcm5hbC5kZWZhdWx0O1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKENvbnRyb2wpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBnbG9iYWxDb25maWcgPSBnZXRVbmlmaWVkQ29uZmlncygpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFwcE5hbWUgPSBnbG9iYWxDb25maWcubWV0YS5uYW1lO1xuICAgICAgICAgICAgICAgIF9fbm9uX3dlYnBhY2tfcmVxdWlyZV9fKFxuICAgICAgICAgICAgICAgICAgICBbYGFwcC8ke2FwcE5hbWV9L2pzL2J1aWxkL2N1c3RvbS8ke3RoaXMucHJvcHMuZmlsZU5hbWV9YF0sXG4gICAgICAgICAgICAgICAgICAgIChDb250cm9sKSA9PiByZXNvbHZlKENvbnRyb2wpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmxvYWRpbmcpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXN0b21Db250cm9sLnJlbmRlcih0aGlzLnByb3BzLnJvdywgdGhpcy5wcm9wcy5maWVsZCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5sb2FkaW5nICYmIF8oJ0xvYWRpbmcuLi4nKX1cbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIC8vIG5vc2VtZ3JlcDogdHlwZXNjcmlwdC5yZWFjdC5zZWN1cml0eS5hdWRpdC5yZWFjdC1uby1yZWZzLnJlYWN0LW5vLXJlZnNcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZj17KGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbCA9IGVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IHZpc2liaWxpdHk6IHRoaXMuc3RhdGUubG9hZGluZyA/ICdoaWRkZW4nIDogJ3Zpc2libGUnIH19XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC8+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5DdXN0b21UYWJsZUNvbnRyb2wucHJvcFR5cGVzID0ge1xuICAgIHNlcnZpY2VOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgcm93OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgZmllbGQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZmlsZU5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ3VzdG9tVGFibGVDb250cm9sO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBETCBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL0RlZmluaXRpb25MaXN0JztcbmltcG9ydCBUYWJsZSBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL1RhYmxlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgXyB9IGZyb20gJ0BzcGx1bmsvdWktdXRpbHMvaTE4bic7XG5cbmltcG9ydCBDdXN0b21UYWJsZUNvbnRyb2wgZnJvbSAnLi9DdXN0b21UYWJsZUNvbnRyb2wnO1xuaW1wb3J0IHsgZ2V0VW5pZmllZENvbmZpZ3MgfSBmcm9tICcuLi8uLi91dGlsL3V0aWwnO1xuXG5jb25zdCBUYWJsZUNlbGxXcmFwcGVyID0gc3R5bGVkKFRhYmxlLkNlbGwpYFxuICAgIGJvcmRlci10b3A6IG5vbmU7XG5gO1xuXG5mdW5jdGlvbiBnZXRFeHBhbnNpb25Sb3dEYXRhKHJvdywgbW9yZUluZm8pIHtcbiAgICBjb25zdCBEZWZpbml0aW9uTGlzdHMgPSBbXTtcblxuICAgIGlmIChtb3JlSW5mbz8ubGVuZ3RoKSB7XG4gICAgICAgIG1vcmVJbmZvLmZvckVhY2goKHZhbCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBfKHZhbC5sYWJlbCk7XG4gICAgICAgICAgICAvLyByZW1vdmUgZXh0cmEgcm93cyB3aGljaCBhcmUgZW1wdHkgaW4gbW9yZUluZm9cbiAgICAgICAgICAgIGlmICh2YWwuZmllbGQgaW4gcm93ICYmIHJvd1t2YWwuZmllbGRdICE9PSAnJykge1xuICAgICAgICAgICAgICAgIERlZmluaXRpb25MaXN0cy5wdXNoKDxETC5UZXJtIGtleT17dmFsLmZpZWxkfT57bGFiZWx9PC9ETC5UZXJtPik7XG4gICAgICAgICAgICAgICAgRGVmaW5pdGlvbkxpc3RzLnB1c2goXG4gICAgICAgICAgICAgICAgICAgIDxETC5EZXNjcmlwdGlvbiBrZXk9e2Ake3ZhbC5maWVsZH1fZGVjcmB9PlxuICAgICAgICAgICAgICAgICAgICAgICAge3ZhbC5tYXBwaW5nICYmIHZhbC5tYXBwaW5nW3Jvd1t2YWwuZmllbGRdXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdmFsLm1hcHBpbmdbcm93W3ZhbC5maWVsZF1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBTdHJpbmcocm93W3ZhbC5maWVsZF0pfVxuICAgICAgICAgICAgICAgICAgICA8L0RMLkRlc2NyaXB0aW9uPlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gRGVmaW5pdGlvbkxpc3RzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXhwYW5zaW9uUm93KGNvbFNwYW4sIHJvdywgbW9yZUluZm8pIHtcbiAgICBjb25zdCB7IGN1c3RvbVJvdyB9ID0gZ2V0VW5pZmllZENvbmZpZ3MoKS5wYWdlcy5pbnB1dHMudGFibGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8VGFibGUuUm93IGtleT17YCR7cm93LmlkfS1leHBhbnNpb25gfT5cbiAgICAgICAgICAgIDxUYWJsZUNlbGxXcmFwcGVyIGNvbFNwYW49e2NvbFNwYW59PlxuICAgICAgICAgICAgICAgIHtjdXN0b21Sb3cgJiYgY3VzdG9tUm93LnNyYyA/IChcbiAgICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtSZWFjdC5jcmVhdGVFbGVtZW50KEN1c3RvbVRhYmxlQ29udHJvbCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VOYW1lOiByb3cuc2VydmljZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBjdXN0b21Sb3cuc3JjLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgIDxETCB0ZXJtV2lkdGg9ezI1MH0+e2dldEV4cGFuc2lvblJvd0RhdGEocm93LCBtb3JlSW5mbyl9PC9ETD5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9UYWJsZUNlbGxXcmFwcGVyPlxuICAgICAgICA8L1RhYmxlLlJvdz5cbiAgICApO1xufVxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IFdhaXRTcGlubmVyIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvV2FpdFNwaW5uZXInO1xuaW1wb3J0IFN3aXRjaCBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL1N3aXRjaCc7XG5pbXBvcnQgVGFibGUgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9UYWJsZSc7XG5pbXBvcnQgQnV0dG9uR3JvdXAgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9CdXR0b25Hcm91cCc7XG5pbXBvcnQgVG9vbHRpcCBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL1Rvb2x0aXAnO1xuaW1wb3J0IFBlbmNpbCBmcm9tICdAc3BsdW5rL3JlYWN0LWljb25zL1BlbmNpbCc7XG5pbXBvcnQgQ2xvbmUgZnJvbSAnQHNwbHVuay9yZWFjdC1pY29ucy9DbG9uZSc7XG5pbXBvcnQgVHJhc2ggZnJvbSAnQHNwbHVuay9yZWFjdC1pY29ucy9UcmFzaCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCB7IF8gfSBmcm9tICdAc3BsdW5rL3VpLXV0aWxzL2kxOG4nO1xuXG5pbXBvcnQgQ3VzdG9tVGFibGVDb250cm9sIGZyb20gJy4vQ3VzdG9tVGFibGVDb250cm9sJztcbmltcG9ydCB7IEFjdGlvbkJ1dHRvbkNvbXBvbmVudCB9IGZyb20gJy4vQ3VzdG9tVGFibGVTdHlsZSc7XG5cbmNvbnN0IFRhYmxlQ2VsbFdyYXBwZXIgPSBzdHlsZWQoVGFibGUuQ2VsbClgXG4gICAgcGFkZGluZzogMnB4O1xuYDtcblxuY29uc3QgU3dpdGNoV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcblxuICAgIC50b2dnbGVfc3dpdGNoIHtcbiAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgIH1cbmA7XG5cbmZ1bmN0aW9uIEN1c3RvbVRhYmxlUm93KHByb3BzKSB7XG4gICAgY29uc3Qge1xuICAgICAgICByb3csXG4gICAgICAgIGNvbHVtbnMsXG4gICAgICAgIGhlYWRlck1hcHBpbmcsXG4gICAgICAgIGhhbmRsZVRvZ2dsZUFjdGlvbkNsaWNrLFxuICAgICAgICBoYW5kbGVFZGl0QWN0aW9uQ2xpY2ssXG4gICAgICAgIGhhbmRsZUNsb25lQWN0aW9uQ2xpY2ssXG4gICAgICAgIGhhbmRsZURlbGV0ZUFjdGlvbkNsaWNrLFxuICAgIH0gPSBwcm9wcztcblxuICAgIGNvbnN0IGdldEN1c3RvbUNlbGwgPSAoY3VzdG9tUm93LCBoZWFkZXIpID0+IHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ3VzdG9tVGFibGVDb250cm9sLCB7XG4gICAgICAgICAgICBzZXJ2aWNlTmFtZTogcm93LnNlcnZpY2VOYW1lLFxuICAgICAgICAgICAgZmllbGQ6IGhlYWRlci5maWVsZCxcbiAgICAgICAgICAgIHJvdzogY3VzdG9tUm93LFxuICAgICAgICAgICAgZmlsZU5hbWU6IGhlYWRlci5jdXN0b21DZWxsLnNyYyxcbiAgICAgICAgICAgIHR5cGU6IGhlYWRlci5jdXN0b21DZWxsLnR5cGUsXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCByb3dBY3Rpb25zUHJpbWFyeUJ1dHRvbiA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAoc2VsZWN0ZWRSb3cpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPFRhYmxlQ2VsbFdyYXBwZXIgZGF0YS1jb2x1bW49XCJhY3Rpb25zXCIga2V5PXtzZWxlY3RlZFJvdy5pZH0+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b25Hcm91cD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUb29sdGlwIGNvbnRlbnQ9e18oJ0VkaXQnKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFjdGlvbkJ1dHRvbkNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlYXJhbmNlPVwiZmxhdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb249ezxQZW5jaWwgc2NyZWVuUmVhZGVyVGV4dD17bnVsbH0gc2l6ZT17MX0gLz59XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZUVkaXRBY3Rpb25DbGljayhzZWxlY3RlZFJvdyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImVkaXRCdG5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1Rvb2x0aXA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VG9vbHRpcCBjb250ZW50PXtfKCdDbG9uZScpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWN0aW9uQnV0dG9uQ29tcG9uZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVhcmFuY2U9XCJmbGF0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj17PENsb25lIHNjcmVlblJlYWRlclRleHQ9e251bGx9IHNpemU9ezF9IC8+fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVDbG9uZUFjdGlvbkNsaWNrKHNlbGVjdGVkUm93KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2xvbmVCdG5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1Rvb2x0aXA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VG9vbHRpcCBjb250ZW50PXtfKCdEZWxldGUnKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFjdGlvbkJ1dHRvbkNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlYXJhbmNlPVwiZGVzdHJ1Y3RpdmVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uPXs8VHJhc2ggc2NyZWVuUmVhZGVyVGV4dD17bnVsbH0gc2l6ZT17MX0gLz59XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZURlbGV0ZUFjdGlvbkNsaWNrKHNlbGVjdGVkUm93KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZGVsZXRlQnRuXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbkdyb3VwPlxuICAgICAgICAgICAgICAgIDwvVGFibGVDZWxsV3JhcHBlcj5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIFtoYW5kbGVFZGl0QWN0aW9uQ2xpY2ssIGhhbmRsZUNsb25lQWN0aW9uQ2xpY2ssIGhhbmRsZURlbGV0ZUFjdGlvbkNsaWNrXVxuICAgICk7XG5cbiAgICBsZXQgc3RhdHVzQ29udGVudCA9ICdFbmFibGVkJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZXJzY29yZS1kYW5nbGVcbiAgICBpZiAocm93Ll9fdG9nZ2xlU2hvd1NwaW5uZXIpIHtcbiAgICAgICAgc3RhdHVzQ29udGVudCA9IDxXYWl0U3Bpbm5lciAvPjtcbiAgICB9IGVsc2UgaWYgKHJvdy5kaXNhYmxlZCkge1xuICAgICAgICBzdGF0dXNDb250ZW50ID1cbiAgICAgICAgICAgIGhlYWRlck1hcHBpbmc/LmRpc2FibGVkICYmIGhlYWRlck1hcHBpbmcuZGlzYWJsZWRbcm93LmRpc2FibGVkXVxuICAgICAgICAgICAgICAgID8gaGVhZGVyTWFwcGluZy5kaXNhYmxlZFtyb3cuZGlzYWJsZWRdXG4gICAgICAgICAgICAgICAgOiAnRGlzYWJsZWQnO1xuICAgIH1cblxuICAgIC8vIEZpeCBzZXQgb2YgcHJvcHMgYXJlIHBhc3NlZCB0byBUYWJsZS5Sb3cgZWxlbWVudFxuICAgIHJldHVybiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgICA8VGFibGUuUm93IC8vIG5vc2VtZ3JlcDogdHlwZXNjcmlwdC5yZWFjdC5zZWN1cml0eS5hdWRpdC5yZWFjdC1wcm9wcy1pbmplY3Rpb24ucmVhY3QtcHJvcHMtaW5qZWN0aW9uLCB0eXBlc2NyaXB0LnJlYWN0LmJlc3QtcHJhY3RpY2UucmVhY3QtcHJvcHMtc3ByZWFkaW5nLnJlYWN0LXByb3BzLXNwcmVhZGluZ1xuICAgICAgICAgICAgICAgIGtleT17cm93LmlkfVxuICAgICAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7Y29sdW1ucyAmJlxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5zLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5zLm1hcCgoaGVhZGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2VsbEhUTUwgPSAnJztcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhlYWRlci5jdXN0b21DZWxsICYmIGhlYWRlci5jdXN0b21DZWxsLnNyYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxIVE1MID0gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGFibGUuQ2VsbCBkYXRhLWNvbHVtbj17aGVhZGVyLmZpZWxkfSBrZXk9e2hlYWRlci5maWVsZH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Z2V0Q3VzdG9tQ2VsbChyb3csIGhlYWRlcil9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvVGFibGUuQ2VsbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChoZWFkZXIuZmllbGQgPT09ICdkaXNhYmxlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsSFRNTCA9IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRhYmxlLkNlbGwgZGF0YS1jb2x1bW49e2hlYWRlci5maWVsZH0ga2V5PXtoZWFkZXIuZmllbGR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN3aXRjaFdyYXBwZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN3aXRjaFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e3Jvdy5uYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17cm93LmRpc2FibGVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVUb2dnbGVBY3Rpb25DbGljayhyb3cpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZD17IXJvdy5kaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtyb3cuX190b2dnbGVTaG93U3Bpbm5lcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZWFyYW5jZT1cInRvZ2dsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRvZ2dsZV9zd2l0Y2hcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZExhYmVsPXtfKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyTWFwcGluZz8uZGlzYWJsZWQ/LmZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBoZWFkZXJNYXBwaW5nLmRpc2FibGVkLmZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnRW5hYmxlZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5zZWxlY3RlZExhYmVsPXtfKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyTWFwcGluZz8uZGlzYWJsZWQ/LnRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGhlYWRlck1hcHBpbmcuZGlzYWJsZWQudHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ0Rpc2FibGVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS10ZXN0PVwic3RhdHVzXCI+e3N0YXR1c0NvbnRlbnR9PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Td2l0Y2hXcmFwcGVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1RhYmxlLkNlbGw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaGVhZGVyLmZpZWxkID09PSAnYWN0aW9ucycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsSFRNTCA9IHJvd0FjdGlvbnNQcmltYXJ5QnV0dG9uKHJvdyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxIVE1MID0gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGFibGUuQ2VsbCBkYXRhLWNvbHVtbj17aGVhZGVyLmZpZWxkfSBrZXk9e2hlYWRlci5maWVsZH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aGVhZGVyTWFwcGluZ1toZWFkZXIuZmllbGRdICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyTWFwcGluZ1toZWFkZXIuZmllbGRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd1toZWFkZXIuZmllbGRdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBoZWFkZXJNYXBwaW5nW2hlYWRlci5maWVsZF1bcm93W2hlYWRlci5maWVsZF1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiByb3dbaGVhZGVyLmZpZWxkXX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UYWJsZS5DZWxsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2VsbEhUTUw7XG4gICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPC9UYWJsZS5Sb3c+XG4gICAgICAgIDwvPlxuICAgICk7XG59XG5cbkN1c3RvbVRhYmxlUm93LnByb3BUeXBlcyA9IHtcbiAgICByb3c6IFByb3BUeXBlcy5hbnksXG4gICAgY29sdW1uczogUHJvcFR5cGVzLmFycmF5LFxuICAgIGhlYWRlck1hcHBpbmc6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgaGFuZGxlVG9nZ2xlQWN0aW9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhbmRsZUVkaXRBY3Rpb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGFuZGxlQ2xvbmVBY3Rpb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGFuZGxlRGVsZXRlQWN0aW9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUmVhY3QubWVtbyhDdXN0b21UYWJsZVJvdyk7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBCdXR0b24gZnJvbSAnQHNwbHVuay9yZWFjdC11aS9CdXR0b24nO1xuaW1wb3J0IE1vZGFsIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvTW9kYWwnO1xuaW1wb3J0IE1lc3NhZ2UgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9NZXNzYWdlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IFdhaXRTcGlubmVyIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvV2FpdFNwaW5uZXInO1xuaW1wb3J0IHVwZGF0ZSBmcm9tICdpbW11dGFiaWxpdHktaGVscGVyJztcbmltcG9ydCB7IF8gfSBmcm9tICdAc3BsdW5rL3VpLXV0aWxzL2kxOG4nO1xuaW1wb3J0IHsgZ2VuZXJhdGVUb2FzdCB9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5cbmltcG9ydCB7IGF4aW9zQ2FsbFdyYXBwZXIgfSBmcm9tICcuLi91dGlsL2F4aW9zQ2FsbFdyYXBwZXInO1xuaW1wb3J0IFRhYmxlQ29udGV4dCBmcm9tICcuLi9jb250ZXh0L1RhYmxlQ29udGV4dCc7XG5pbXBvcnQgeyBwYXJzZUVycm9yTXNnLCBnZXRGb3JtYXR0ZWRNZXNzYWdlIH0gZnJvbSAnLi4vdXRpbC9tZXNzYWdlVXRpbCc7XG5pbXBvcnQgeyBQQUdFX0lOUFVUIH0gZnJvbSAnLi4vY29uc3RhbnRzL3BhZ2VzJztcblxuY29uc3QgTW9kYWxXcmFwcGVyID0gc3R5bGVkKE1vZGFsKWBcbiAgICB3aWR0aDogODAwcHg7XG5gO1xuXG5jbGFzcyBEZWxldGVNb2RhbCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgc3RhdGljIGNvbnRleHRUeXBlID0gVGFibGVDb250ZXh0O1xuXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0geyBpc0RlbGV0aW5nOiBmYWxzZSwgRXJyb3JNc2c6ICcnIH07XG4gICAgfVxuXG4gICAgaGFuZGxlUmVxdWVzdENsb3NlID0gKCkgPT4ge1xuICAgICAgICAvLyBzZXQgRXJyb3JNc2cgdG8gZW1wdHkgc3RyaW5nIG9uIGNsb3NlIG9yIGNhbmNlbFxuICAgICAgICAvLyBzbyB0aGF0IG9uIGFnYWluIG9wZW4gb2YgbW9kYWwgaXQgZG9lcyBub3Qgc2hvdyB0aGUgc2FtZSBFcnJvck1zZ1xuICAgICAgICB0aGlzLnN0YXRlLkVycm9yTXNnID0gJyc7XG4gICAgICAgIHRoaXMucHJvcHMuaGFuZGxlUmVxdWVzdENsb3NlKCk7XG4gICAgfTtcblxuICAgIGhhbmRsZURlbGV0ZSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShcbiAgICAgICAgICAgIChwcmV2U3RhdGUpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyAuLi5wcmV2U3RhdGUsIGlzRGVsZXRpbmc6IHRydWUsIEVycm9yTXNnOiAnJyB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICBheGlvc0NhbGxXcmFwcGVyKHtcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZU5hbWU6IGAke3RoaXMucHJvcHMuc2VydmljZU5hbWV9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5zdGFuemFOYW1lXG4gICAgICAgICAgICAgICAgICAgICl9YCxcbiAgICAgICAgICAgICAgICAgICAgY3VzdG9tSGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcgfSxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnZGVsZXRlJyxcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlRXJyb3I6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJvclN1Ym1pdE1zZyA9IHBhcnNlRXJyb3JNc2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBFcnJvck1zZzogZXJyb3JTdWJtaXRNc2csIGlzRGVsZXRpbmc6IGZhbHNlIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5zZXRSb3dEYXRhKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZSh0aGlzLmNvbnRleHQucm93RGF0YSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbdGhpcy5wcm9wcy5zZXJ2aWNlTmFtZV06IHsgJHVuc2V0OiBbdGhpcy5wcm9wcy5zdGFuemFOYW1lXSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzRGVsZXRpbmc6IGZhbHNlIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVSZXF1ZXN0Q2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlVG9hc3QoYERlbGV0ZWQgXCIke3RoaXMucHJvcHMuc3RhbnphTmFtZX1cImAsICdzdWNjZXNzJyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH07XG5cbiAgICAvLyBEaXNwbGF5IGVycm9yIG1lc3NhZ2VcbiAgICBnZW5lcmF0ZUVycm9yTWVzc2FnZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuRXJyb3JNc2cpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgPE1lc3NhZ2UgYXBwZWFyYW5jZT1cImZpbGxcIiB0eXBlPVwiZXJyb3JcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLkVycm9yTXNnfVxuICAgICAgICAgICAgICAgICAgICA8L01lc3NhZ2U+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGxldCBkZWxldGVNc2c7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnBhZ2UgPT09IFBBR0VfSU5QVVQpIHtcbiAgICAgICAgICAgIGRlbGV0ZU1zZyA9IGdldEZvcm1hdHRlZE1lc3NhZ2UoMTAzLCBbdGhpcy5wcm9wcy5zdGFuemFOYW1lXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWxldGVNc2cgPSBnZXRGb3JtYXR0ZWRNZXNzYWdlKDEwMiwgW3RoaXMucHJvcHMuc3RhbnphTmFtZV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8TW9kYWxXcmFwcGVyIG9wZW49e3RoaXMucHJvcHMub3Blbn0+XG4gICAgICAgICAgICAgICAgPE1vZGFsLkhlYWRlclxuICAgICAgICAgICAgICAgICAgICB0aXRsZT17Z2V0Rm9ybWF0dGVkTWVzc2FnZSgxMDEpfVxuICAgICAgICAgICAgICAgICAgICBvblJlcXVlc3RDbG9zZT17dGhpcy5oYW5kbGVSZXF1ZXN0Q2xvc2V9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8TW9kYWwuQm9keSBjbGFzc05hbWU9XCJkZWxldGVQcm9tcHRcIj5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMuZ2VuZXJhdGVFcnJvck1lc3NhZ2UoKX1cbiAgICAgICAgICAgICAgICAgICAgPHA+e2RlbGV0ZU1zZ308L3A+XG4gICAgICAgICAgICAgICAgPC9Nb2RhbC5Cb2R5PlxuICAgICAgICAgICAgICAgIDxNb2RhbC5Gb290ZXI+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVhcmFuY2U9XCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVSZXF1ZXN0Q2xvc2V9XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17XygnQ2FuY2VsJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17dGhpcy5zdGF0ZS5pc0RlbGV0aW5nfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlYXJhbmNlPVwicHJpbWFyeVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17dGhpcy5zdGF0ZS5pc0RlbGV0aW5nID8gPFdhaXRTcGlubmVyIC8+IDogXygnRGVsZXRlJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZURlbGV0ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXt0aGlzLnN0YXRlLmlzRGVsZXRpbmd9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgICAgICAgICA8L01vZGFsV3JhcHBlcj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbkRlbGV0ZU1vZGFsLnByb3BUeXBlcyA9IHtcbiAgICBwYWdlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgaGFuZGxlUmVxdWVzdENsb3NlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZXJ2aWNlTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzdGFuemFOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgRGVsZXRlTW9kYWw7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgbWVtbywgdXNlU3RhdGUsIHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgVGFibGUgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9UYWJsZSc7XG5pbXBvcnQgeyBfIH0gZnJvbSAnQHNwbHVuay91aS11dGlscy9pMThuJztcblxuaW1wb3J0IHVzZVF1ZXJ5IGZyb20gJy4uLy4uL2hvb2tzL3VzZVF1ZXJ5JztcbmltcG9ydCB7IE1PREVfQ0xPTkUsIE1PREVfRURJVCB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy9tb2Rlcyc7XG5pbXBvcnQgeyBQQUdFX0lOUFVUIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL3BhZ2VzJztcbmltcG9ydCB7IGdldFVuaWZpZWRDb25maWdzIH0gZnJvbSAnLi4vLi4vdXRpbC91dGlsJztcbmltcG9ydCB7IGdldEV4cGFuc2lvblJvdyB9IGZyb20gJy4vVGFibGVFeHBhbnNpb25Sb3cnO1xuaW1wb3J0IHsgU1RZTEVfTU9EQUwsIFNUWUxFX1BBR0UgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvZGlhbG9nU3R5bGVzJztcbmltcG9ydCBDdXN0b21UYWJsZVJvdyBmcm9tICcuL0N1c3RvbVRhYmxlUm93JztcbmltcG9ydCBFbnRpdHlNb2RhbCBmcm9tICcuLi9FbnRpdHlNb2RhbCc7XG5pbXBvcnQgRGVsZXRlTW9kYWwgZnJvbSAnLi4vRGVsZXRlTW9kYWwnO1xuaW1wb3J0IFRhYmxlQ29udGV4dCBmcm9tICcuLi8uLi9jb250ZXh0L1RhYmxlQ29udGV4dCc7XG5pbXBvcnQgeyBOb1JlY29yZHNEaXYgfSBmcm9tICcuL0N1c3RvbVRhYmxlU3R5bGUnO1xuXG5mdW5jdGlvbiBDdXN0b21UYWJsZSh7XG4gICAgcGFnZSxcbiAgICBzZXJ2aWNlTmFtZSxcbiAgICBkYXRhLFxuICAgIGhhbmRsZVRvZ2dsZUFjdGlvbkNsaWNrLFxuICAgIGhhbmRsZU9wZW5QYWdlU3R5bGVEaWFsb2csXG4gICAgaGFuZGxlU29ydCxcbiAgICBzb3J0RGlyLFxuICAgIHNvcnRLZXksXG59KSB7XG4gICAgY29uc3QgdW5pZmllZENvbmZpZ3MgPSBnZXRVbmlmaWVkQ29uZmlncygpO1xuICAgIGNvbnN0IFtlbnRpdHlNb2RhbCwgc2V0RW50aXR5TW9kYWxdID0gdXNlU3RhdGUoeyBvcGVuOiBmYWxzZSB9KTtcbiAgICBjb25zdCBbZGVsZXRlTW9kYWwsIHNldERlbGV0ZU1vZGFsXSA9IHVzZVN0YXRlKHsgb3BlbjogZmFsc2UgfSk7XG5cbiAgICBjb25zdCB7IHJvd0RhdGEgfSA9IHVzZUNvbnRleHQoVGFibGVDb250ZXh0KTtcblxuICAgIGNvbnN0IHRhYmxlQ29uZmlnID1cbiAgICAgICAgcGFnZSA9PT0gUEFHRV9JTlBVVFxuICAgICAgICAgICAgPyB1bmlmaWVkQ29uZmlncy5wYWdlcy5pbnB1dHMudGFibGVcbiAgICAgICAgICAgIDogdW5pZmllZENvbmZpZ3MucGFnZXMuY29uZmlndXJhdGlvbi50YWJzLmZpbHRlcigoeCkgPT4geC5uYW1lID09PSBzZXJ2aWNlTmFtZSlbMF1cbiAgICAgICAgICAgICAgICAgIC50YWJsZTtcbiAgICBjb25zdCB7IG1vcmVJbmZvLCBoZWFkZXIgfSA9IHRhYmxlQ29uZmlnO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB0YWJsZUNvbmZpZy5oZWFkZXI7XG5cbiAgICBjb25zdCBoZWFkZXJNYXBwaW5nID0ge307XG4gICAgaGVhZGVyLmZvckVhY2goKHgpID0+IHtcbiAgICAgICAgaGVhZGVyTWFwcGluZ1t4LmZpZWxkXSA9IHgubWFwcGluZztcbiAgICB9KTtcblxuICAgIGNvbnN0IHNlcnZpY2VUb1N0eWxlTWFwID0ge307XG4gICAgaWYgKHBhZ2UgPT09IFBBR0VfSU5QVVQpIHtcbiAgICAgICAgdW5pZmllZENvbmZpZ3MucGFnZXMuaW5wdXRzLnNlcnZpY2VzLmZvckVhY2goKHgpID0+IHtcbiAgICAgICAgICAgIHNlcnZpY2VUb1N0eWxlTWFwW3gubmFtZV0gPSB4LnN0eWxlID09PSBTVFlMRV9QQUdFID8gU1RZTEVfUEFHRSA6IFNUWUxFX01PREFMO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBxdWVyeSA9IHVzZVF1ZXJ5KCk7XG5cbiAgICAvLyBSdW4gb25seSBvbmNlIHdoZW4gY29tcG9uZW50IGlzIG1vdW50ZWQgdG8gbG9hZCBjb21wb25lbnQgYmFzZWQgb24gaW5pdGlhbCBxdWVyeSBwYXJhbXNcbiAgICAvLyBhbmQgd2hlbiBxdWVyeSBwYXJhbXMgYXJlIHVwZGF0ZWRcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAvLyBPbmx5IHJ1biB3aGVuIHRhYiBtYXRjaGVzIHNlcnZpY2VOYW1lIG9yIGlmIGluIGlucHV0IHBhZ2Ugd2hlcmUgc2VydmljZU5hbWUgaXMgdW5kZWZpbmVkXG4gICAgICAgIGlmIChxdWVyeSAmJiAocXVlcnkuZ2V0KCd0YWInKSA9PT0gc2VydmljZU5hbWUgfHwgdHlwZW9mIHNlcnZpY2VOYW1lID09PSAndW5kZWZpbmVkJykpIHtcbiAgICAgICAgICAgIC8vIE9wZW4gbW9kYWwgd2hlbiByZWNvcmQgaXMgYXZhaWxhYmxlIGluIHF1ZXJ5IHBhcmFtcyBhbmQgbW9kYWwgaXMgbm90IG9wZW5cbiAgICAgICAgICAgIGlmIChxdWVyeS5nZXQoJ3JlY29yZCcpICYmICFlbnRpdHlNb2RhbC5vcGVuKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VydmljZUtleSA9IE9iamVjdC5rZXlzKHJvd0RhdGEpLmZpbmQoXG4gICAgICAgICAgICAgICAgICAgICh4KSA9PiB0eXBlb2Ygcm93RGF0YVt4XVtxdWVyeS5nZXQoJ3JlY29yZCcpXSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmIChzZXJ2aWNlS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvdyA9IHJvd0RhdGFbc2VydmljZUtleV1bcXVlcnkuZ2V0KCdyZWNvcmQnKV07XG4gICAgICAgICAgICAgICAgICAgIHNldEVudGl0eU1vZGFsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmVudGl0eU1vZGFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VOYW1lOiByb3cuc2VydmljZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFuemFOYW1lOiByb3cubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU6IE1PREVfRURJVCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICghcXVlcnkuZ2V0KCdyZWNvcmQnKSAmJiBlbnRpdHlNb2RhbC5vcGVuKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2xvc2UgbW9kYWwgaWYgcmVjb3JkIHF1ZXJ5IHBhcmFtIGlzIG5vdCBhdmFpbGFibGUgYW5kIG1vZGFsIGlzIG9wZW5cbiAgICAgICAgICAgICAgICAvLyBOT1RFOiBUaGlzIHNob3VsZCBvbmx5IGJlIGV4ZWN1dGVkIGluIGNhc2Ugb2YgTU9ERV9FRElUIHdoaWNoIGlzIGhhbmRsZWQgYnlcbiAgICAgICAgICAgICAgICAvLyB1c2VFZmZlY3QgZGVwZW5kZW5jeSB3aGljaCB3aWxsIG9ubHkgYmUgY2hhbmdlZCBpbiBjYXNlIG9mIGVkaXRpbmcgZW50aXR5XG4gICAgICAgICAgICAgICAgc2V0RW50aXR5TW9kYWwoeyAuLi5lbnRpdHlNb2RhbCwgb3BlbjogZmFsc2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgIH0sIFtdKTtcblxuICAgIGNvbnN0IGhhbmRsZUVudGl0eUNsb3NlID0gKCkgPT4ge1xuICAgICAgICBzZXRFbnRpdHlNb2RhbCh7IC4uLmVudGl0eU1vZGFsLCBvcGVuOiBmYWxzZSB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlRWRpdEFjdGlvbkNsaWNrID0gdXNlQ2FsbGJhY2soXG4gICAgICAgIChzZWxlY3RlZFJvdykgPT4ge1xuICAgICAgICAgICAgaWYgKHNlcnZpY2VUb1N0eWxlTWFwW3NlbGVjdGVkUm93LnNlcnZpY2VOYW1lXSA9PT0gJ3BhZ2UnKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlT3BlblBhZ2VTdHlsZURpYWxvZyhzZWxlY3RlZFJvdywgTU9ERV9FRElUKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0RW50aXR5TW9kYWwoe1xuICAgICAgICAgICAgICAgICAgICAuLi5lbnRpdHlNb2RhbCxcbiAgICAgICAgICAgICAgICAgICAgb3BlbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZU5hbWU6IHNlbGVjdGVkUm93LnNlcnZpY2VOYW1lLFxuICAgICAgICAgICAgICAgICAgICBzdGFuemFOYW1lOiBzZWxlY3RlZFJvdy5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBtb2RlOiBNT0RFX0VESVQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgICAgICAgW2VudGl0eU1vZGFsXVxuICAgICk7XG5cbiAgICBjb25zdCBoYW5kbGVEZWxldGVDbG9zZSA9ICgpID0+IHtcbiAgICAgICAgc2V0RGVsZXRlTW9kYWwoeyAuLi5kZWxldGVNb2RhbCwgb3BlbjogZmFsc2UgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGhhbmRsZUNsb25lQWN0aW9uQ2xpY2sgPSB1c2VDYWxsYmFjayhcbiAgICAgICAgKHNlbGVjdGVkUm93KSA9PiB7XG4gICAgICAgICAgICBpZiAoc2VydmljZVRvU3R5bGVNYXBbc2VsZWN0ZWRSb3cuc2VydmljZU5hbWVdID09PSAncGFnZScpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVPcGVuUGFnZVN0eWxlRGlhbG9nKHNlbGVjdGVkUm93LCBNT0RFX0NMT05FKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0RW50aXR5TW9kYWwoe1xuICAgICAgICAgICAgICAgICAgICAuLi5lbnRpdHlNb2RhbCxcbiAgICAgICAgICAgICAgICAgICAgb3BlbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZU5hbWU6IHNlbGVjdGVkUm93LnNlcnZpY2VOYW1lLFxuICAgICAgICAgICAgICAgICAgICBzdGFuemFOYW1lOiBzZWxlY3RlZFJvdy5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBtb2RlOiBNT0RFX0NMT05FLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICAgICAgIFtlbnRpdHlNb2RhbF1cbiAgICApO1xuXG4gICAgY29uc3QgaGFuZGxlRGVsZXRlQWN0aW9uQ2xpY2sgPSB1c2VDYWxsYmFjayhcbiAgICAgICAgKHNlbGVjdGVkUm93KSA9PiB7XG4gICAgICAgICAgICBzZXREZWxldGVNb2RhbCh7XG4gICAgICAgICAgICAgICAgLi4uZGVsZXRlTW9kYWwsXG4gICAgICAgICAgICAgICAgb3BlbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzdGFuemFOYW1lOiBzZWxlY3RlZFJvdy5uYW1lLFxuICAgICAgICAgICAgICAgIHNlcnZpY2VOYW1lOiBzZWxlY3RlZFJvdy5zZXJ2aWNlTmFtZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBbZGVsZXRlTW9kYWxdXG4gICAgKTtcblxuICAgIGNvbnN0IGdlbmVyYXRlTW9kYWxEaWFsb2cgPSAoKSA9PiB7XG4gICAgICAgIGlmIChlbnRpdHlNb2RhbC5vcGVuKSB7XG4gICAgICAgICAgICBsZXQgbGFiZWw7XG4gICAgICAgICAgICBpZiAocGFnZSA9PT0gJ2lucHV0cycpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHNlcnZpY2VzIH0gPSB1bmlmaWVkQ29uZmlncy5wYWdlcz8uaW5wdXRzO1xuICAgICAgICAgICAgICAgIGxhYmVsID0gc2VydmljZXMuZmluZCgoeCkgPT4geC5uYW1lID09PSBlbnRpdHlNb2RhbC5zZXJ2aWNlTmFtZSk/LnRpdGxlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHRhYnMgfSA9IHVuaWZpZWRDb25maWdzLnBhZ2VzPy5jb25maWd1cmF0aW9uO1xuICAgICAgICAgICAgICAgIGxhYmVsID0gdGFicy5maW5kKCh4KSA9PiB4Lm5hbWUgPT09IGVudGl0eU1vZGFsLnNlcnZpY2VOYW1lKT8udGl0bGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxFbnRpdHlNb2RhbFxuICAgICAgICAgICAgICAgICAgICBwYWdlPXtwYWdlfVxuICAgICAgICAgICAgICAgICAgICBvcGVuPXtlbnRpdHlNb2RhbC5vcGVufVxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVSZXF1ZXN0Q2xvc2U9e2hhbmRsZUVudGl0eUNsb3NlfVxuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlTmFtZT17ZW50aXR5TW9kYWwuc2VydmljZU5hbWV9XG4gICAgICAgICAgICAgICAgICAgIHN0YW56YU5hbWU9e2VudGl0eU1vZGFsLnN0YW56YU5hbWV9XG4gICAgICAgICAgICAgICAgICAgIG1vZGU9e2VudGl0eU1vZGFsLm1vZGV9XG4gICAgICAgICAgICAgICAgICAgIGZvcm1MYWJlbD17XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHlNb2RhbC5tb2RlID09PSBNT0RFX0NMT05FID8gXyhgQ2xvbmUgYCkgKyBsYWJlbCA6IF8oYFVwZGF0ZSBgKSArIGxhYmVsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgY29uc3QgZ2VuZXJhdGVEZWxldGVEaWFsb2cgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8RGVsZXRlTW9kYWxcbiAgICAgICAgICAgICAgICBwYWdlPXtwYWdlfVxuICAgICAgICAgICAgICAgIG9wZW49e2RlbGV0ZU1vZGFsLm9wZW59XG4gICAgICAgICAgICAgICAgaGFuZGxlUmVxdWVzdENsb3NlPXtoYW5kbGVEZWxldGVDbG9zZX1cbiAgICAgICAgICAgICAgICBzZXJ2aWNlTmFtZT17ZGVsZXRlTW9kYWwuc2VydmljZU5hbWV9XG4gICAgICAgICAgICAgICAgc3RhbnphTmFtZT17ZGVsZXRlTW9kYWwuc3RhbnphTmFtZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIGNvbnN0IGdlbmVyYXRlQ29sdW1ucyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgY29sdW1uID0gW107XG4gICAgICAgIGlmIChoZWFkZXJzICYmIGhlYWRlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBoZWFkZXJzLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICBjb2x1bW4ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIC4uLml0ZW0sXG4gICAgICAgICAgICAgICAgICAgIHNvcnRLZXk6IGl0ZW0uZmllbGQgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbHVtbi5wdXNoKHsgbGFiZWw6ICdBY3Rpb25zJywgZmllbGQ6ICdhY3Rpb25zJywgc29ydEtleTogJycgfSk7XG4gICAgICAgIHJldHVybiBjb2x1bW47XG4gICAgfTtcblxuICAgIGNvbnN0IGNvbHVtbnMgPSBnZW5lcmF0ZUNvbHVtbnMoKTtcblxuICAgIGNvbnN0IGdldFRhYmxlSGVhZGVyQ2VsbCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxUYWJsZS5IZWFkPlxuICAgICAgICAgICAgICAgIHtjb2x1bW5zICYmXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbnMubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbnMubWFwKChoZWFkRGF0YSkgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPFRhYmxlLkhlYWRDZWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtoZWFkRGF0YS5maWVsZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblNvcnQ9e2hlYWREYXRhLnNvcnRLZXkgPyBoYW5kbGVTb3J0IDogbnVsbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3J0S2V5PXtoZWFkRGF0YS5zb3J0S2V5ID8gaGVhZERhdGEuc29ydEtleSA6IG51bGx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydERpcj17XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWREYXRhLnNvcnRLZXkgJiYgaGVhZERhdGEuc29ydEtleSA9PT0gc29ydEtleSA/IHNvcnREaXIgOiAnbm9uZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2hlYWREYXRhLmxhYmVsfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9UYWJsZS5IZWFkQ2VsbD5cbiAgICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L1RhYmxlLkhlYWQ+XG4gICAgICAgICk7XG4gICAgfSwgW2NvbHVtbnMsIGhhbmRsZVNvcnQsIHNvcnREaXIsIHNvcnRLZXldKTtcblxuICAgIGNvbnN0IGdldFRhYmxlQm9keSA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxUYWJsZS5Cb2R5PlxuICAgICAgICAgICAgICAgIHtkYXRhICYmXG4gICAgICAgICAgICAgICAgICAgIGRhdGEubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgIGRhdGEubWFwKChyb3cpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEN1c3RvbVRhYmxlUm93IC8vIG5vc2VtZ3JlcDogdHlwZXNjcmlwdC5yZWFjdC5iZXN0LXByYWN0aWNlLnJlYWN0LXByb3BzLXNwcmVhZGluZy5yZWFjdC1wcm9wcy1zcHJlYWRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtyb3cuaWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdz17cm93fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5zPXtjb2x1bW5zfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJNYXBwaW5nPXtoZWFkZXJNYXBwaW5nfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Li4ue1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlRWRpdEFjdGlvbkNsaWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlQ2xvbmVBY3Rpb25DbGljayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZURlbGV0ZUFjdGlvbkNsaWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVUb2dnbGVBY3Rpb25DbGljaz17aGFuZGxlVG9nZ2xlQWN0aW9uQ2xpY2t9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsuLi4obW9yZUluZm9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5zaW9uUm93OiBnZXRFeHBhbnNpb25Sb3coXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1ucy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcmVJbmZvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHt9KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICA8L1RhYmxlLkJvZHk+XG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgICB7Y29sdW1ucyAmJiBjb2x1bW5zLmxlbmd0aCAmJiAoXG4gICAgICAgICAgICAgICAgPFRhYmxlIC8vIG5vc2VtZ3JlcDogdHlwZXNjcmlwdC5yZWFjdC5iZXN0LXByYWN0aWNlLnJlYWN0LXByb3BzLXNwcmVhZGluZy5yZWFjdC1wcm9wcy1zcHJlYWRpbmdcbiAgICAgICAgICAgICAgICAgICAgc3RyaXBlUm93c1xuICAgICAgICAgICAgICAgICAgICB7Li4uKG1vcmVJbmZvID8geyByb3dFeHBhbnNpb246ICdzaW5nbGUnIH0gOiB7fSl9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7Z2V0VGFibGVIZWFkZXJDZWxsKCl9XG4gICAgICAgICAgICAgICAgICAgIHtnZXRUYWJsZUJvZHkoKX1cbiAgICAgICAgICAgICAgICA8L1RhYmxlPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHshZGF0YS5sZW5ndGggPyA8Tm9SZWNvcmRzRGl2Pk5vIHJlY29yZHMgZm91bmQ8L05vUmVjb3Jkc0Rpdj4gOiBudWxsfVxuICAgICAgICAgICAge2dlbmVyYXRlTW9kYWxEaWFsb2coKX1cbiAgICAgICAgICAgIHtnZW5lcmF0ZURlbGV0ZURpYWxvZygpfVxuICAgICAgICA8Lz5cbiAgICApO1xufVxuXG5DdXN0b21UYWJsZS5wcm9wVHlwZXMgPSB7XG4gICAgcGFnZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIHNlcnZpY2VOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGRhdGE6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuICAgIGhhbmRsZVRvZ2dsZUFjdGlvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoYW5kbGVPcGVuUGFnZVN0eWxlRGlhbG9nOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoYW5kbGVTb3J0OiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzb3J0RGlyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHNvcnRLZXk6IFByb3BUeXBlcy5zdHJpbmcsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBtZW1vKEN1c3RvbVRhYmxlKTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVGV4dCBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL1RleHQnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuZnVuY3Rpb24gVGFibGVGaWx0ZXIocHJvcHMpIHtcbiAgICBjb25zdCBkZWJvdW5jZSA9IChmdW5jLCB3YWl0KSA9PiB7XG4gICAgICAgIGxldCB0aW1lb3V0O1xuXG4gICAgICAgIC8vIFRoaXMgaXMgdGhlIGZ1bmN0aW9uIHRoYXQgaXMgcmV0dXJuZWQgYW5kIHdpbGwgYmUgZXhlY3V0ZWQgbWFueSB0aW1lc1xuICAgICAgICAvLyBXZSBzcHJlYWQgKC4uLmFyZ3MpIHRvIGNhcHR1cmUgYW55IG51bWJlciBvZiBwYXJhbWV0ZXJzIHdlIHdhbnQgdG8gcGFzc1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gZXhlY3V0ZWRGdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgICAgICAgICAvLyBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWQgYWZ0ZXJcbiAgICAgICAgICAgIC8vIHRoZSBkZWJvdW5jZSB0aW1lIGhhcyBlbGFwc2VkXG4gICAgICAgICAgICBjb25zdCBsYXRlciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBudWxsIHRpbWVvdXQgdG8gaW5kaWNhdGUgdGhlIGRlYm91bmNlIGVuZGVkXG4gICAgICAgICAgICAgICAgdGltZW91dCA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAvLyBFeGVjdXRlIHRoZSBjYWxsYmFja1xuICAgICAgICAgICAgICAgIGZ1bmMoLi4uYXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gVGhpcyB3aWxsIHJlc2V0IHRoZSB3YWl0aW5nIGV2ZXJ5IGZ1bmN0aW9uIGV4ZWN1dGlvbi5cbiAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIHN0ZXAgdGhhdCBwcmV2ZW50cyB0aGUgZnVuY3Rpb24gZnJvbVxuICAgICAgICAgICAgLy8gYmVpbmcgZXhlY3V0ZWQgYmVjYXVzZSBpdCB3aWxsIG5ldmVyIHJlYWNoIHRoZVxuICAgICAgICAgICAgLy8gaW5zaWRlIG9mIHRoZSBwcmV2aW91cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG5cbiAgICAgICAgICAgIC8vIFJlc3RhcnQgdGhlIGRlYm91bmNlIHdhaXRpbmcgcGVyaW9kLlxuICAgICAgICAgICAgLy8gc2V0VGltZW91dCByZXR1cm5zIGEgdHJ1dGh5IHZhbHVlXG4gICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxUZXh0XG4gICAgICAgICAgICBhcHBlYXJhbmNlPVwic2VhcmNoXCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiZmlsdGVyXCJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtkZWJvdW5jZShwcm9wcy5oYW5kbGVDaGFuZ2UsIDIwMCl9XG4gICAgICAgIC8+XG4gICAgKTtcbn1cblxuVGFibGVGaWx0ZXIucHJvcFR5cGVzID0ge1xuICAgIGhhbmRsZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBUYWJsZUZpbHRlcjtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBTZWxlY3QgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9TZWxlY3QnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL0J1dHRvbic7XG5pbXBvcnQgUGFnaW5hdG9yIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvUGFnaW5hdG9yJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgXyB9IGZyb20gJ0BzcGx1bmsvdWktdXRpbHMvaTE4bic7XG5cbmltcG9ydCBUYWJsZUZpbHRlciBmcm9tICcuL1RhYmxlRmlsdGVyJztcbmltcG9ydCBUYWJsZUNvbnRleHQgZnJvbSAnLi4vLi4vY29udGV4dC9UYWJsZUNvbnRleHQnO1xuaW1wb3J0IHsgVGFibGVTZWxlY3RCb3hXcmFwcGVyIH0gZnJvbSAnLi9DdXN0b21UYWJsZVN0eWxlJztcbmltcG9ydCB7IFBBR0VfSU5QVVQgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvcGFnZXMnO1xuXG5jb25zdCBUYWJsZUhlYWRlcldyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjY2NjO1xuICAgIHBhZGRpbmctdG9wOiA1cHg7XG4gICAgbWFyZ2luLWJvdHRvbTogNXB4O1xuYDtcblxuY29uc3QgVGFibGVGaWx0ZXJXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgICBtYXgtd2lkdGg6IDMwMHB4O1xuICAgIHdpZHRoOiAxMDAlO1xuYDtcblxuZnVuY3Rpb24gVGFibGVIZWFkZXIoeyBwYWdlLCBzZXJ2aWNlcywgdG90YWxFbGVtZW50LCBoYW5kbGVSZXF1ZXN0TW9kYWxPcGVuIH0pIHtcbiAgICBjb25zdCB7XG4gICAgICAgIHBhZ2VTaXplLFxuICAgICAgICBjdXJyZW50UGFnZSxcbiAgICAgICAgc2V0Q3VycmVudFBhZ2UsXG4gICAgICAgIHNldFBhZ2VTaXplLFxuICAgICAgICBzZWFyY2hUeXBlLFxuICAgICAgICBzZXRTZWFyY2hUeXBlLFxuICAgICAgICBzZXRTZWFyY2hUZXh0LFxuICAgIH0gPSB1c2VDb250ZXh0KFRhYmxlQ29udGV4dCk7XG5cbiAgICBjb25zdCBpdGVtTGFiZWwgPSBwYWdlID09PSBQQUdFX0lOUFVUID8gJ0lucHV0JyA6ICdJdGVtJztcblxuICAgIGNvbnN0IGdldFNlYXJjaFR5cGVEcm9wZG93biA9ICgpID0+IHtcbiAgICAgICAgaWYgKHNlcnZpY2VzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGxldCBhcnIgPSBbXTtcbiAgICAgICAgYXJyID0gc2VydmljZXMubWFwKChzZXJ2aWNlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gPFNlbGVjdC5PcHRpb24ga2V5PXtzZXJ2aWNlLm5hbWV9IGxhYmVsPXtzZXJ2aWNlLnRpdGxlfSB2YWx1ZT17c2VydmljZS5uYW1lfSAvPjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXJyLnVuc2hpZnQoPFNlbGVjdC5PcHRpb24ga2V5PVwiYWxsXCIgbGFiZWw9e18oJ0FsbCcpfSB2YWx1ZT1cImFsbFwiIC8+KTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxTZWxlY3RcbiAgICAgICAgICAgICAgICB2YWx1ZT17c2VhcmNoVHlwZX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkcm9wZG93bklucHV0XCJcbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUsIHsgdmFsdWUgfSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZXRDdXJyZW50UGFnZSgwKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0U2VhcmNoVHlwZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7YXJyfVxuICAgICAgICAgICAgPC9TZWxlY3Q+XG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxUYWJsZUhlYWRlcldyYXBwZXI+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImlucHV0TnVtYmVyXCI+XG4gICAgICAgICAgICAgICAgICAgIHt0b3RhbEVsZW1lbnR9XG4gICAgICAgICAgICAgICAgICAgIHt0b3RhbEVsZW1lbnQgPiAxID8gXyhgICR7aXRlbUxhYmVsfXNgKSA6IF8oYCAke2l0ZW1MYWJlbH1gKX1cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAge3BhZ2UgPT09IFBBR0VfSU5QVVQgPyAoXG4gICAgICAgICAgICAgICAgICAgIDxUYWJsZVNlbGVjdEJveFdyYXBwZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3BhZ2VTaXplfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImRyb3Bkb3duUGFnZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlLCB7IHZhbHVlIH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0Q3VycmVudFBhZ2UoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFBhZ2VTaXplKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3QuT3B0aW9uIGtleT1cIjEwXCIgbGFiZWw9e18oJzEwIFBlciBQYWdlJyl9IHZhbHVlPXsxMH0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VsZWN0Lk9wdGlvbiBrZXk9XCIyNVwiIGxhYmVsPXtfKCcyNSBQZXIgUGFnZScpfSB2YWx1ZT17MjV9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdC5PcHRpb24ga2V5PVwiNTBcIiBsYWJlbD17XygnNTAgUGVyIFBhZ2UnKX0gdmFsdWU9ezUwfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3Q+XG4gICAgICAgICAgICAgICAgICAgICAgICB7Z2V0U2VhcmNoVHlwZURyb3Bkb3duKCl9XG4gICAgICAgICAgICAgICAgICAgIDwvVGFibGVTZWxlY3RCb3hXcmFwcGVyPlxuICAgICAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8VGFibGVGaWx0ZXJXcmFwcGVyPlxuICAgICAgICAgICAgICAgIDxUYWJsZUZpbHRlclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVDaGFuZ2U9eyhlLCB7IHZhbHVlIH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEN1cnJlbnRQYWdlKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0U2VhcmNoVGV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvVGFibGVGaWx0ZXJXcmFwcGVyPlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8UGFnaW5hdG9yXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSwgeyBwYWdlOiBwYWdlTnVtYmVyIH0pID0+IHNldEN1cnJlbnRQYWdlKHBhZ2VOdW1iZXIgLSAxKX1cbiAgICAgICAgICAgICAgICAgICAgY3VycmVudD17Y3VycmVudFBhZ2UgKyAxfVxuICAgICAgICAgICAgICAgICAgICBhbHdheXNTaG93TGFzdFBhZ2VMaW5rXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsUGFnZXM9e01hdGguY2VpbCh0b3RhbEVsZW1lbnQgLyBwYWdlU2l6ZSl9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICB7cGFnZSA9PT0gUEFHRV9JTlBVVCA/IG51bGwgOiAoXG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtfKCdBZGQnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVhcmFuY2U9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZVJlcXVlc3RNb2RhbE9wZW59XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1RhYmxlSGVhZGVyV3JhcHBlcj5cbiAgICApO1xufVxuXG5UYWJsZUhlYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgcGFnZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzZXJ2aWNlczogUHJvcFR5cGVzLmFycmF5LFxuICAgIHRvdGFsRWxlbWVudDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBoYW5kbGVSZXF1ZXN0TW9kYWxPcGVuOiBQcm9wVHlwZXMuZnVuYyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRhYmxlSGVhZGVyO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VDb250ZXh0LCB1c2VFZmZlY3QsIG1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXBkYXRlIGZyb20gJ2ltbXV0YWJpbGl0eS1oZWxwZXInO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCB7IFdhaXRTcGlubmVyV3JhcHBlciB9IGZyb20gJy4vQ3VzdG9tVGFibGVTdHlsZSc7XG5pbXBvcnQgeyBheGlvc0NhbGxXcmFwcGVyIH0gZnJvbSAnLi4vLi4vdXRpbC9heGlvc0NhbGxXcmFwcGVyJztcbmltcG9ydCB7IGdldFVuaWZpZWRDb25maWdzLCBnZW5lcmF0ZVRvYXN0IH0gZnJvbSAnLi4vLi4vdXRpbC91dGlsJztcbmltcG9ydCBDdXN0b21UYWJsZSBmcm9tICcuL0N1c3RvbVRhYmxlJztcbmltcG9ydCBUYWJsZUhlYWRlciBmcm9tICcuL1RhYmxlSGVhZGVyJztcbmltcG9ydCBUYWJsZUNvbnRleHQgZnJvbSAnLi4vLi4vY29udGV4dC9UYWJsZUNvbnRleHQnO1xuaW1wb3J0IHsgUEFHRV9JTlBVVCB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy9wYWdlcyc7XG5cbmZ1bmN0aW9uIFRhYmxlV3JhcHBlcih7IHBhZ2UsIHNlcnZpY2VOYW1lLCBoYW5kbGVSZXF1ZXN0TW9kYWxPcGVuLCBoYW5kbGVPcGVuUGFnZVN0eWxlRGlhbG9nIH0pIHtcbiAgICBjb25zdCBbc29ydEtleSwgc2V0U29ydEtleV0gPSB1c2VTdGF0ZSgnbmFtZScpO1xuICAgIGNvbnN0IFtzb3J0RGlyLCBzZXRTb3J0RGlyXSA9IHVzZVN0YXRlKCdhc2MnKTtcbiAgICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcbiAgICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlKG51bGwpO1xuXG4gICAgY29uc3QgeyByb3dEYXRhLCBzZXRSb3dEYXRhLCBwYWdlU2l6ZSwgY3VycmVudFBhZ2UsIHNlYXJjaFRleHQsIHNlYXJjaFR5cGUgfSA9IHVzZUNvbnRleHQoXG4gICAgICAgIFRhYmxlQ29udGV4dFxuICAgICk7XG5cbiAgICBjb25zdCB1bmlmaWVkQ29uZmlncyA9IGdldFVuaWZpZWRDb25maWdzKCk7XG4gICAgY29uc3QgdGFibGVDb25maWcgPVxuICAgICAgICBwYWdlID09PSBQQUdFX0lOUFVUXG4gICAgICAgICAgICA/IHVuaWZpZWRDb25maWdzLnBhZ2VzLmlucHV0cy50YWJsZVxuICAgICAgICAgICAgOiB1bmlmaWVkQ29uZmlncy5wYWdlcy5jb25maWd1cmF0aW9uLnRhYnMuZmlsdGVyKCh4KSA9PiB4Lm5hbWUgPT09IHNlcnZpY2VOYW1lKVswXVxuICAgICAgICAgICAgICAgICAgLnRhYmxlO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB0YWJsZUNvbmZpZy5oZWFkZXI7XG4gICAgY29uc3QgeyBtb3JlSW5mbyB9ID0gdGFibGVDb25maWc7XG4gICAgY29uc3Qgc2VydmljZXMgPVxuICAgICAgICBwYWdlID09PSBQQUdFX0lOUFVUXG4gICAgICAgICAgICA/IHVuaWZpZWRDb25maWdzLnBhZ2VzLmlucHV0cy5zZXJ2aWNlc1xuICAgICAgICAgICAgOiB1bmlmaWVkQ29uZmlncy5wYWdlcy5jb25maWd1cmF0aW9uLnRhYnMuZmlsdGVyKCh4KSA9PiB4Lm5hbWUgPT09IHNlcnZpY2VOYW1lKTtcblxuICAgIGNvbnN0IG1vZGlmeUFQSVJlc3BvbnNlID0gKGRhdGEpID0+IHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIHNlcnZpY2VzLmZvckVhY2goKHNlcnZpY2UsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoc2VydmljZSAmJiBzZXJ2aWNlLm5hbWUgJiYgZGF0YSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRtcE9iaiA9IHt9O1xuICAgICAgICAgICAgICAgIGRhdGFbaW5kZXhdLmZvckVhY2goKHZhbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0bXBPYmpbdmFsLm5hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4udmFsLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogdmFsLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdmFsLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlTmFtZTogc2VydmljZS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG9ialtzZXJ2aWNlLm5hbWVdID0gdG1wT2JqO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgc2V0Um93RGF0YShvYmopO1xuICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgICB9O1xuXG4gICAgY29uc3QgZmV0Y2hJbnB1dHMgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlcXVlc3RzID0gW107XG4gICAgICAgIHNlcnZpY2VzLmZvckVhY2goKHNlcnZpY2UpID0+IHtcbiAgICAgICAgICAgIHJlcXVlc3RzLnB1c2goXG4gICAgICAgICAgICAgICAgYXhpb3NDYWxsV3JhcHBlcih7XG4gICAgICAgICAgICAgICAgICAgIHNlcnZpY2VOYW1lOiBzZXJ2aWNlLm5hbWUsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgICBheGlvc1xuICAgICAgICAgICAgLmFsbChyZXF1ZXN0cylcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgbWVzc2FnZSA9ICcnO1xuICAgICAgICAgICAgICAgIGxldCBlcnJvckNvZGUgPSAnJztcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IucmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHJlcXVlc3Qgd2FzIG1hZGUgYW5kIHRoZSBzZXJ2ZXIgcmVzcG9uZGVkIHdpdGggYSBzdGF0dXMgY29kZVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gYEVycm9yIHJlY2VpdmVkIGZyb20gc2VydmVyOiAke2Vycm9yLnJlc3BvbnNlLmRhdGEubWVzc2FnZXNbMF0udGV4dH1gO1xuICAgICAgICAgICAgICAgICAgICBlcnJvckNvZGUgPSBwYWdlID09PSBQQUdFX0lOUFVUID8gJ0VSUjAwMDEnIDogJ0VSUjAwMDInO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3IucmVxdWVzdCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcmVxdWVzdCB3YXMgbWFkZSBidXQgbm8gcmVzcG9uc2Ugd2FzIHJlY2VpdmVkXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgTm8gcmVzcG9uc2UgcmVjZWl2ZWQgd2hpbGUgbWFraW5nIHJlcXVlc3QgdG8gJHtwYWdlfSBzZXJ2aWNlc2A7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yQ29kZSA9ICdFUlIwMDAzJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBTb21ldGhpbmcgaGFwcGVuZWQgaW4gc2V0dGluZyB1cCB0aGUgcmVxdWVzdCB0aGF0IHRyaWdnZXJlZCBhbiBFcnJvclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gYEVycm9yIG1ha2luZyByZXF1ZXN0IHRvICR7cGFnZX0gc2VydmljZXNgO1xuICAgICAgICAgICAgICAgICAgICBlcnJvckNvZGUgPSAnRVJSMDAwNCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgICAgICAgIGVycm9yLnVjY0Vycm9yQ29kZSA9IGVycm9yQ29kZTtcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZVRvYXN0KG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgICAgIHNldEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIG1vZGlmeUFQSVJlc3BvbnNlKHJlc3BvbnNlLm1hcCgocmVzKSA9PiByZXMuZGF0YS5lbnRyeSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGZldGNoSW5wdXRzKCk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgICB9LCBbXSk7XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSByb3cge09iamVjdH0gcm93XG4gICAgICovXG4gICAgY29uc3QgY2hhbmdlVG9nZ2xlU3RhdHVzID0gKHJvdykgPT4ge1xuICAgICAgICBzZXRSb3dEYXRhKChjdXJyZW50Um93RGF0YSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZShjdXJyZW50Um93RGF0YSwge1xuICAgICAgICAgICAgICAgIFtyb3cuc2VydmljZU5hbWVdOiB7XG4gICAgICAgICAgICAgICAgICAgIFtyb3cubmFtZV06IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9fdG9nZ2xlU2hvd1NwaW5uZXI6IHsgJHNldDogdHJ1ZSB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGJvZHkgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gICAgICAgIGJvZHkuYXBwZW5kKCdkaXNhYmxlZCcsICFyb3cuZGlzYWJsZWQpO1xuICAgICAgICBheGlvc0NhbGxXcmFwcGVyKHtcbiAgICAgICAgICAgIHNlcnZpY2VOYW1lOiBgJHtyb3cuc2VydmljZU5hbWV9LyR7cm93Lm5hbWV9YCxcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICBjdXN0b21IZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyB9LFxuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICAgICAgICBoYW5kbGVFcnJvcjogdHJ1ZSxcbiAgICAgICAgICAgIGNhbGxiYWNrT25FcnJvcjogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldFJvd0RhdGEoKGN1cnJlbnRSb3dEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1cGRhdGUoY3VycmVudFJvd0RhdGEsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFtyb3cuc2VydmljZU5hbWVdOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW3Jvdy5uYW1lXToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX3RvZ2dsZVNob3dTcGlubmVyOiB7ICRzZXQ6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIHNldFJvd0RhdGEoKGN1cnJlbnRSb3dEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZShjdXJyZW50Um93RGF0YSwge1xuICAgICAgICAgICAgICAgICAgICBbcm93LnNlcnZpY2VOYW1lXToge1xuICAgICAgICAgICAgICAgICAgICAgICAgW3Jvdy5uYW1lXToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiB7ICRzZXQ6IHJlc3BvbnNlLmRhdGEuZW50cnlbMF0uY29udGVudC5kaXNhYmxlZCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9fdG9nZ2xlU2hvd1NwaW5uZXI6IHsgJHNldDogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGhhbmRsZVNvcnQgPSAoZSwgdmFsKSA9PiB7XG4gICAgICAgIGNvbnN0IHByZXZTb3J0S2V5ID0gc29ydEtleTtcbiAgICAgICAgY29uc3QgcHJldlNvcnREaXIgPSBwcmV2U29ydEtleSA9PT0gdmFsLnNvcnRLZXkgPyBzb3J0RGlyIDogJ25vbmUnO1xuICAgICAgICBjb25zdCBuZXh0U29ydERpciA9IHByZXZTb3J0RGlyID09PSAnYXNjJyA/ICdkZXNjJyA6ICdhc2MnO1xuICAgICAgICBzZXRTb3J0RGlyKG5leHRTb3J0RGlyKTtcbiAgICAgICAgc2V0U29ydEtleSh2YWwuc29ydEtleSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheX0gZGF0YVxuICAgICAqIFRoaXMgZnVuY3Rpb24gd2lsbCBpdGVyYXRlIGFuIGFycnJheSBhbmQgbWF0Y2ggZWFjaCBrZXktdmFsdWUgd2l0aCB0aGUgc2VhcmNoVGV4dFxuICAgICAqIEl0IHdpbGwgcmV0dXJuIGEgbmV3IGFycmF5IHdoaWNoIHdpbGwgbWF0Y2ggd2l0aCBzZWFyY2hUZXh0XG4gICAgICovXG4gICAgY29uc3QgZmluZEJ5TWF0Y2hpbmdWYWx1ZSA9IChkYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IGFyciA9IFtdO1xuICAgICAgICBjb25zdCB0YWJsZUZpZWxkcyA9IFtdO1xuXG4gICAgICAgIGhlYWRlcnMuZm9yRWFjaCgoaGVhZERhdGEpID0+IHtcbiAgICAgICAgICAgIHRhYmxlRmllbGRzLnB1c2goaGVhZERhdGEuZmllbGQpO1xuICAgICAgICB9KTtcbiAgICAgICAgbW9yZUluZm8/LmZvckVhY2goKG1vcmVJbmZvRGF0YSkgPT4ge1xuICAgICAgICAgICAgdGFibGVGaWVsZHMucHVzaChtb3JlSW5mb0RhdGEuZmllbGQpO1xuICAgICAgICB9KTtcblxuICAgICAgICBPYmplY3Qua2V5cyhkYXRhKS5mb3JFYWNoKCh2KSA9PiB7XG4gICAgICAgICAgICBsZXQgZm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGRhdGFbdl0pLmZvckVhY2goKHZ2KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICB0YWJsZUZpZWxkcy5pbmNsdWRlcyh2dikgJiZcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGRhdGFbdl1bdnZdID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICBkYXRhW3ZdW3Z2XS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHNlYXJjaFRleHQudG9Mb3dlckNhc2UoKS50cmltKCkpICYmXG4gICAgICAgICAgICAgICAgICAgICFmb3VuZFxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBhcnIucHVzaChkYXRhW3ZdKTtcbiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICB9O1xuXG4gICAgY29uc3QgZ2V0Um93RGF0YSA9ICgpID0+IHtcbiAgICAgICAgbGV0IGFyciA9IFtdO1xuICAgICAgICBpZiAoc2VhcmNoVHlwZSA9PT0gJ2FsbCcpIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHJvd0RhdGEpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBuZXdBcnIgPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAoc2VhcmNoVGV4dCAmJiBzZWFyY2hUZXh0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBuZXdBcnIgPSBmaW5kQnlNYXRjaGluZ1ZhbHVlKHJvd0RhdGFba2V5XSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3QXJyID0gT2JqZWN0LmtleXMocm93RGF0YVtrZXldKS5tYXAoKHZhbCkgPT4gcm93RGF0YVtrZXldW3ZhbF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhcnIgPSBhcnIuY29uY2F0KG5ld0Fycik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFyciA9IGZpbmRCeU1hdGNoaW5nVmFsdWUocm93RGF0YVtzZWFyY2hUeXBlXSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTb3J0IHRoZSBhcnJheSBiYXNlZCBvbiB0aGUgc29ydCB2YWx1ZVxuICAgICAgICBjb25zdCBzb3J0ZWRBcnIgPSBhcnIuc29ydCgocm93QSwgcm93QikgPT4ge1xuICAgICAgICAgICAgaWYgKHNvcnREaXIgPT09ICdhc2MnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJvd0Fbc29ydEtleV0gPiByb3dCW3NvcnRLZXldID8gMSA6IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNvcnREaXIgPT09ICdkZXNjJykge1xuICAgICAgICAgICAgICAgIHJldHVybiByb3dCW3NvcnRLZXldID4gcm93QVtzb3J0S2V5XSA/IDEgOiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgdXBkYXRlZEFyciA9IHNvcnRlZEFyci5zbGljZShjdXJyZW50UGFnZSAqIHBhZ2VTaXplLCAoY3VycmVudFBhZ2UgKyAxKSAqIHBhZ2VTaXplKTtcblxuICAgICAgICBpZiAoY3VycmVudFBhZ2UgPiAwICYmICF1cGRhdGVkQXJyLmxlbmd0aCkge1xuICAgICAgICAgICAgdXBkYXRlZEFyciA9IHNvcnRlZEFyci5zbGljZSgoY3VycmVudFBhZ2UgLSAxKSAqIHBhZ2VTaXplLCBwYWdlU2l6ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gW3VwZGF0ZWRBcnIsIGFyci5sZW5ndGhdO1xuICAgIH07XG5cbiAgICBpZiAoZXJyb3I/LnVjY0Vycm9yQ29kZSkge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG5cbiAgICBpZiAobG9hZGluZykge1xuICAgICAgICByZXR1cm4gPFdhaXRTcGlubmVyV3JhcHBlciAvPjtcbiAgICB9XG5cbiAgICBjb25zdCBbZmlsdGVyZWREYXRhLCB0b3RhbEVsZW1lbnRdID0gZ2V0Um93RGF0YSgpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICAgIDxUYWJsZUhlYWRlclxuICAgICAgICAgICAgICAgIHBhZ2U9e3BhZ2V9XG4gICAgICAgICAgICAgICAgc2VydmljZXM9e3NlcnZpY2VzfVxuICAgICAgICAgICAgICAgIHRvdGFsRWxlbWVudD17dG90YWxFbGVtZW50fVxuICAgICAgICAgICAgICAgIGhhbmRsZVJlcXVlc3RNb2RhbE9wZW49e2hhbmRsZVJlcXVlc3RNb2RhbE9wZW59XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPEN1c3RvbVRhYmxlXG4gICAgICAgICAgICAgICAgcGFnZT17cGFnZX1cbiAgICAgICAgICAgICAgICBzZXJ2aWNlTmFtZT17c2VydmljZU5hbWV9XG4gICAgICAgICAgICAgICAgZGF0YT17ZmlsdGVyZWREYXRhfVxuICAgICAgICAgICAgICAgIGhhbmRsZVRvZ2dsZUFjdGlvbkNsaWNrPXsocm93KSA9PiBjaGFuZ2VUb2dnbGVTdGF0dXMocm93KX1cbiAgICAgICAgICAgICAgICBoYW5kbGVTb3J0PXtoYW5kbGVTb3J0fVxuICAgICAgICAgICAgICAgIHNvcnREaXI9e3NvcnREaXJ9XG4gICAgICAgICAgICAgICAgc29ydEtleT17c29ydEtleX1cbiAgICAgICAgICAgICAgICBoYW5kbGVPcGVuUGFnZVN0eWxlRGlhbG9nPXtoYW5kbGVPcGVuUGFnZVN0eWxlRGlhbG9nfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgPC8+XG4gICAgKTtcbn1cblxuVGFibGVXcmFwcGVyLnByb3BUeXBlcyA9IHtcbiAgICBwYWdlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHNlcnZpY2VOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGhhbmRsZVJlcXVlc3RNb2RhbE9wZW46IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhbmRsZU9wZW5QYWdlU3R5bGVEaWFsb2c6IFByb3BUeXBlcy5mdW5jLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgbWVtbyhUYWJsZVdyYXBwZXIpO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBMaW5rIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvTGluayc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBFUlIwMDAxOiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgICBUaGlzIGlzIG5vcm1hbCBvbiBTcGx1bmsgc2VhcmNoIGhlYWRzIGFzIHRoZXkgZG8gbm90IHJlcXVpcmUgYW4gSW5wdXQgcGFnZS4gQ2hlY2sgeW91ciBpbnN0YWxsYXRpb24gb3IgcmV0dXJuIHRvIHRoZSA8TGluayB0bz1cImNvbmZpZ3VyYXRpb25cIj5jb25maWd1cmF0aW9uIHBhZ2U8L0xpbms+LlxuICAgICAgICA8Lz5cbiAgICApLFxuICAgIEVSUjAwMDI6ICdDb25maWd1cmF0aW9uIHBhZ2UgZmFpbGVkIHRvIGxvYWQsIHRoZSBzZXJ2ZXIgcmVwb3J0ZWQgaW50ZXJuYWwgZXJyb3JzIHdoaWNoIG1heSBpbmRpY2F0ZSB5b3UgZG8gbm90IGhhdmUgYWNjZXNzIHRvIHRoaXMgcGFnZS4nLFxuICAgIEVSUjAwMDM6ICdGYWlsZWQgdG8gbG9hZCBjb250ZW50IGR1ZSB0byBubyByZXNwb25zZSBmcm9tIHNlcnZlciEnLFxuICAgIEVSUjAwMDQ6ICdGYWlsZWQgdG8gbG9hZCBjb250ZW50IGR1ZSB0byBmYWlsZWQgcmVxdWVzdCBwcm9jZXNzaW5nIScsXG4gICAgRVJSMDAwNTogJ0ZhaWxlZCB0byBsb2FkIGN1cnJlbnQgc3RhdGUgZm9yIHNlbGVjdGVkIGVudGl0eSBpbiBmb3JtIScsXG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCBIZWFkaW5nIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvSGVhZGluZyc7XG5pbXBvcnQgeyBfIH0gZnJvbSAnQHNwbHVuay91aS11dGlscy9pMThuJztcbmltcG9ydCBDYXJkIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvQ2FyZCc7XG5pbXBvcnQgV2FybmluZ0ljb24gZnJvbSAnQHNwbHVuay9yZWFjdC1pY29ucy9XYXJuaW5nJ1xuaW1wb3J0IGVycm9yQ29kZXMgZnJvbSAnLi4vY29uc3RhbnRzL2Vycm9yQ29kZXMnO1xuXG5jbGFzcyBFcnJvckJvdW5kYXJ5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7IGVycm9yQ29kZTogbnVsbCwgZXJyb3I6IG51bGwsIGVycm9ySW5mbzogbnVsbCB9O1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgLy8gVXBkYXRlIHN0YXRlIHNvIHRoZSBuZXh0IHJlbmRlciB3aWxsIHNob3cgdGhlIGZhbGxiYWNrIFVJLlxuICAgICAgICByZXR1cm4geyBlcnJvckNvZGU6IGVycm9yLnVjY0Vycm9yQ29kZSB9O1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZENhdGNoKGVycm9yLCBlcnJvckluZm8pIHtcbiAgICAgICAgLy8gQ2F0Y2ggZXJyb3JzIGluIGFueSBjb21wb25lbnRzIGJlbG93IGFuZCByZS1yZW5kZXIgd2l0aCBlcnJvciBtZXNzYWdlXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICBlcnJvckluZm8sXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBZb3UgY2FuIGFsc28gbG9nIGVycm9yIG1lc3NhZ2VzIHRvIGFuIGVycm9yIHJlcG9ydGluZyBzZXJ2aWNlIGhlcmVcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmVycm9yKSB7XG4gICAgICAgICAgICAvLyBFcnJvciBwYXRoXG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxkaXYgYWxpZ249XCJjZW50ZXJcIiBzdHlsZT17eyBtYXJnaW5Ub3AgOiBcIjEwJVwiIH19PlxuICAgICAgICAgICAgICAgIDxDYXJkIHN0eWxlPXt7IGJveFNoYWRvdyA6IFwiMTBweCAxMHB4IDVweCAjYWFhYWFhXCIgfX0gPlxuICAgICAgICAgICAgICAgICAgICA8Q2FyZC5IZWFkZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8SGVhZGluZyBzdHlsZT17eyB0ZXh0QWxpZ246XCJjZW50ZXJcIiB9fSBsZXZlbD17Mn0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFdhcm5pbmdJY29uIHN0eWxlPXt7IGZvbnRTaXplOiBcIjEyMHB4XCIsIGNvbG9yOiBcIiNmZjk5MDBcIiB9fSAvPjxici8+PGJyLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5lcnJvckNvZGUgPT09ICdFUlIwMDAxJyA/IF8oJ0ZhaWxlZCB0byBsb2FkIElucHV0cyBQYWdlJykgOiBfKCdTb21ldGhpbmcgd2VudCB3cm9uZyEnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvSGVhZGluZz5cbiAgICAgICAgICAgICAgICAgICAgPC9DYXJkLkhlYWRlcj5cbiAgICAgICAgICAgICAgICAgICAgPENhcmQuQm9keT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmVycm9yQ29kZSA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XyhlcnJvckNvZGVzW3RoaXMuc3RhdGUuZXJyb3JDb2RlXSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxici8+PGJyLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgICAgICAgICAgICAgICAgPGRldGFpbHMgc3R5bGU9e3sgd2hpdGVTcGFjZTogJ3ByZS13cmFwJyB9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5lcnJvcj8udG9TdHJpbmcoKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGV0YWlscz5cbiAgICAgICAgICAgICAgICAgICAgPC9DYXJkLkJvZHk+XG4gICAgICAgICAgICAgICAgICAgIDxDYXJkLkZvb3RlciBzaG93Qm9yZGVyPXtmYWxzZX0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5lcnJvckNvZGUgPyB0aGlzLnN0YXRlLmVycm9yQ29kZSA6IG51bGx9XG4gICAgICAgICAgICAgICAgICAgIDwvQ2FyZC5Gb290ZXI+XG4gICAgICAgICAgICAgICAgPC9DYXJkPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBOb3JtYWxseSwganVzdCByZW5kZXIgY2hpbGRyZW5cbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxufVxuXG5FcnJvckJvdW5kYXJ5LnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm5vZGUpLCBQcm9wVHlwZXMubm9kZV0pLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBFcnJvckJvdW5kYXJ5O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==