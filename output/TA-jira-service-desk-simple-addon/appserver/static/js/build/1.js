(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{255:function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(63),a=n.n(r),o=n(0),i=n.n(o),l=n(3),c=n.n(l),s=Object(o.createContext)({rowData:{},setRowData:function(){}}),u=function(e){var t=e.children,n=Object(o.useState)({}),r=a()(n,2),l=r[0],c=r[1],u=Object(o.useState)(""),d=a()(u,2),p=d[0],f=d[1],h=Object(o.useState)("all"),m=a()(h,2),v=m[0],g=m[1],b=Object(o.useState)(10),y=a()(b,2),O=y[0],E=y[1],j=Object(o.useState)(0),k=a()(j,2),w=k[0],C=k[1];return i.a.createElement(s.Provider,{value:{rowData:l,setRowData:c,searchText:p,setSearchText:f,searchType:v,setSearchType:g,pageSize:O,setPageSize:E,currentPage:w,setCurrentPage:C}},t)};u.propTypes={children:c.a.oneOfType([c.a.arrayOf(c.a.node),c.a.node]).isRequired},t.b=s},256:function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"c",(function(){return a})),n.d(t,"d",(function(){return o})),n.d(t,"b",(function(){return i}));var r="clone",a="create",o="edit",i="config"},257:function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));var r=n(251),a=n.n(r),o=n(74),i=n.n(o),l=n(131),c=n(130),s=n(40);function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){a()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var p=function(e){var t=e.serviceName,n=e.endpointUrl,r=e.params,a=e.body,o=e.cancelToken,u=e.customHeaders,p=void 0===u?{}:u,f=e.method,h=void 0===f?"get":f,m=e.handleError,v=void 0!==m&&m,g=e.callbackOnError,b=void 0===g?function(){}:g,y=t?Object(s.b)(t):n,O={app:l.app,owner:"nobody"},E={"X-Splunk-Form-Key":l.CSRFToken,"X-Requested-With":"XMLHttpRequest","Content-Type":"application/json"},j=Object.assign(E,p),k=Object(c.createRESTURL)(y,O),w={output_mode:"json"};r&&(w=d(d({},w),r));var C={params:w,method:h,url:k,credentials:"include",headers:j,cancelToken:o};return"post"===h&&(C.data=a),v?i()(C).catch((function(e){var t="";return i.a.isCancel(e)||(t=e.response?"Error response received from server: ".concat(e.response.data.messages[0].text):e.request?"No response received while making request to ".concat(y):"Error making ".concat(h," request to ").concat(y),Object(s.c)(t,"error"),b(e)),Promise.reject(e)})):i()(C)}},280:function(e,t,n){"use strict";n.d(t,"b",(function(){return u})),n.d(t,"a",(function(){return d}));var r,a,o,i=n(13),l=n.n(i),c=n(1),s=n(14),u=c.default.div.attrs({className:"pageTitle"})(r||(r=l()(["\n    &.pageTitle {\n        font-size: ",";\n        margin-bottom: 20px;\n    }\n"])),s.variables.fontSizeXXLarge),d=c.default.div.attrs({className:"pageSubtitle"})(a||(a=l()(["\n    &.pageSubtitle {\n        font-size: ",";\n        margin-bottom: 10px;\n    }\n"])),s.variables.fontSize);c.default.div(o||(o=l()(["\n    .table-caption-inner {\n        text-align: left;\n    }\n"])))},284:function(e,t,n){"use strict";var r=n(4);t.a=function(){return new URLSearchParams(Object(r.e)().search)}},285:function(e,t,n){"use strict";var r,a=n(28),o=n.n(a),i=n(29),l=n.n(i),c=n(119),s=n.n(c),u=n(31),d=n.n(u),p=n(32),f=n.n(p),h=n(20),m=n.n(h),v=n(251),g=n.n(v),b=n(13),y=n.n(b),O=n(0),E=n.n(O),j=n(3),k=n.n(j),w=n(30),C=n.n(w),R=n(25),S=n.n(R),x=n(1),N=n(67),M=n.n(N),_=n(6),P=n(256),T=n(288);function F(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=m()(e);if(t){var a=m()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return f()(this,n)}}var D=Object(x.default)(S.a)(r||(r=y()(["\n    width: 800px;\n"]))),V=function(e){d()(n,e);var t=F(n);function n(e){var r;return o()(this,n),r=t.call(this,e),g()(s()(r),"handleRequestClose",(function(){r.props.handleRequestClose()})),g()(s()(r),"handleSubmit",(function(){r.form.current.handleSubmit()&&r.handleRequestClose()})),g()(s()(r),"handleFormSubmit",(function(e,t){r.setState({isSubmititng:e}),t&&r.handleRequestClose()})),r.form=E.a.createRef(),r.state={isSubmititng:!1},e.mode===P.c?r.buttonText=Object(_._)("Add"):e.mode===P.a?r.buttonText=Object(_._)("Save"):e.mode===P.d?r.buttonText=Object(_._)("Update"):r.buttonText=Object(_._)("Submit"),r}return l()(n,[{key:"render",value:function(){return E.a.createElement(D,{open:this.props.open},E.a.createElement(S.a.Header,{title:this.props.formLabel,onRequestClose:this.handleRequestClose}),E.a.createElement(S.a.Body,null,E.a.createElement(T.a,{ref:this.form,page:this.props.page,serviceName:this.props.serviceName,mode:this.props.mode,stanzaName:this.props.stanzaName,handleFormSubmit:this.handleFormSubmit})),E.a.createElement(S.a.Footer,null,E.a.createElement(C.a,{appearance:"secondary",onClick:this.handleRequestClose,label:Object(_._)("Cancel"),disabled:this.state.isSubmititng}),E.a.createElement(C.a,{className:"saveBtn",appearance:"primary",label:this.state.isSubmititng?E.a.createElement(M.a,null):this.buttonText,onClick:this.handleSubmit,disabled:this.state.isSubmititng})))}}]),n}(O.Component);V.propTypes={page:k.a.string,open:k.a.bool,handleRequestClose:k.a.func,serviceName:k.a.string,mode:k.a.string,stanzaName:k.a.string,formLabel:k.a.string},t.a=V},288:function(e,t,n){"use strict";var r,a=n(416),o=n.n(a),i=n(417),l=n.n(i),c=n(28),s=n.n(c),u=n(29),d=n.n(u),p=n(119),f=n.n(p),h=n(31),m=n.n(h),v=n(32),g=n.n(v),b=n(20),y=n.n(b),O=n(251),E=n.n(O),j=n(13),k=n.n(j),w=n(421),C=n.n(w),R=n(0),S=n.n(R),x=n(3),N=n.n(x),M=n(281),_=n.n(M),P=n(462),T=n(423),F=n.n(T),D=n(83),V=n.n(D),q=n(1),A=n(425),z=n.n(A),I=n(120),B=n.n(I),L=q.default.span(r||(r=k()(["\n    color: ",";\n"])),(function(e){return e.color}));function H(e){return S.a.createElement("div",{"data-test":"msg-markdown"},(t=e.text,"link"===e.markdownType?t=S.a.createElement(B.a,{to:e.link},e.text):"hybrid"===e.markdownType?(t=function(e,t){for(var n=[],r=0;r<e.length;r+=1){var a=t(e[r]);n=n.concat(a)}return n}(t.split(e.token),(function(t){return[t,S.a.createElement(B.a,{key:t,to:e.link},e.linkText)]}))).pop():"text"===e.markdownType&&(t=S.a.createElement(L,{color:e.color},e.text)),t));var t}H.propTypes={text:N.a.string,link:N.a.string,color:N.a.string,markdownType:N.a.string,token:N.a.string,linkText:N.a.string};var U=S.a.memo(H);function $(e){var t=e.controlOptions,n=t.text,r=t.link;return S.a.createElement(B.a,{to:r,openInNewContext:!0},n)}$.propTypes={controlOptions:N.a.object};var W,K=$,Z=n(260),G=n.n(Z);function X(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y()(e);if(t){var a=y()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return g()(this,n)}}var J=Object(q.default)(G.a)(W||(W=k()(["\n    width: 320px !important;\n"]))),Q=function(e){m()(n,e);var t=X(n);function n(){var e;s()(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return e=t.call.apply(t,[this].concat(a)),E()(f()(e),"handleChange",(function(t,n){var r=n.value;e.props.handleChange(e.props.field,r)})),e}return d()(n,[{key:"render",value:function(){var e,t;return S.a.createElement(J,{inline:!0,error:this.props.error,placeholder:null===(e=this.props)||void 0===e||null===(t=e.controlOptions)||void 0===t?void 0:t.placeholder,className:this.props.field,disabled:this.props.disabled,value:null===this.props.value||void 0===this.props.value?"":this.props.value.toString(),onChange:this.handleChange,type:this.props.encrypted?"password":"text"})}}]),n}(R.Component);Q.propTypes={value:N.a.oneOfType([N.a.string,N.a.number]),handleChange:N.a.func.isRequired,field:N.a.string,error:N.a.bool,controlOptions:N.a.object,encrypted:N.a.bool,disabled:N.a.bool};var Y,ee,te=Q,ne=n(63),re=n.n(ne),ae=n(321),oe=n.n(ae),ie=n(322),le=n.n(ie),ce=n(445),se=n.n(ce),ue=n(30),de=n.n(ue),pe=n(139),fe=n.n(pe),he=n(6),me=n(74),ve=n.n(me),ge=n(257),be=n(40),ye=Object(q.default)(le.a)(Y||(Y=k()(["\n    width: 320px !important;\n"]))),Oe=q.default.div(ee||(ee=k()(["\n    div:first-child {\n        width: 320px !important;\n    }\n"])));function Ee(e){var t=e.field,n=e.disabled,r=void 0!==n&&n,a=e.error,o=void 0!==a&&a,i=e.controlOptions,l=e.dependencyValues,c=oe()(e,["field","disabled","error","controlOptions","dependencyValues"]),s=i.endpointUrl,u=i.denyList,d=i.allowList,p=i.placeholder,f=void 0===p?Object(he._)("Select a value"):p,h=i.dependencies,m=i.createSearchChoice,v=i.referenceName,g=i.disableSearch,b=i.labelField,y=i.autoCompleteFields,O=i.hideClearBtn;function E(e,n){c.handleChange(t,n.value)}var j=m?se.a.Option:le.a.Option,k=m?se.a.Heading:le.a.Heading;function w(e){var t=[];return e.forEach((function(e){e.value&&e.label&&t.push(S.a.createElement(j,{label:e.label,value:e.value,key:e.value})),e.children&&e.label&&(t.push(S.a.createElement(k,{key:e.label},e.label)),e.children.forEach((function(e){t.push(S.a.createElement(j,{label:e.label,value:e.value,key:e.value}))})))})),t}var C=Object(R.useState)(!1),x=re()(C,2),N=x[0],M=x[1],_=Object(R.useState)(null),P=re()(_,2),T=P[0],F=P[1];Object(R.useEffect)((function(){if(s||v||!y){var e=!0,t=ve.a.CancelToken.source(),n={CancelToken:t.token,handleError:!0};return v?n.serviceName=v:s&&(n.endpointUrl=s),l&&(n.params=l),h&&!l||(M(!0),Object(ge.a)(n).then((function(t){e&&(F(w(Object(be.a)(t.data.entry,b,d,u))),M(!1))})).catch((function(){e&&M(!1)}))),function(){t.cancel("Operation canceled."),e=!1}}F(w(y))}),[l]);var D=!!N||r,V=N?Object(he._)("Loading"):f,q=!D&&!O;return S.a.createElement(S.a.Fragment,null,m?S.a.createElement(Oe,{className:"dropdownBox"},S.a.createElement(se.a,{value:null===e.value?"":e.value,name:t,error:o,placeholder:V,disabled:D,onChange:E,inline:!0},T&&T.length>0&&T)):S.a.createElement(S.a.Fragment,null,S.a.createElement(ye,{className:"dropdownBox","data-test-loading":N,value:e.value,name:t,error:o,placeholder:V,disabled:D,onChange:E,filter:!g,inline:!0},T&&T.length>0&&T),q?S.a.createElement(de.a,{"data-test":"clear",appearance:"secondary",icon:S.a.createElement(fe.a,null),onClick:function(){return c.handleChange(t,"")}}):null))}Ee.propTypes={disabled:N.a.bool,value:N.a.string,error:N.a.bool,handleChange:N.a.func.isRequired,field:N.a.string,dependencyValues:N.a.object,controlOptions:N.a.shape({autoCompleteFields:N.a.array,endpointUrl:N.a.string,denyList:N.a.string,allowList:N.a.string,placeholder:N.a.string,dependencies:N.a.array,createSearchChoice:N.a.bool,referenceName:N.a.string,disableSearch:N.a.bool,labelField:N.a.string,hideClearBtn:N.a.bool})};var je,ke=Ee,we=n(446),Ce=n.n(we),Re=n(7),Se=Object(q.default)(Ce.a)(je||(je=k()(["\n    width: 320px !important;\n"])));function xe(e){var t=e.field,n=e.disabled,r=void 0!==n&&n,a=e.error,o=void 0!==a&&a,i=e.value,l=e.controlOptions,c=e.dependencyValues,s=oe()(e,["field","disabled","error","value","controlOptions","dependencyValues"]),u=l.endpointUrl,d=l.denyList,p=l.allowList,f=l.items,h=l.dependencies,m=l.referenceName,v=l.placeholder,g=l.createSearchChoice,b=l.labelField,y=l.delimiter,O=void 0===y?",":y;function E(e){return e.map((function(e){return S.a.createElement(Ce.a.Option,{label:e.label,value:e.value,key:e.value})}))}var j=Object(R.useState)(!1),k=re()(j,2),w=k[0],C=k[1],x=Object(R.useState)(null),N=re()(x,2),M=N[0],_=N[1];Object(R.useEffect)((function(){if(u||!f){var e=!0,t=ve.a.CancelToken.source(),n={CancelToken:t.token,handleError:!0};return m?n.serviceName=m:u&&(n.endpointUrl=u),c&&(n.params=c),h&&!c||(C(!0),Object(ge.a)(n).then((function(t){e&&(_(E(Object(be.a)(t.data.entry,b,p,d))),C(!1))})).catch((function(){e&&C(!1)}))),function(){t.cancel("Operation canceled."),e=!1}}_(E(f))}),[c]);var P=!!w||r,T=w?Object(Re.a)(115):v,F=i?i.split(O):[];return S.a.createElement(Se,{values:F,error:o,name:t,placeholder:T,disabled:P,allowNewValues:g,onChange:function(e,n){var r=n.values;s.handleChange(t,r.join(O))},inline:!0},M&&M.length>0&&M)}xe.propTypes={disabled:N.a.bool,value:N.a.string,error:N.a.bool,handleChange:N.a.func.isRequired,field:N.a.string,dependencyValues:N.a.object,controlOptions:N.a.shape({delimiter:N.a.string,placeholder:N.a.string,createSearchChoice:N.a.bool,referenceName:N.a.string,dependencies:N.a.array,endpointUrl:N.a.string,denyList:N.a.string,allowList:N.a.string,labelField:N.a.string,items:N.a.arrayOf(N.a.shape({label:N.a.string.isRequired,value:N.a.string.isRequired}))})};var Ne=xe,Me=n(263),_e=n.n(Me);function Pe(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y()(e);if(t){var a=y()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return g()(this,n)}}var Te=function(e){m()(n,e);var t=Pe(n);function n(){var e;s()(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return e=t.call.apply(t,[this].concat(a)),E()(f()(e),"handleChange",(function(){e.props.value&&!Object(be.e)(e.props.value)?e.props.handleChange(e.props.field,0):e.props.handleChange(e.props.field,1)})),e}return d()(n,[{key:"render",value:function(){return S.a.createElement(_e.a,{key:this.props.field,value:this.props.field,onClick:this.handleChange,disabled:this.props.disabled,selected:!(!this.props.value||Object(be.e)(this.props.value)),appearance:"checkbox"})}}]),n}(R.Component);Te.propTypes={value:N.a.oneOfType([N.a.bool,N.a.number,N.a.string]),handleChange:N.a.func.isRequired,field:N.a.string,disabled:N.a.bool};var Fe,De=Te,Ve=n(449),qe=n.n(Ve);function Ae(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y()(e);if(t){var a=y()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return g()(this,n)}}var ze=Object(q.default)(qe.a)(Fe||(Fe=k()(["\n    width: 320px;\n"]))),Ie=function(e){m()(n,e);var t=Ae(n);function n(){var e;s()(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return e=t.call.apply(t,[this].concat(a)),E()(f()(e),"handleChange",(function(t,n){var r=n.value;e.props.handleChange(e.props.field,r)})),e}return d()(n,[{key:"render",value:function(){return S.a.createElement(ze,{inline:!0,onChange:this.handleChange,value:this.props.value,key:this.props.field},this.props.controlOptions.items.map((function(e){return S.a.createElement(qe.a.Option,{key:e.value,value:e.value,label:e.label})})))}}]),n}(R.Component);Ie.propTypes={value:N.a.string,handleChange:N.a.func.isRequired,field:N.a.string,controlOptions:N.a.object};var Be=Ie,Le=n(450),He=n.n(Le);function Ue(e){var t=e.controlOptions.defaultValue;return S.a.createElement(He.a,null,t)}Ue.propTypes={controlOptions:N.a.object};var $e=Ue,We=n(34);function Ke(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y()(e);if(t){var a=y()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return g()(this,n)}}var Ze=function(e){m()(n,e);var t=Ke(n);function n(e){var r;return s()(this,n),r=t.call(this,e),E()(f()(r),"loadCustomControl",(function(e,t,n){return new Promise((function(r){"external"===t?import("".concat(Object(We.a)(),"/custom/").concat(e,".js")).then((function(e){var t=e.default;r(t)})):require(["app/".concat(n,"/js/build/custom/").concat(e)],(function(e){r(e)}))}))})),E()(f()(r),"setValue",(function(e){r.props.handleChange(r.props.field,e)})),r.state={loading:!0},r.shouldRender=!0,r}return d()(n,[{key:"componentDidMount",value:function(){var e=this,t=Object(be.d)(),n=t.meta.name;this.loadCustomControl(this.props.controlOptions.src,this.props.controlOptions.type,n).then((function(n){var r=new n(t,e.el,e.props.data,e.setValue,e.props.utilCustomFunctions);r.render(),"function"==typeof r.validation&&e.props.addCustomValidator(e.props.field,r.validation),e.setState({loading:!1})}))}},{key:"shouldComponentUpdate",value:function(e,t){return!(t.loading||!this.shouldRender)&&(this.shouldRender=!1,!0)}},{key:"render",value:function(){var e=this;return S.a.createElement(S.a.Fragment,null,this.state.loading&&Object(he._)("Loading..."),S.a.createElement("span",{ref:function(t){e.el=t},style:{visibility:this.state.loading?"hidden":"visible"}}))}}]),n}(R.Component);Ze.propTypes={data:N.a.object,field:N.a.string,handleChange:N.a.func,controlOptions:N.a.object,addCustomValidator:N.a.func,utilCustomFunctions:N.a.object};var Ge,Xe,Je={text:te,singleSelect:ke,helpLink:K,multipleSelect:Ne,checkbox:De,radio:Be,placeholder:$e,custom:Ze};function Qe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ye(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Qe(Object(n),!0).forEach((function(t){E()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Qe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function et(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y()(e);if(t){var a=y()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return g()(this,n)}}var tt=q.default.div(Ge||(Ge=k()(["\n    margin-left: 30px;\n"]))),nt=Object(q.default)(z.a).attrs((function(e){return{"data-name":e.dataName}}))(Xe||(Xe=k()(["\n    width: 100%;\n    max-width: 100%;\n\n    > * {\n        &:first-child {\n            width: 240px !important;\n        }\n        &:nth-child(3) {\n            margin-left: 270px !important;\n            width: 320px;\n        }\n    }\n"]))),rt=function(e){m()(n,e);var t=et(n);function n(e){var r,a;return s()(this,n),a=t.call(this,e),E()(f()(a),"isString",(function(e){return!!("string"==typeof e||e instanceof String)})),a.controlType=a.isString(e.entity.type)?Je[e.entity.type]:null,a.options=a.props.entity.options,a.props.entity.required||Object.prototype.hasOwnProperty.call(a.props.entity,"oauth_field")||null!==(r=a.options)&&void 0!==r&&r.placeholder||(a.options=Ye(Ye({},a.options),{},{placeholder:"optional"})),a}return d()(n,[{key:"render",value:function(){var e,t=this.props.entity,n=t.field,r=t.type,a=t.label,o=t.tooltip,i=t.help,l=t.encrypted,c=void 0!==l&&l,s=this.props.utilityFuncts,u=s.handleChange,d=s.addCustomValidator,p=s.utilCustomFunctions,f=this.props.markdownMessage||{},h=f.text,m=f.link,v=f.color,g=f.markdownType,b=f.token,y=f.linkText;if("custom"===this.props.entity.type){var O={value:this.props.value,mode:this.props.mode,serviceName:this.props.serviceName};e=this.controlType?S.a.createElement(this.controlType,{data:O,field:n,handleChange:u,addCustomValidator:d,utilCustomFunctions:p,controlOptions:this.options}):"No View Found for ".concat(r," type")}else e=this.controlType?S.a.createElement(this.controlType,{handleChange:u,value:this.props.value,field:n,controlOptions:this.options,error:this.props.error,disabled:this.props.disabled,encrypted:c,dependencyValues:this.props.dependencyValues}):"No View Found for ".concat(r," type");var E=S.a.createElement(S.a.Fragment,null,S.a.createElement(U,{text:h||"",link:m||"",color:v||"",markdownType:g||"",token:b||"",linkText:y||""}),i);return this.props.display&&S.a.createElement(nt,{label:a,help:E,tooltip:o,error:this.props.error,dataName:n},S.a.createElement(tt,null,e))}}]),n}(S.a.PureComponent);rt.propTypes={mode:N.a.string,utilityFuncts:N.a.object,value:N.a.any,display:N.a.bool,error:N.a.bool,entity:N.a.object,disabled:N.a.bool,markdownMessage:N.a.object,serviceName:N.a.string,dependencyValues:N.a.object};var at=rt,ot={url:{regex:/^(?:(?:https?|ftp|opc\.tcp):\/\/)?(?:\S+(?::\S*)?@)?(?:(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]+-?_?)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,}))?)(?::\d{2,5})?(?:\/[^\s]*)?$/,inputValueType:Object(Re.a)(111)},email:{regex:/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,inputValueType:Object(Re.a)(112)},ipv4:{regex:/^(?:(?:[0-1]?\d{1,2}|2[0-4]\d|25[0-5])(?:\.|$)){4}$/,inputValueType:Object(Re.a)(113)},date:{regex:/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,inputValueType:Object(Re.a)(114)}},it=n(101);var lt,ct,st=function(){function e(t){s()(this,e),E()(this,"checkIsFieldHasInput",(function(e){return void 0!==e&&""!==e&&null!==e})),this.entities=t,this.isName=t.find((function(e){return"name"===e.field}))}return d()(e,[{key:"RequiredValidator",value:function(e,t,n){return!this.checkIsFieldHasInput(n)&&{errorField:e,errorMsg:Object(Re.a)(6,[t])}}},{key:"StringValidator",value:function(e,t,n,r){var a=Object(it.d)(n.minLength,n.maxLength).error;return a?{errorField:e,errorMsg:a}:this.checkIsFieldHasInput(r)&&r.length>n.maxLength?{errorField:e,errorMsg:n.errorMsg?n.errorMsg:Object(Re.a)(18,[t,n.maxLength])}:!!(this.checkIsFieldHasInput(r)&&r.length<n.minLength)&&{errorField:e,errorMsg:n.errorMsg?n.errorMsg:Object(Re.a)(17,[t,n.minLength])}}},{key:"RegexValidator",value:function(e,t,n,r){var a=Object(it.c)(n.pattern),o=a.error,i=a.result;return o?{errorField:e,errorMsg:o}:!(!this.checkIsFieldHasInput(r)||i.test(r))&&{errorField:e,errorMsg:n.errorMsg?n.errorMsg:Object(Re.a)(15,[t,n.pattern])}}},{key:"PreDefinedRegexValidator",value:function(e,t,n,r,a,o){var i=Object(it.c)(a),l=i.error,c=i.result;return l?{errorField:e,errorMsg:l}:!(!this.checkIsFieldHasInput(r)||c.test(r))&&{errorField:e,errorMsg:n.errorMsg?n.errorMsg:Object(Re.a)(19,[t,o])}}},{key:"NumberValidator",value:function(e,t,n,r){var a=Object(it.b)(n.range).error;if(a)return{errorField:e,errorMsg:a};var o=Number(r);return Number.isNaN(o)?{errorField:e,errorMsg:n.errorMsg?n.errorMsg:Object(Re.a)(16,[t])}:!!(this.checkIsFieldHasInput(r)&&o>n.range[1]||o<n.range[0])&&{errorField:e,errorMsg:n.errorMsg?n.errorMsg:Object(Re.a)(8,[t,n.range[0],n.range[1]])}}},{key:"doValidation",value:function(t){if(this.isName){var n=t.name,r=this.isName.label;if(void 0===n||""===n||null==n)return{errorField:"name",errorMsg:Object(Re.a)(0,[r])};if(!("string"==typeof n||n instanceof String))return{errorField:"name",errorMsg:Object(Re.a)(1,[r])};if(n.startsWith("_")||"."===n||".."===n||"default"===n.toLowerCase())return{errorField:"name",errorMsg:Object(Re.a)(3,[r])};if(["*","\\","[","]","(",")","?",":"].some((function(e){return n.indexOf(e)>-1})))return{errorField:"name",errorMsg:Object(Re.a)(3,[r])};if(n.length>=1024)return{errorField:"name",errorMsg:Object(Re.a)(22,[r])}}var a,o,i;for(o=0;o<this.entities.length;o+=1){if(!0===this.entities[o].required&&(a=this.RequiredValidator(this.entities[o].field,this.entities[o].label,t[this.entities[o].field])))return a;if(""!==t[this.entities[o].field]&&null!==t[this.entities[o].field]&&this.entities[o].validators)for(i=0;i<this.entities[o].validators.length;i+=1)switch(this.entities[o].validators[i].type){case"string":if(a=this.StringValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field]))return a;break;case"regex":if(a=this.RegexValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field]))return a;break;case"number":if(a=this.NumberValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field]))return a;break;case"url":if(a=this.PreDefinedRegexValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field],ot.url.regex,ot.url.inputValueType))return a;break;case"date":if(a=this.PreDefinedRegexValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field],ot.date.regex,ot.date.inputValueType))return a;break;case"email":if(a=this.PreDefinedRegexValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field],ot.email.regex,ot.email.inputValueType))return a;break;case"ipv4":if(a=this.PreDefinedRegexValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field],ot.ipv4.regex,ot.ipv4.inputValueType))return a;break;case"custom":if(a=e.CustomValidator(this.entities[o].validators[i].validatorFunc,this.entities[o].field,t[this.entities[o].field]))return a}}return!1}}],[{key:"CustomValidator",value:function(e,t,n){var r=e(t,n);return"string"==typeof r&&{errorField:t,errorMsg:r}}}]),e}(),ut=n(256),dt=n(43),pt=n(255);function ft(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ht(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ft(Object(n),!0).forEach((function(t){E()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ft(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function mt(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y()(e);if(t){var a=y()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return g()(this,n)}}var vt=Object(q.default)(F.a)(lt||(lt=k()(["\n    span {\n        button {\n            background-color: transparent;\n            font-size: 16px;\n            margin: 10px 0;\n\n            &:hover:not([disabled]),\n            &:focus:not([disabled]),\n            &:active:not([disabled]) {\n                background-color: transparent;\n                box-shadow: none;\n            }\n        }\n    }\n\n    .collapsible-element {\n        padding-top: 15px;\n    }\n"]))),gt=q.default.div(ct||(ct=k()(["\n    padding: 6px 10px;\n    background-color: #f2f4f5;\n"]))),bt=function(e){m()(n,e);var t=mt(n);function n(e,r){var a;s()(this,n),a=t.call(this,e),E()(f()(a),"updateEntitiesForGroup",(function(e){a.groups&&a.groups.length&&a.groups.forEach((function(t){var n;t&&null!==(n=t.fields)&&void 0!==n&&n.length&&t.fields.forEach((function(t){var n=e.entity.findIndex((function(e){return e.field===t}));if(-1!==n){var r=JSON.parse(JSON.stringify(e.entity[n]));r.isGrouping=!0,a.entities.splice(n,1,r)}}))}))})),E()(f()(a),"handleSubmit",(function(){if((a.clearErrorMsg(),a.props.handleFormSubmit(!0,!1),a.datadict={},Object.keys(a.state.data).forEach((function(e){a.datadict[e]=a.state.data[e].value})),a.hook&&"function"==typeof a.hook.onSave)&&!a.hook.onSave(a.datadict))return void a.props.handleFormSubmit(!1,!1);var e=function(){var e;if((Object.keys(a.state.data).forEach((function(e){a.datadict[e]=a.state.data[e].value})),[ut.c,ut.a].includes(a.props.mode))&&Boolean(Object.values(a.context.rowData).find((function(e){return Object.keys(e).find((function(e){return e===a.datadict.name}))})))){var t=a.entities.findIndex((function(e){return"name"===e.field}));return a.setErrorFieldMsg("name",Object(Re.a)(2,[a.entities[t].label,a.datadict.name])),void a.props.handleFormSubmit(!1,!1)}if(a.isOAuth){var n=[];Object.keys(a.authMap).forEach((function(e){e!==a.datadict.auth_type&&a.isAuthVal||(n=[].concat(l()(n),l()(a.authMap[e])))})),e=a.entities.map((function(e){return n.includes(e.field)?ht({required:!0},e):e}))}else e=a.entities;var r=new st(e).doValidation(a.datadict);if(r?a.setErrorFieldMsg(r.errorField,r.errorMsg):a.options&&a.options.saveValidator&&(r=function(e,t){var n=Object(it.a)(e),r=n.error,a=n.result;if(r)return{errorMsg:r};var o=a(t);return"string"==typeof o?{errorMsg:o}:void 0}(a.options.saveValidator,a.datadict))&&a.setErrorMsg(r.errorMsg),r)a.props.handleFormSubmit(!1,!1);else if(a.isOAuth&&(a.isSingleOauth||a.isAuthVal&&"oauth"===a.datadict.auth_type)){var i="?response_type=code&client_id=".concat(a.datadict.client_id,"&redirect_uri=").concat(a.datadict.redirect_url),c=null!=a.isoauthState&&a.isoauthState;"true"!==c&&!0!==c||(a.state_enabled=!0,a.oauth_state=Object(P.a)().replace(/-/g,""),i="".concat(i,"&state=").concat(a.oauth_state));var s="https://".concat(a.datadict.endpoint).concat(a.oauthConf.authCodeEndpoint).concat(i);o()(C.a.mark((function e(){return C.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a.isCalled=!1,a.isError=!1,a.isResponse=!1,a.childWin=window.open(s,"".concat(a.appName," OAuth"),"width=".concat(a.oauthConf.popupWidth,", height=").concat(a.oauthConf.popupHeight)),window.getMessage=function(e){a.isCalled=!0,a.handleOauthToken(e)},e.next=7,a.waitForAuthentication(a.oauthConf.authTimeout);case 7:if(a.isCalled||!a.childWin.closed){e.next=11;break}return a.setErrorMsg("Authentication process interrupted. Please try again."),a.props.handleFormSubmit(!1,!1),e.abrupt("return",!1);case 11:if(a.isCalled){e.next=15;break}return a.setErrorMsg("Request time out while authenticating. Please try again."),a.props.handleFormSubmit(!1,!1),e.abrupt("return",!1);case 15:return e.next=17,a.waitForBackendResponse(30);case 17:if(a.isResponse||a.isError){e.next=22;break}return a.isError=!0,a.setErrorMsg("Request time out while getting accesstoken. Please try again."),a.props.handleFormSubmit(!1,!1),e.abrupt("return",!1);case 22:return e.abrupt("return",!0);case 23:case"end":return e.stop()}}),e)})))().then((function(){a.isError?a.props.handleFormSubmit(!1,!1):a.saveData()}))}else a.saveData()};a.hook&&"function"==typeof a.hook.onSave&&void 0!==a.onSavePromise?a.onSavePromise.then((function(){e()})):e()})),E()(f()(a),"saveData",(function(){var e=new URLSearchParams;Object.keys(a.datadict).forEach((function(t){null!=a.datadict[t]&&e.append(t,a.datadict[t])})),a.isAuthVal&&Object.keys(a.authMap).forEach((function(t){a.datadict.auth_type!==t&&a.authMap[t].forEach((function(t){e.set(t,"")}))})),a.isOAuth&&e.delete("redirect_url"),a.props.mode===ut.d&&e.delete("name"),Object(ge.a)({serviceName:a.endpoint,body:e,customHeaders:{"Content-Type":"application/x-www-form-urlencoded"},method:"post",handleError:!1}).then((function(e){var t,n=null==e||null===(t=e.data)||void 0===t?void 0:t.entry[0];if(a.props.mode!==ut.b){var r={};r[n.name]=ht(ht(ht({},a.datadict),n.content),{},{id:n.id,name:n.name,serviceName:a.props.serviceName}),a.context.setRowData(_()(a.context.rowData,E()({},a.props.serviceName,{$merge:r})))}a.hook&&"function"==typeof a.hook.onSaveSuccess&&a.hook.onSaveSuccess(),a.props.mode===ut.d?Object(be.c)('Updated "'.concat(n.name,'"'),"success"):a.props.mode===ut.b?Object(be.c)('Updated "'.concat(a.mode_config_title?a.mode_config_title:n.name,'"'),"success"):Object(be.c)('Created "'.concat(n.name,'"'),"success"),a.props.handleFormSubmit(!1,!0)})).catch((function(e){var t=Object(Re.b)(e);a.setState({errorMsg:t}),a.hook&&"function"==typeof a.hook.onSaveFail&&a.hook.onSaveFail(),a.props.handleFormSubmit(!1,!1)}))})),E()(f()(a),"handleChange",(function(e,t){var n={};if("auth_type"===e&&Object.keys(a.authMap).forEach((function(e){e===t?a.authMap[e].forEach((function(e){n[e]={display:{$set:!0}}})):a.authMap[e].forEach((function(e){n[e]={display:{$set:!1}}}))})),a.dependencyMap.has(e)){var r=a.dependencyMap.get(e);Object.keys(r).forEach((function(o){var i={},l=!0;r[o].forEach((function(n){var r=!!a.entities.find((function(e){return e.field===n})).required,o=n===e?t:a.state.data[n].value;r&&!o?(l=!1,i[n]=null):i[n]=o})),l&&(n[o]={dependencyValues:{$set:i},value:{$set:null}})}))}n[e]={value:{$set:t}};var o=_()(a.state,{data:n}),i=a.clearAllErrorMsg(o);a.setState(i),a.hookDeferred&&a.hookDeferred.then((function(){"function"==typeof a.hook.onChange&&a.hook.onChange(e,t,i)}))})),E()(f()(a),"addCustomValidator",(function(e,t){var n=a.entities.findIndex((function(t){return t.field===e})),r=[{type:"custom",validatorFunc:t}];a.entities[n].validators=r})),E()(f()(a),"setErrorFieldMsg",(function(e,t){a.setState((function(n){var r=_()(n,{data:E()({},e,{error:{$set:!0}})});return r.errorMsg=t,r}))})),E()(f()(a),"setErrorField",(function(e){a.setState((function(t){return _()(t,{data:E()({},e,{error:{$set:!0}})})}))})),E()(f()(a),"clearErrorMsg",(function(){a.state.errorMsg&&a.setState((function(e){return ht(ht({},e),{},{errorMsg:""})}))})),E()(f()(a),"setErrorMsg",(function(e){a.setState((function(t){return ht(ht({},t),{},{errorMsg:e})}))})),E()(f()(a),"clearAllErrorMsg",(function(e){var t=ht({},e||a.state);t.errorMsg="",t.warningMsg="";var n=ht({},e?e.data:a.state.data),r={};return Object.keys(n).forEach((function(e){n[e].error?r[e]=ht(ht({},n[e]),{},{error:!1}):r[e]=n[e]})),t.data=r,e?t:null})),E()(f()(a),"generateErrorMessage",(function(){return a.state.errorMsg?S.a.createElement(V.a,{appearance:"fill",type:"error"},a.state.errorMsg):null})),E()(f()(a),"generateWarningMessage",(function(){return a.state.warningMsg?S.a.createElement(V.a,{appearance:"fill",type:"warning"},a.state.warningMsg):null})),E()(f()(a),"loadHook",(function(e,t,n){return new Promise((function(r){"external"===t?import("".concat(Object(We.a)(),"/custom/").concat(e,".js")).then((function(e){var t=e.default;a.hook=new t(n,a.props.serviceName,a.state,a.props.mode,a.util),r(t)})):require(["app/".concat(a.appName,"/js/build/custom/").concat(e)],(function(e){a.hook=new e(n,a.props.serviceName,a.state,a.props.mode,a.util),r(e)}))}))})),E()(f()(a),"handleOauthToken",(function(e){if(!e||e&&e.error||void 0===e.code)return a.setErrorMsg("Error occurred while trying to authenticate. Please try Again."),a.isError=!0,a.isResponse=!0,!1;var t=e.state;if(!0===a.state_enabled&&a.oauth_state!==t)return a.setErrorMsg("Response not received from the expected sender. Please try again."),a.isError=!0,a.isResponse=!0,!1;var n=decodeURIComponent(e.code),r={method:"POST",url:"https://".concat(a.datadict.endpoint).concat(a.oauthConf.accessTokenEndpoint),grant_type:"authorization_code",client_id:a.datadict.client_id,client_secret:a.datadict.client_secret,code:n,redirect_uri:a.datadict.redirect_url},o=new URLSearchParams;Object.keys(r).forEach((function(e){o.append(e,r[e])}));var i="".concat(a.appName,"_oauth/oauth");Object(ge.a)({endpointUrl:i,body:o,customHeaders:{"Content-Type":"application/x-www-form-urlencoded"},method:"post",handleError:!1}).then((function(e){if(void 0===e.data.entry[0].content.error){var t=e.data.entry[0].content.access_token,n=e.data.entry[0].content.instance_url,r=e.data.entry[0].content.refresh_token;return a.datadict.instance_url=n,a.datadict.refresh_token=r,a.datadict.access_token=t,a.isResponse=!0,!0}return a.setErrorMsg(e.data.entry[0].content.error),a.isError=!0,a.isResponse=!0,!1})).catch((function(){return a.setErrorMsg("Error occurred while trying to authenticate. Please try Again."),a.isError=!0,a.isResponse=!0,!1}))})),E()(f()(a),"waitForAuthentication",function(){var e=o()(C.a.mark((function e(t){return C.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t-=1,!0!==a.isCalled){e.next=3;break}return e.abrupt("return",!0);case 3:if(0!==t&&!a.childWin.closed){e.next=6;break}return a.isError=!0,e.abrupt("return",!1);case 6:return e.next=8,a.sleep(a.waitForAuthentication,t);case 8:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),E()(f()(a),"waitForBackendResponse",function(){var e=o()(C.a.mark((function e(t){return C.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t+=1,!0!==a.isResponse){e.next=3;break}return e.abrupt("return",!0);case 3:if(60!==t){e.next=5;break}return e.abrupt("return",!1);case 5:return e.next=7,a.sleep(a.waitForBackendResponse,t);case 7:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),E()(f()(a),"sleep",function(){var e=o()(C.a.mark((function e(t){var n,r,o,i=arguments;return C.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,a.timeout(1e3);case 2:for(n=i.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=i[o];return e.abrupt("return",t.apply(void 0,r));case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),E()(f()(a),"timeout",(function(e){return new Promise((function(t){return setTimeout(t,e)}))})),E()(f()(a),"renderGroupElements",(function(){var e=null;return a.groups&&a.groups.length&&(e=a.groups.map((function(e){var t,n=(null===(t=e.fields)||void 0===t?void 0:t.length)&&e.fields.map((function(e){return a.entities.map((function(t){if(t.field===e){var n=a.state.data[t.field];return S.a.createElement(at,{key:t.field,utilityFuncts:a.utilControlWrapper,value:n.value,display:n.display,error:n.error,entity:t,serviceName:a.props.serviceName,mode:a.props.mode,disabled:n.disabled,markdownMessage:n.markdownMessage,dependencyValues:n.dependencyValues||null})}return null}))}));return e.options.isExpandable?S.a.createElement(vt,{title:e.label},S.a.createElement("div",{className:"collapsible-element"},n)):S.a.createElement(S.a.Fragment,null,S.a.createElement(gt,null,e.label),S.a.createElement("div",null,n))}))),e})),a.flag=!0,a.state={},a.currentInput={};var i=Object(be.d)();a.appName=i.meta.name,a.endpoint=e.mode===ut.d||e.mode===ut.b?"".concat(a.props.serviceName,"/").concat(encodeURIComponent(a.props.stanzaName)):"".concat(a.props.serviceName),a.util={setState:function(e){a.onSavePromise=new Promise((function(t){a.setState((function(t){return e(t)}),t)}))},setErrorFieldMsg:a.setErrorFieldMsg,clearAllErrorMsg:a.clearAllErrorMsg,setErrorMsg:a.setErrorMsg},a.utilControlWrapper={handleChange:a.handleChange,addCustomValidator:a.addCustomValidator,utilCustomFunctions:a.util},e.page===dt.b?i.pages.inputs.services.forEach((function(t){t.name===e.serviceName&&(a.groups=t.groups,a.entities=t.entity,a.updateEntitiesForGroup(t),a.options=t.options,t.hook&&(a.hookDeferred=a.loadHook(t.hook.src,t.hook.type,i)),e.mode!==ut.d&&e.mode!==ut.a||(a.currentInput=r.rowData[e.serviceName][e.stanzaName]))})):i.pages.configuration.tabs.forEach((function(t){(t.table?t.name===e.serviceName:t.name===e.stanzaName)&&(a.entities=t.entity,a.options=t.options,t.hook&&(a.hookDeferred=a.loadHook(t.hook.src,t.hook.type,i)),!t.table||e.mode!==ut.d&&e.mode!==ut.a?e.mode===ut.b?(a.currentInput=e.currentServiceState,a.mode_config_title=t.title):a.currentInput=r.rowData[e.serviceName]:a.currentInput=r.rowData[e.serviceName][e.stanzaName])})),a.dependencyMap=new Map,a.isOAuth=!1,a.isAuthVal=!1,a.authMap={};var c={},u=[];a.entities.forEach((function(t){if("oauth"===t.type){if(a.isOAuth=!0,e.page===dt.a&&"account"===e.serviceName){var n,r,o,i=null==t||null===(n=t.options)||void 0===n?void 0:n.auth_type;if(a.isoauthState=void 0!==(null==t||null===(r=t.options)||void 0===r?void 0:r.oauth_state_enabled)?null==t||null===(o=t.options)||void 0===o?void 0:o.oauth_state_enabled:null,i.length>1){a.isAuthVal=!0;var l={};l.value=void 0!==a.currentInput.auth_type?a.currentInput.auth_type:i[0],l.display=!0,l.error=!1,l.disabled=!1,c.auth_type=l;var s={field:"auth_type",type:"singleSelect",label:"Auth Type"},d={basic:"Basic Authentication",oauth:"OAuth 2.0 Authentication"};s.options={},s.options.hideClearBtn=!0,s.options.autoCompleteFields=i.map((function(e){return{label:d[e],value:e}})),u.push(s)}else a.isSingleOauth=i.includes("oauth");if(i.forEach((function(n){var r=[],o=null==t?void 0:t.options[n];o&&(o.forEach((function(t){var o={};if(e.mode===ut.c)o.value=void 0!==(null==t?void 0:t.defaultValue)?t.defaultValue:null;else{var i=void 0!==(null==t?void 0:t.encrypted)&&(null==t?void 0:t.encrypted);o.value=i?"":a.currentInput[t.field]}o.display=void 0===c.auth_type||n===c.auth_type.value,o.error=!1,o.disabled=!1,c[t.field]=o,t.type=void 0!==(null==t?void 0:t.type)?t.type:"text","redirect_url"===t.field&&(o.value=window.location.href.split("?")[0].replace("configuration","".concat(a.appName.toLowerCase(),"_redirect")),o.disabled=!0),u.push(t),r.push(t.field)})),a.authMap[n]=r)})),i.includes("oauth")){var p={};p.popupWidth=t.options.oauth_popup_width?t.options.oauth_popup_width:600,p.popupHeight=t.options.oauth_popup_height?t.options.oauth_popup_height:600,p.authTimeout=t.options.oauth_timeout?t.options.oauth_timeout:180,p.authCodeEndpoint=t.options.auth_code_endpoint?t.options.auth_code_endpoint:null,p.accessTokenEndpoint=t.options.access_token_endpoint?t.options.access_token_endpoint:null,a.oauthConf=p}}}else{var f,h,m={};if(t.encrypted=void 0!==t.encrypted&&t.encrypted,e.mode===ut.c)m.value=void 0!==t.defaultValue?t.defaultValue:null,m.display=void 0===(null==t||null===(h=t.options)||void 0===h?void 0:h.display)||t.options.display,m.error=!1,m.disabled=!1,c[t.field]=m;else if(e.mode===ut.d){var v,g;m.value=void 0!==a.currentInput[t.field]?a.currentInput[t.field]:null,m.value=t.encrypted?"":m.value,m.display=void 0===(null==t||null===(v=t.options)||void 0===v?void 0:v.display)||t.options.display,m.error=!1,m.disabled=!1,"name"===t.field?m.disabled=!0:void 0!==(null==t||null===(g=t.options)||void 0===g?void 0:g.disableonEdit)&&(m.disabled=t.options.disableonEdit),c[t.field]=m}else if(e.mode===ut.a){var b;m.value="name"===t.field||t.encrypted?"":a.currentInput[t.field],m.display=void 0===(null==t||null===(b=t.options)||void 0===b?void 0:b.display)||t.options.display,m.error=!1,m.disabled=!1,c[t.field]=m}else{if(e.mode!==ut.b)throw new Error("Invalid mode :",e.mode);var y,O;t.defaultValue=void 0!==t.defaultValue?t.defaultValue:null,m.value=void 0!==a.currentInput[t.field]?a.currentInput[t.field]:t.defaultValue,m.value=t.encrypted?"":m.value,m.display=void 0===(null==t||null===(y=t.options)||void 0===y?void 0:y.display)||t.options.display,m.error=!1,m.disabled=!1,"name"===t.field?m.disabled=!0:void 0!==(null==t||null===(O=t.options)||void 0===O?void 0:O.disableonEdit)&&(m.disabled=t.options.disableonEdit),c[t.field]=m}var j=null===(f=t.options)||void 0===f?void 0:f.dependencies;j&&j.forEach((function(e){var n=a.dependencyMap.get(e);n?n[t.field]=j:a.dependencyMap.set(e,E()({},t.field,j))})),u.push(t)}})),a.entities=u;var d={};a.dependencyMap.forEach((function(e){d=ht(ht({},d),e)}));var p={};return Object.keys(d).forEach((function(e){var t=d[e],n={},r=!0;t.forEach((function(e){var t=!!a.entities.find((function(t){return t.field===e})).required,o=c[e].value;t&&!o?(r=!1,n[e]=null):n[e]=o})),r&&(p[e]={dependencyValues:{$set:n}})})),c=_()(c,p),a.state={data:c,errorMsg:"",warningMsg:""},a.hookDeferred&&a.hookDeferred.then((function(){if("function"==typeof a.hook.onCreate)try{a.hook.onCreate()}catch(e){console.error(e)}})),a}return d()(n,[{key:"render",value:function(){var e=this;return this.flag&&(this.hookDeferred&&this.hookDeferred.then((function(){if("function"==typeof e.hook.onRender)try{e.hook.onRender()}catch(e){console.error(e)}})),this.props.mode===ut.d&&this.hookDeferred&&this.hookDeferred.then((function(){if("function"==typeof e.hook.onEditLoad)try{e.hook.onEditLoad()}catch(e){console.error(e)}})),this.flag=!1),S.a.createElement("div",null,S.a.createElement("form",{style:this.props.mode===ut.b?{marginTop:"25px"}:{}},this.generateWarningMessage(),this.generateErrorMessage(),this.renderGroupElements(),this.entities.map((function(t){if(t.isGrouping)return null;var n=e.state.data[t.field];return n.placeholder&&(t=ht(ht({},t),{},{options:ht(ht({},t.options),{},{placeholder:n.placeholder})})),S.a.createElement(at,{key:t.field,utilityFuncts:e.utilControlWrapper,value:n.value,display:n.display,error:n.error,entity:t,serviceName:e.props.serviceName,mode:e.props.mode,disabled:n.disabled,markdownMessage:n.markdownMessage,dependencyValues:n.dependencyValues||null})}))))}}]),n}(R.PureComponent);E()(bt,"contextType",pt.b),bt.propTypes={page:N.a.string,serviceName:N.a.string,stanzaName:N.a.string,currentServiceState:N.a.object,mode:N.a.string,handleFormSubmit:N.a.func};t.a=bt},316:function(e,t,n){"use strict";n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return a}));var r="page",a="modal"},323:function(e,t,n){"use strict";var r=n(251),a=n.n(r),o=n(63),i=n.n(o),l=n(0),c=n.n(l),s=n(281),u=n.n(s),d=n(74),p=n.n(d),f=n(3),h=n.n(f),m=n(68),v=n(257),g=n(40),b=n(317),y=n.n(b),O=n(282),E=n.n(O),j=n(6),k=n(284),w=n(256),C=n(43),R=n(13),S=n.n(R),x=n(412),N=n.n(x),M=n(1),_=n(28),P=n.n(_),T=n(29),F=n.n(T),D=n(119),V=n.n(D),q=n(31),A=n.n(q),z=n(32),I=n.n(z),B=n(20),L=n.n(B),H=n(34);function U(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=L()(e);if(t){var a=L()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return I()(this,n)}}var $=function(e){A()(n,e);var t=U(n);function n(e){var r;return P()(this,n),r=t.call(this,e),a()(V()(r),"loadCustomControl",(function(){return new Promise((function(e){if("external"===r.props.type)import("".concat(Object(H.a)(),"/custom/").concat(r.props.fileName,".js")).then((function(t){var n=t.default;e(n)}));else{var t=Object(g.d)().meta.name;require(["app/".concat(t,"/js/build/custom/").concat(r.props.fileName)],(function(t){return e(t)}))}}))})),r.state={loading:!0},r.shouldRender=!0,r}return F()(n,[{key:"componentDidMount",value:function(){var e=this,t=Object(g.d)();this.setState({loading:!0}),this.loadCustomControl().then((function(n){e.customControl=new n(t,e.props.serviceName,e.el,e.props.row,e.props.field),e.setState({loading:!1})}))}},{key:"shouldComponentUpdate",value:function(e,t){return this.props.row!==e.row||!(t.loading||!this.shouldRender)&&(this.shouldRender=!1,!0)}},{key:"render",value:function(){var e=this;if(!this.state.loading)try{this.customControl.render(this.props.row,this.props.field)}catch(e){console.error(e)}return c.a.createElement(c.a.Fragment,null,this.state.loading&&Object(j._)("Loading..."),c.a.createElement("span",{ref:function(t){e.el=t},style:{visibility:this.state.loading?"hidden":"visible"}}))}}]),n}(l.Component);$.propTypes={serviceName:h.a.string.isRequired,row:h.a.object.isRequired,field:h.a.string,fileName:h.a.string.isRequired,type:h.a.string};var W,K=$,Z=Object(M.default)(E.a.Cell)(W||(W=S()(["\n    border-top: none;\n"])));function G(e,t,n){var r=Object(g.d)().pages.inputs.table.customRow;return c.a.createElement(E.a.Row,{key:"".concat(t.id,"-expansion")},c.a.createElement(Z,{colSpan:e},r&&r.src?c.a.createElement(c.a.Fragment,null,c.a.createElement(K,{serviceName:t.serviceName,row:t,fileName:r.src})):c.a.createElement(N.a,{termWidth:250},function(e,t){var n=[];return null!=t&&t.length&&t.forEach((function(t){var r=Object(j._)(t.label);t.field in e&&null!==e[t.field]&&""!==e[t.field]&&(n.push(c.a.createElement(N.a.Term,{key:t.field},r)),n.push(c.a.createElement(N.a.Description,{key:"".concat(t.field,"_decr")},t.mapping&&t.mapping[e[t.field]]?t.mapping[e[t.field]]:String(e[t.field]))))})),n}(t,n))))}var X,J,Q=n(316),Y=n(67),ee=n.n(Y),te=n(263),ne=n.n(te),re=n(319),ae=n.n(re),oe=n(283),ie=n.n(oe),le=n(413),ce=n.n(le),se=n(414),ue=n.n(se),de=n(415),pe=n.n(de),fe=Object(M.default)(E.a.Cell)(X||(X=S()(["\n    padding: 2px;\n"]))),he=M.default.div(J||(J=S()(["\n    display: flex;\n\n    .toggle_switch {\n        padding: 0;\n        margin-right: 10px;\n    }\n"])));function me(e){var t=e.row,n=e.columns,r=e.headerMapping,a=e.handleToggleActionClick,o=e.handleEditActionClick,i=e.handleCloneActionClick,s=e.handleDeleteActionClick,u=Object(l.useCallback)((function(e){return c.a.createElement(fe,{"data-column":"actions",key:e.id},c.a.createElement(ae.a,null,c.a.createElement(ie.a,{content:Object(j._)("Edit")},c.a.createElement(m.a,{appearance:"flat",icon:c.a.createElement(ce.a,{screenReaderText:null,size:1}),onClick:function(){return o(e)},className:"editBtn"})),c.a.createElement(ie.a,{content:Object(j._)("Clone")},c.a.createElement(m.a,{appearance:"flat",icon:c.a.createElement(ue.a,{screenReaderText:null,size:1}),onClick:function(){return i(e)},className:"cloneBtn"})),c.a.createElement(ie.a,{content:Object(j._)("Delete")},c.a.createElement(m.a,{appearance:"destructive",icon:c.a.createElement(pe.a,{screenReaderText:null,size:1}),onClick:function(){return s(e)},className:"deleteBtn"}))))}),[o,i,s]),d="Enabled";return t.__toggleShowSpinner?d=c.a.createElement(ee.a,null):t.disabled&&(d=null!=r&&r.disabled&&r.disabled[t.disabled]?r.disabled[t.disabled]:"Disabled"),c.a.createElement(c.a.Fragment,null,c.a.createElement(E.a.Row,y()({key:t.id},e),n&&n.length&&n.map((function(e){var n="";if(e.customCell&&e.customCell.src)n=c.a.createElement(E.a.Cell,{"data-column":e.field,key:e.field},function(e,n){return c.a.createElement(K,{serviceName:t.serviceName,field:n.field,row:e,fileName:n.customCell.src,type:n.customCell.type})}(t,e));else if("disabled"===e.field){var o,i;n=c.a.createElement(E.a.Cell,{"data-column":e.field,key:e.field},c.a.createElement(he,null,c.a.createElement(ne.a,{key:t.name,value:t.disabled,onClick:function(){return a(t)},selected:!t.disabled,disabled:t.__toggleShowSpinner,appearance:"toggle",className:"toggle_switch",selectedLabel:Object(j._)(null!=r&&null!==(o=r.disabled)&&void 0!==o&&o.false?r.disabled.false:"Enabled"),unselectedLabel:Object(j._)(null!=r&&null!==(i=r.disabled)&&void 0!==i&&i.true?r.disabled.true:"Disabled")}),c.a.createElement("span",{"data-test":"status"},d)))}else n="actions"===e.field?u(t):c.a.createElement(E.a.Cell,{"data-column":e.field,key:e.field},r[e.field]&&Object.prototype.hasOwnProperty.call(r[e.field],t[e.field])?r[e.field][t[e.field]]:t[e.field]);return n}))))}me.propTypes={row:h.a.any,columns:h.a.array,headerMapping:h.a.object,handleToggleActionClick:h.a.func,handleEditActionClick:h.a.func,handleCloneActionClick:h.a.func,handleDeleteActionClick:h.a.func};var ve,ge=c.a.memo(me),be=n(285),ye=n(30),Oe=n.n(ye),Ee=n(25),je=n.n(Ee),ke=n(83),we=n.n(ke),Ce=n(255),Re=n(7);function Se(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function xe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Se(Object(n),!0).forEach((function(t){a()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Se(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ne(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=L()(e);if(t){var a=L()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return I()(this,n)}}var Me=Object(M.default)(je.a)(ve||(ve=S()(["\n    width: 800px;\n"]))),_e=function(e){A()(n,e);var t=Ne(n);function n(e){var r;return P()(this,n),r=t.call(this,e),a()(V()(r),"handleRequestClose",(function(){r.state.ErrorMsg="",r.props.handleRequestClose()})),a()(V()(r),"handleDelete",(function(){r.setState((function(e){return xe(xe({},e),{},{isDeleting:!0,ErrorMsg:""})}),(function(){Object(v.a)({serviceName:"".concat(r.props.serviceName,"/").concat(encodeURIComponent(r.props.stanzaName)),customHeaders:{"Content-Type":"application/x-www-form-urlencoded"},method:"delete",handleError:!1}).catch((function(e){var t=Object(Re.b)(e);return r.setState({ErrorMsg:t,isDeleting:!1}),Promise.reject(e)})).then((function(){r.context.setRowData(u()(r.context.rowData,a()({},r.props.serviceName,{$unset:[r.props.stanzaName]}))),r.setState({isDeleting:!1}),r.handleRequestClose(),Object(g.c)('Deleted "'.concat(r.props.stanzaName,'"'),"success")}))}))})),a()(V()(r),"generateErrorMessage",(function(){return r.state.ErrorMsg?c.a.createElement("div",null,c.a.createElement(we.a,{appearance:"fill",type:"error"},r.state.ErrorMsg)):null})),r.state={isDeleting:!1,ErrorMsg:""},r}return F()(n,[{key:"render",value:function(){var e;return e=this.props.page===C.b?Object(Re.a)(103,[this.props.stanzaName]):Object(Re.a)(102,[this.props.stanzaName]),c.a.createElement(Me,{open:this.props.open},c.a.createElement(je.a.Header,{title:Object(Re.a)(101),onRequestClose:this.handleRequestClose}),c.a.createElement(je.a.Body,{className:"deletePrompt"},this.generateErrorMessage(),c.a.createElement("p",null,e)),c.a.createElement(je.a.Footer,null,c.a.createElement(Oe.a,{appearance:"secondary",onClick:this.handleRequestClose,label:Object(j._)("Cancel"),disabled:this.state.isDeleting}),c.a.createElement(Oe.a,{appearance:"primary",label:this.state.isDeleting?c.a.createElement(ee.a,null):Object(j._)("Delete"),onClick:this.handleDelete,disabled:this.state.isDeleting})))}}]),n}(l.Component);a()(_e,"contextType",Ce.b),_e.propTypes={page:h.a.string.isRequired,open:h.a.bool,handleRequestClose:h.a.func,serviceName:h.a.string,stanzaName:h.a.string};var Pe=_e;function Te(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Fe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Te(Object(n),!0).forEach((function(t){a()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Te(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function De(e){var t=e.page,n=e.serviceName,r=e.data,a=e.handleToggleActionClick,o=e.handleOpenPageStyleDialog,s=e.handleSort,u=e.sortDir,d=e.sortKey,p=Object(g.d)(),f=Object(l.useState)({open:!1}),h=i()(f,2),v=h[0],b=h[1],O=Object(l.useState)({open:!1}),R=i()(O,2),S=R[0],x=R[1],N=Object(l.useContext)(Ce.b).rowData,M=t===C.b?p.pages.inputs.table:p.pages.configuration.tabs.filter((function(e){return e.name===n}))[0].table,_=M.moreInfo,P=M.header,T=M.header,F={};P.forEach((function(e){F[e.field]=e.mapping}));var D={};t===C.b&&p.pages.inputs.services.forEach((function(e){D[e.name]=e.style===Q.b?Q.b:Q.a}));var V=Object(k.a)();Object(l.useEffect)((function(){if(V&&(V.get("tab")===n||void 0===n))if(V.get("record")&&!v.open){var e=Object.keys(N).find((function(e){return void 0!==N[e][V.get("record")]}));if(e){var t=N[e][V.get("record")];b(Fe(Fe({},v),{},{open:!0,serviceName:t.serviceName,stanzaName:t.name,mode:w.d}))}}else!V.get("record")&&v.open&&b(Fe(Fe({},v),{},{open:!1}))}),[]);var q,A=function(){b(Fe(Fe({},v),{},{open:!1}))},z=Object(l.useCallback)((function(e){"page"===D[e.serviceName]?o(e,w.d):b(Fe(Fe({},v),{},{open:!0,serviceName:e.serviceName,stanzaName:e.name,mode:w.d}))}),[v]),I=function(){x(Fe(Fe({},S),{},{open:!1}))},B=Object(l.useCallback)((function(e){"page"===D[e.serviceName]?o(e,w.a):b(Fe(Fe({},v),{},{open:!0,serviceName:e.serviceName,stanzaName:e.name,mode:w.a}))}),[v]),L=Object(l.useCallback)((function(e){x(Fe(Fe({},S),{},{open:!0,stanzaName:e.name,serviceName:e.serviceName}))}),[S]),H=(q=[],T&&T.length&&T.forEach((function(e){q.push(Fe(Fe({},e),{},{sortKey:e.field||null}))})),q.push({label:"Actions",field:"actions",sortKey:""}),q),U=Object(l.useCallback)((function(){return c.a.createElement(E.a.Head,null,H&&H.length&&H.map((function(e){return c.a.createElement(E.a.HeadCell,{key:e.field,onSort:e.sortKey?s:null,sortKey:e.sortKey?e.sortKey:null,sortDir:e.sortKey&&e.sortKey===d?u:"none"},e.label)})))}),[H,s,u,d]);return c.a.createElement(c.a.Fragment,null,H&&H.length&&c.a.createElement(E.a,y()({stripeRows:!0},_?{rowExpansion:"single"}:{}),U(),c.a.createElement(E.a.Body,null,r&&r.length&&r.map((function(e){return c.a.createElement(ge,y()({key:e.id,row:e,columns:H,headerMapping:F,handleEditActionClick:z,handleCloneActionClick:B,handleDeleteActionClick:L,handleToggleActionClick:a},_?{expansionRow:G(H.length,e,_)}:{}))})))),r.length?null:c.a.createElement(m.b,null,"No records found"),function(){if(v.open){var e,n,r,a,o;if("inputs"===t)e=null===(r=(null===(n=p.pages)||void 0===n?void 0:n.inputs).services.find((function(e){return e.name===v.serviceName})))||void 0===r?void 0:r.title;else e=null===(o=(null===(a=p.pages)||void 0===a?void 0:a.configuration).tabs.find((function(e){return e.name===v.serviceName})))||void 0===o?void 0:o.title;return c.a.createElement(be.a,{page:t,open:v.open,handleRequestClose:A,serviceName:v.serviceName,stanzaName:v.stanzaName,mode:v.mode,formLabel:v.mode===w.a?Object(j._)("Clone ")+e:Object(j._)("Update ")+e})}return null}(),c.a.createElement(Pe,{page:t,open:S.open,handleRequestClose:I,serviceName:S.serviceName,stanzaName:S.stanzaName}))}De.propTypes={page:h.a.string.isRequired,serviceName:h.a.string,data:h.a.array.isRequired,handleToggleActionClick:h.a.func,handleOpenPageStyleDialog:h.a.func,handleSort:h.a.func,sortDir:h.a.string,sortKey:h.a.string};var Ve=Object(l.memo)(De),qe=n(322),Ae=n.n(qe),ze=n(451),Ie=n.n(ze),Be=n(260),Le=n.n(Be);function He(e){var t,n,r;return c.a.createElement(Le.a,{appearance:"search",placeholder:"filter",onChange:(t=e.handleChange,n=200,function(){for(var e=arguments.length,a=new Array(e),o=0;o<e;o++)a[o]=arguments[o];var i=function(){r=null,t.apply(void 0,a)};clearTimeout(r),r=setTimeout(i,n)})})}He.propTypes={handleChange:h.a.func};var Ue,$e,We=He,Ke=M.default.div(Ue||(Ue=S()(["\n    display: flex;\n    justify-content: space-between;\n    border-top: 1px solid #ccc;\n    padding-top: 5px;\n    margin-bottom: 5px;\n"]))),Ze=M.default.div($e||($e=S()(["\n    max-width: 300px;\n    width: 100%;\n"])));function Ge(e){var t=e.page,n=e.services,r=e.totalElement,a=e.handleRequestModalOpen,o=Object(l.useContext)(Ce.b),i=o.pageSize,s=o.currentPage,u=o.setCurrentPage,d=o.setPageSize,p=o.searchType,f=o.setSearchType,h=o.setSearchText,v=t===C.b?"Input":"Item";return c.a.createElement(Ke,null,c.a.createElement("div",null,c.a.createElement("span",{className:"inputNumber"},r,r>1?Object(j._)(" ".concat(v,"s")):Object(j._)(" ".concat(v))),t===C.b?c.a.createElement(m.c,null,c.a.createElement(Ae.a,{value:i,className:"dropdownPage",onChange:function(e,t){var n=t.value;u(0),d(n)}},c.a.createElement(Ae.a.Option,{key:"10",label:Object(j._)("10 Per Page"),value:10}),c.a.createElement(Ae.a.Option,{key:"25",label:Object(j._)("25 Per Page"),value:25}),c.a.createElement(Ae.a.Option,{key:"50",label:Object(j._)("50 Per Page"),value:50})),function(){if(n.length<2)return null;var e=[];return(e=n.map((function(e){return c.a.createElement(Ae.a.Option,{key:e.name,label:e.title,value:e.name})}))).unshift(c.a.createElement(Ae.a.Option,{key:"all",label:Object(j._)("All"),value:"all"})),c.a.createElement(Ae.a,{value:p,className:"dropdownInput",onChange:function(e,t){var n=t.value;u(0),f(n)}},e)}()):null),c.a.createElement(Ze,null,c.a.createElement(We,{handleChange:function(e,t){var n=t.value;u(0),h(n)}})),c.a.createElement("div",null,c.a.createElement(Ie.a,{onChange:function(e,t){var n=t.page;return u(n-1)},current:s+1,alwaysShowLastPageLink:!0,totalPages:Math.ceil(r/i)}),t===C.b?null:c.a.createElement(Oe.a,{label:Object(j._)("Add"),appearance:"primary",onClick:a})))}Ge.propTypes={page:h.a.string,services:h.a.array,totalElement:h.a.number,handleRequestModalOpen:h.a.func};var Xe=Ge;function Je(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Qe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Je(Object(n),!0).forEach((function(t){a()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Je(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ye(e){var t=e.page,n=e.serviceName,r=e.handleRequestModalOpen,o=e.handleOpenPageStyleDialog,s=Object(l.useState)("name"),d=i()(s,2),f=d[0],h=d[1],b=Object(l.useState)("asc"),y=i()(b,2),O=y[0],E=y[1],j=Object(l.useState)(!0),k=i()(j,2),w=k[0],R=k[1],S=Object(l.useState)(null),x=i()(S,2),N=x[0],M=x[1],_=Object(l.useContext)(Ce.b),P=_.rowData,T=_.setRowData,F=_.pageSize,D=_.currentPage,V=_.searchText,q=_.searchType,A=Object(g.d)(),z=t===C.b?A.pages.inputs.table:A.pages.configuration.tabs.filter((function(e){return e.name===n}))[0].table,I=z.header,B=z.moreInfo,L=t===C.b?A.pages.inputs.services:A.pages.configuration.tabs.filter((function(e){return e.name===n})),H=function(){var e=[];L.forEach((function(t){e.push(Object(v.a)({serviceName:t.name}))})),p.a.all(e).catch((function(e){var n="",r="";return e.response?(n="Error received from server: ".concat(e.response.data.messages[0].text),r=t===C.b?"ERR0001":"ERR0002"):e.request?(n="No response received while making request to ".concat(t," services"),r="ERR0003"):(n="Error making request to ".concat(t," services"),r="ERR0004"),e.uccErrorCode=r,Object(g.c)(n),R(!1),M(e),Promise.reject(e)})).then((function(e){var t,n;t=e.map((function(e){return e.data.entry})),n={},L.forEach((function(e,r){if(e&&e.name&&t){var a={};t[r].forEach((function(t){a[t.name]=Qe(Qe({},t.content),{},{id:t.id,name:t.name,serviceName:e.name})})),n[e.name]=a}})),T(n),R(!1)}))};Object(l.useEffect)((function(){H()}),[]);var U=function(e){var t=[],n=[];return I.forEach((function(e){n.push(e.field)})),null==B||B.forEach((function(e){n.push(e.field)})),Object.keys(e).forEach((function(r){var a=!1;Object.keys(e[r]).forEach((function(o){n.includes(o)&&"string"==typeof e[r][o]&&e[r][o].toLowerCase().includes(V.toLowerCase().trim())&&!a&&(t.push(e[r]),a=!0)}))})),t};if(null!=N&&N.uccErrorCode)throw N;if(w)return c.a.createElement(m.d,null);var $=function(){var e=[];"all"===q?Object.keys(P).forEach((function(t){var n=[];n=V&&V.length?U(P[t]):Object.keys(P[t]).map((function(e){return P[t][e]})),e=e.concat(n)})):e=U(P[q]);var t=e.sort((function(e,t){return"asc"===O?e[f]>t[f]?1:-1:"desc"===O?t[f]>e[f]?1:-1:0})),n=t.slice(D*F,(D+1)*F);return D>0&&!n.length&&(n=t.slice((D-1)*F,F)),[n,e.length]}(),W=i()($,2),K=W[0],Z=W[1];return c.a.createElement(c.a.Fragment,null,c.a.createElement(Xe,{page:t,services:L,totalElement:Z,handleRequestModalOpen:r}),c.a.createElement(Ve,{page:t,serviceName:n,data:K,handleToggleActionClick:function(e){return function(e){T((function(t){return u()(t,a()({},e.serviceName,a()({},e.name,{__toggleShowSpinner:{$set:!0}})))}));var t=new URLSearchParams;t.append("disabled",!e.disabled),Object(v.a)({serviceName:"".concat(e.serviceName,"/").concat(e.name),body:t,customHeaders:{"Content-Type":"application/x-www-form-urlencoded"},method:"post",handleError:!0,callbackOnError:function(){T((function(t){return u()(t,a()({},e.serviceName,a()({},e.name,{__toggleShowSpinner:{$set:!1}})))}))}}).then((function(t){T((function(n){return u()(n,a()({},e.serviceName,a()({},e.name,{disabled:{$set:t.data.entry[0].content.disabled},__toggleShowSpinner:{$set:!1}})))}))}))}(e)},handleSort:function(e,t){var n=f===t.sortKey?O:"none";E("asc"===n?"desc":"asc"),h(t.sortKey)},sortDir:O,sortKey:f,handleOpenPageStyleDialog:o}))}Ye.propTypes={page:h.a.string,serviceName:h.a.string,handleRequestModalOpen:h.a.func,handleOpenPageStyleDialog:h.a.func};t.a=Object(l.memo)(Ye)},324:function(e,t,n){"use strict";var r=n(28),a=n.n(r),o=n(29),i=n.n(o),l=n(31),c=n.n(l),s=n(32),u=n.n(s),d=n(20),p=n.n(d),f=n(0),h=n.n(f),m=n(3),v=n.n(m),g=n(307),b=n.n(g),y=n(6),O=n(457),E=n.n(O),j=n(129),k=n.n(j),w=n(120),C=n.n(w),R={ERR0001:h.a.createElement(h.a.Fragment,null,"This is normal on Splunk search heads as they do not require an Input page. Check your installation or return to the ",h.a.createElement(C.a,{to:"configuration"},"configuration page"),"."),ERR0002:"Configuration page failed to load, the server reported internal errors which may indicate you do not have access to this page.",ERR0003:"Failed to load content due to no response from server!",ERR0004:"Failed to load content due to failed request processing!",ERR0005:"Failed to load current state for selected entity in form!"};function S(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=p()(e);if(t){var a=p()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return u()(this,n)}}var x=function(e){c()(n,e);var t=S(n);function n(e){var r;return a()(this,n),(r=t.call(this,e)).state={errorCode:null,error:null,errorInfo:null},r}return i()(n,[{key:"componentDidCatch",value:function(e,t){this.setState({error:e,errorInfo:t})}},{key:"render",value:function(){var e;return this.state.error?h.a.createElement("div",{align:"center",style:{marginTop:"10%"}},h.a.createElement(E.a,{style:{boxShadow:"10px 10px 5px #aaaaaa"}},h.a.createElement(E.a.Header,null,h.a.createElement(b.a,{style:{textAlign:"center"},level:2},h.a.createElement(k.a,{style:{fontSize:"120px",color:"#ff9900"}}),h.a.createElement("br",null),h.a.createElement("br",null),"ERR0001"===this.state.errorCode?Object(y._)("Failed to load Inputs Page"):Object(y._)("Something went wrong!"))),h.a.createElement(E.a.Body,null,this.state.errorCode?h.a.createElement(h.a.Fragment,null,Object(y._)(R[this.state.errorCode]),h.a.createElement("br",null),h.a.createElement("br",null)):null,h.a.createElement("details",{style:{whiteSpace:"pre-wrap"}},null===(e=this.state.error)||void 0===e?void 0:e.toString())),h.a.createElement(E.a.Footer,{showBorder:!1},this.state.errorCode?this.state.errorCode:null))):this.props.children}}],[{key:"getDerivedStateFromError",value:function(e){return{errorCode:e.uccErrorCode}}}]),n}(h.a.Component);x.propTypes={children:v.a.oneOfType([v.a.arrayOf(v.a.node),v.a.node]).isRequired};t.a=x}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvY29udGV4dC9UYWJsZUNvbnRleHQuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb25zdGFudHMvbW9kZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL3V0aWwvYXhpb3NDYWxsV3JhcHBlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvcGFnZXMvSW5wdXQvSW5wdXRQYWdlU3R5bGUuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9ob29rcy91c2VRdWVyeS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvY29tcG9uZW50cy9FbnRpdHlNb2RhbC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvTWFya2Rvd25NZXNzYWdlLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvY29tcG9uZW50cy9IZWxwTGlua0NvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvVGV4dENvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvU2luZ2xlSW5wdXRDb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb21wb25lbnRzL011bHRpSW5wdXRDb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb21wb25lbnRzL0NoZWNrQm94Q29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvY29tcG9uZW50cy9SYWRpb0NvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvUGxhY2Vob2xkZXJDb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb21wb25lbnRzL0N1c3RvbUNvbnRyb2wuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb25zdGFudHMvQ29udHJvbFR5cGVNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvQ29udHJvbFdyYXBwZXIuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb25zdGFudHMvcHJlRGVmaW5lZFJlZ2V4LmpzIiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC91dGlsL1ZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvY29tcG9uZW50cy9CYXNlRm9ybVZpZXcuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb25zdGFudHMvb0F1dGhFcnJvck1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbnN0YW50cy9kaWFsb2dTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvdGFibGUvQ3VzdG9tVGFibGVDb250cm9sLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvY29tcG9uZW50cy90YWJsZS9UYWJsZUV4cGFuc2lvblJvdy5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvdGFibGUvQ3VzdG9tVGFibGVSb3cuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb21wb25lbnRzL0RlbGV0ZU1vZGFsLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvY29tcG9uZW50cy90YWJsZS9DdXN0b21UYWJsZS5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvdGFibGUvVGFibGVGaWx0ZXIuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb21wb25lbnRzL3RhYmxlL1RhYmxlSGVhZGVyLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvY29tcG9uZW50cy90YWJsZS9UYWJsZVdyYXBwZXIuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb25zdGFudHMvZXJyb3JDb2Rlcy5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvRXJyb3JCb3VuZGFyeS5qc3giXSwibmFtZXMiOlsiVGFibGVDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsInJvd0RhdGEiLCJzZXRSb3dEYXRhIiwiVGFibGVDb250ZXh0UHJvdmlkZXIiLCJjaGlsZHJlbiIsInVzZVN0YXRlIiwic2VhcmNoVGV4dCIsInNldFNlYXJjaFRleHQiLCJzZWFyY2hUeXBlIiwic2V0U2VhcmNoVHlwZSIsInBhZ2VTaXplIiwic2V0UGFnZVNpemUiLCJjdXJyZW50UGFnZSIsInNldEN1cnJlbnRQYWdlIiwiUHJvdmlkZXIiLCJ2YWx1ZSIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsIm9uZU9mVHlwZSIsImFycmF5T2YiLCJub2RlIiwiaXNSZXF1aXJlZCIsIk1PREVfQ0xPTkUiLCJNT0RFX0NSRUFURSIsIk1PREVfRURJVCIsIk1PREVfQ09ORklHIiwiYXhpb3NDYWxsV3JhcHBlciIsInNlcnZpY2VOYW1lIiwiZW5kcG9pbnRVcmwiLCJwYXJhbXMiLCJib2R5IiwiY2FuY2VsVG9rZW4iLCJjdXN0b21IZWFkZXJzIiwibWV0aG9kIiwiaGFuZGxlRXJyb3IiLCJjYWxsYmFja09uRXJyb3IiLCJlbmRwb2ludCIsImdlbmVyYXRlRW5kUG9pbnRVcmwiLCJhcHBEYXRhIiwiYXBwIiwib3duZXIiLCJiYXNlSGVhZGVycyIsIkNTUkZUb2tlbiIsImhlYWRlcnMiLCJPYmplY3QiLCJhc3NpZ24iLCJ1cmwiLCJjcmVhdGVSRVNUVVJMIiwibmV3UGFyYW1zIiwib3V0cHV0X21vZGUiLCJvcHRpb25zIiwiY3JlZGVudGlhbHMiLCJkYXRhIiwiYXhpb3MiLCJlcnJvciIsIm1lc3NhZ2UiLCJpc0NhbmNlbCIsInJlc3BvbnNlIiwibWVzc2FnZXMiLCJ0ZXh0IiwicmVxdWVzdCIsImdlbmVyYXRlVG9hc3QiLCJQcm9taXNlIiwicmVqZWN0IiwiVGl0bGVDb21wb25lbnQiLCJzdHlsZWQiLCJkaXYiLCJhdHRycyIsImNsYXNzTmFtZSIsInZhcmlhYmxlcyIsImZvbnRTaXplWFhMYXJnZSIsIlN1YlRpdGxlQ29tcG9uZW50IiwiZm9udFNpemUiLCJ1c2VRdWVyeSIsIlVSTFNlYXJjaFBhcmFtcyIsInVzZUxvY2F0aW9uIiwic2VhcmNoIiwiTW9kYWxXcmFwcGVyIiwiTW9kYWwiLCJFbnRpdHlNb2RhbCIsInByb3BzIiwiaGFuZGxlUmVxdWVzdENsb3NlIiwiZm9ybSIsImN1cnJlbnQiLCJoYW5kbGVTdWJtaXQiLCJzZXQiLCJjbG9zZSIsInNldFN0YXRlIiwiaXNTdWJtaXRpdG5nIiwiUmVhY3QiLCJjcmVhdGVSZWYiLCJzdGF0ZSIsIm1vZGUiLCJidXR0b25UZXh0IiwiXyIsIm9wZW4iLCJ0aGlzIiwiSGVhZGVyIiwidGl0bGUiLCJmb3JtTGFiZWwiLCJvblJlcXVlc3RDbG9zZSIsIkJvZHkiLCJyZWYiLCJwYWdlIiwic3RhbnphTmFtZSIsImhhbmRsZUZvcm1TdWJtaXQiLCJGb290ZXIiLCJhcHBlYXJhbmNlIiwib25DbGljayIsImxhYmVsIiwiZGlzYWJsZWQiLCJDb21wb25lbnQiLCJzdHJpbmciLCJib29sIiwiZnVuYyIsIk1hcmtkb3duV3JhcHBlciIsInNwYW4iLCJjb2xvciIsIk1hcmtkb3duTWVzc2FnZSIsImRhdGEtdGVzdCIsIm1hcmtkb3duVGV4dCIsIm1hcmtkb3duVHlwZSIsInRvIiwibGluayIsImFycmF5IiwiZm4iLCJpIiwibGVuZ3RoIiwibWFwcGluZyIsImNvbmNhdCIsImZsYXRNYXAiLCJzcGxpdCIsInRva2VuIiwicGFydCIsImtleSIsImxpbmtUZXh0IiwicG9wIiwibWVtbyIsIkhlbHBMaW5rQ29tcG9uZW50IiwiY29udHJvbE9wdGlvbnMiLCJvcGVuSW5OZXdDb250ZXh0Iiwib2JqZWN0IiwiVGV4dFdyYXBwZXIiLCJUZXh0IiwiVGV4dENvbXBvbmVudCIsImUiLCJoYW5kbGVDaGFuZ2UiLCJmaWVsZCIsImlubGluZSIsInBsYWNlaG9sZGVyIiwidG9TdHJpbmciLCJvbkNoYW5nZSIsInR5cGUiLCJlbmNyeXB0ZWQiLCJudW1iZXIiLCJTZWxlY3RXcmFwcGVyIiwiU2VsZWN0IiwiU3R5bGVkRGl2IiwiU2luZ2xlSW5wdXRDb21wb25lbnQiLCJkZXBlbmRlbmN5VmFsdWVzIiwicmVzdFByb3BzIiwiZGVueUxpc3QiLCJhbGxvd0xpc3QiLCJkZXBlbmRlbmNpZXMiLCJjcmVhdGVTZWFyY2hDaG9pY2UiLCJyZWZlcmVuY2VOYW1lIiwiZGlzYWJsZVNlYXJjaCIsImxhYmVsRmllbGQiLCJhdXRvQ29tcGxldGVGaWVsZHMiLCJoaWRlQ2xlYXJCdG4iLCJvYmoiLCJPcHRpb24iLCJDb21ib0JveCIsIkhlYWRpbmciLCJnZW5lcmF0ZU9wdGlvbnMiLCJpdGVtcyIsImZvckVhY2giLCJpdGVtIiwicHVzaCIsImNoaWxkIiwibG9hZGluZyIsInNldExvYWRpbmciLCJzZXRPcHRpb25zIiwidXNlRWZmZWN0Iiwic291cmNlIiwiQ2FuY2VsVG9rZW4iLCJ0aGVuIiwiZmlsdGVyUmVzcG9uc2UiLCJlbnRyeSIsImNhbmNlbCIsImVmZmVjdGl2ZURpc2FibGVkIiwiZWZmZWN0aXZlUGxhY2Vob2xkZXIiLCJlZmZlY3RpdmVJc0NsZWFyYWJsZSIsIm5hbWUiLCJkYXRhLXRlc3QtbG9hZGluZyIsImZpbHRlciIsImljb24iLCJzaGFwZSIsIk11bHRpU2VsZWN0V3JhcHBlciIsIk11bHRpc2VsZWN0IiwiTXVsdGlJbnB1dENvbXBvbmVudCIsImRlbGltaXRlciIsIml0ZW1MaXN0IiwibWFwIiwiZ2V0Rm9ybWF0dGVkTWVzc2FnZSIsInZhbHVlTGlzdCIsInZhbHVlcyIsImFsbG93TmV3VmFsdWVzIiwiam9pbiIsIkNoZWNrQm94Q29tcG9uZW50IiwiaXNGYWxzZSIsInNlbGVjdGVkIiwiUmFkaW9CYXJXcmFwcGVyIiwiUmFkaW9CYXIiLCJSYWRpb0NvbXBvbmVudCIsIlBsYWNlaG9sZGVyQ29tcG9uZW50IiwiZGVmYXVsdFZhbHVlIiwiQ3VzdG9tQ29udHJvbCIsIm1vZHVsZSIsImFwcE5hbWUiLCJyZXNvbHZlIiwiaW1wb3J0IiwiZ2V0QnVpbGREaXJQYXRoIiwiZXh0ZXJuYWwiLCJDb250cm9sIiwiX19ub25fd2VicGFja19yZXF1aXJlX18iLCJuZXdWYWx1ZSIsInNob3VsZFJlbmRlciIsImdsb2JhbENvbmZpZyIsImdldFVuaWZpZWRDb25maWdzIiwibWV0YSIsImxvYWRDdXN0b21Db250cm9sIiwic3JjIiwiY3VzdG9tQ29udHJvbCIsImVsIiwic2V0VmFsdWUiLCJ1dGlsQ3VzdG9tRnVuY3Rpb25zIiwicmVuZGVyIiwidmFsaWRhdGlvbiIsImFkZEN1c3RvbVZhbGlkYXRvciIsIm5leHRQcm9wcyIsIm5leHRTdGF0ZSIsInN0eWxlIiwidmlzaWJpbGl0eSIsInNpbmdsZVNlbGVjdCIsImhlbHBMaW5rIiwibXVsdGlwbGVTZWxlY3QiLCJjaGVja2JveCIsInJhZGlvIiwiY3VzdG9tIiwiQ3VzdG9tRWxlbWVudCIsIkNvbnRyb2xHcm91cFdyYXBwZXIiLCJDb250cm9sR3JvdXAiLCJkYXRhTmFtZSIsIkNvbnRyb2xXcmFwcGVyIiwic3RyIiwiU3RyaW5nIiwiY29udHJvbFR5cGUiLCJpc1N0cmluZyIsImVudGl0eSIsIkNPTlRST0xfVFlQRV9NQVAiLCJyZXF1aXJlZCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInJvd1ZpZXciLCJ0b29sdGlwIiwiaGVscCIsInV0aWxpdHlGdW5jdHMiLCJtYXJrZG93bk1lc3NhZ2UiLCJjcmVhdGVFbGVtZW50IiwiaGVscFRleHQiLCJkaXNwbGF5IiwiUHVyZUNvbXBvbmVudCIsImFueSIsIlBSRURFRklORURfVkFMSURBVE9SU19ESUNUIiwicmVnZXgiLCJpbnB1dFZhbHVlVHlwZSIsImVtYWlsIiwiaXB2NCIsImRhdGUiLCJWYWxpZGF0b3IiLCJlbnRpdGllcyIsImF0dHJWYWx1ZSIsInVuZGVmaW5lZCIsImlzTmFtZSIsImZpbmQiLCJjaGVja0lzRmllbGRIYXNJbnB1dCIsImVycm9yRmllbGQiLCJlcnJvck1zZyIsInZhbGlkYXRvciIsInBhcnNlU3RyaW5nVmFsaWRhdG9yIiwibWluTGVuZ3RoIiwibWF4TGVuZ3RoIiwicGFyc2VSZWdleFJhd1N0ciIsInBhdHRlcm4iLCJyZXN1bHQiLCJ0ZXN0IiwicGFyc2VOdW1iZXJWYWxpZGF0b3IiLCJyYW5nZSIsInZhbCIsIk51bWJlciIsImlzTmFOIiwidGFyZ2V0VmFsdWUiLCJuYW1lRmllbGRMYWJlbCIsInN0YXJ0c1dpdGgiLCJ0b0xvd2VyQ2FzZSIsInNvbWUiLCJkIiwiaW5kZXhPZiIsInJldCIsImoiLCJSZXF1aXJlZFZhbGlkYXRvciIsInZhbGlkYXRvcnMiLCJTdHJpbmdWYWxpZGF0b3IiLCJSZWdleFZhbGlkYXRvciIsIk51bWJlclZhbGlkYXRvciIsIlByZURlZmluZWRSZWdleFZhbGlkYXRvciIsIkN1c3RvbVZhbGlkYXRvciIsInZhbGlkYXRvckZ1bmMiLCJDb2xsYXBzaWJsZVBhbmVsV3JhcHBlciIsIkNvbGxhcHNpYmxlUGFuZWwiLCJDdXN0b21Hcm91cExhYmVsIiwiQmFzZUZvcm1WaWV3IiwiY29udGV4dCIsInNlcnZpY2UiLCJncm91cHMiLCJncm91cCIsImZpZWxkcyIsImZpZWxkTmFtZSIsImluZGV4IiwiZmluZEluZGV4IiwidXBkYXRlZE9iaiIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsImlzR3JvdXBpbmciLCJzcGxpY2UiLCJjbGVhckVycm9yTXNnIiwiZGF0YWRpY3QiLCJrZXlzIiwiaG9vayIsIm9uU2F2ZSIsImV4ZWN1dGVWYWxpZGF0aW9uU3VibWl0IiwidGVtRW50aXRpZXMiLCJpbmNsdWRlcyIsIkJvb2xlYW4iLCJzZXRFcnJvckZpZWxkTXNnIiwiaXNPQXV0aCIsInJlcUZpZWxkcyIsImF1dGhNYXAiLCJhdXRoX3R5cGUiLCJpc0F1dGhWYWwiLCJkb1ZhbGlkYXRpb24iLCJzYXZlVmFsaWRhdG9yIiwiZm9ybURhdGEiLCJwYXJzZUZ1bmN0aW9uUmF3U3RyIiwiU2F2ZVZhbGlkYXRvciIsInNldEVycm9yTXNnIiwiaXNTaW5nbGVPYXV0aCIsInBhcmFtZXRlcnMiLCJjbGllbnRfaWQiLCJyZWRpcmVjdF91cmwiLCJzdGF0ZUVuYWJsZWQiLCJpc29hdXRoU3RhdGUiLCJzdGF0ZV9lbmFibGVkIiwib2F1dGhfc3RhdGUiLCJ1dWlkdjQiLCJyZXBsYWNlIiwiaG9zdCIsIm9hdXRoQ29uZiIsImF1dGhDb2RlRW5kcG9pbnQiLCJhIiwiaXNDYWxsZWQiLCJpc0Vycm9yIiwiaXNSZXNwb25zZSIsImNoaWxkV2luIiwid2luZG93IiwicG9wdXBXaWR0aCIsInBvcHVwSGVpZ2h0IiwiZ2V0TWVzc2FnZSIsImhhbmRsZU9hdXRoVG9rZW4iLCJ3YWl0Rm9yQXV0aGVudGljYXRpb24iLCJhdXRoVGltZW91dCIsImNsb3NlZCIsIndhaXRGb3JCYWNrZW5kUmVzcG9uc2UiLCJzYXZlRGF0YSIsIm9uU2F2ZVByb21pc2UiLCJhcHBlbmQiLCJ0bXBPYmoiLCJjb250ZW50IiwiaWQiLCJ1cGRhdGUiLCIkbWVyZ2UiLCJvblNhdmVTdWNjZXNzIiwibW9kZV9jb25maWdfdGl0bGUiLCJlcnIiLCJlcnJvclN1Ym1pdE1zZyIsInBhcnNlRXJyb3JNc2ciLCJvblNhdmVGYWlsIiwiY2hhbmdlcyIsIiRzZXQiLCJkZXBlbmRlbmN5TWFwIiwiaGFzIiwiZ2V0IiwibG9hZEZpZWxkIiwibG9hZCIsImRlcGVuZGVuY3kiLCJjdXJyZW50VmFsdWUiLCJuZXdGaWVsZHMiLCJ0ZW1wU3RhdGUiLCJjbGVhckFsbEVycm9yTXNnIiwiaG9va0RlZmVycmVkIiwieCIsIm1zZyIsInByZXZpb3VzU3RhdGUiLCJTdGF0ZSIsIndhcm5pbmdNc2ciLCJuZXdEYXRhIiwidGVtRGF0YSIsIkhvb2siLCJ1dGlsIiwiY29kZSIsInN0YXRlUmVzcG9uc2UiLCJkZWNvZGVVUklDb21wb25lbnQiLCJhY2Nlc3NUb2tlbkVuZHBvaW50IiwiZ3JhbnRfdHlwZSIsImNsaWVudF9zZWNyZXQiLCJyZWRpcmVjdF91cmkiLCJPQXV0aEVuZHBvaW50IiwiYWNjZXNzVG9rZW4iLCJhY2Nlc3NfdG9rZW4iLCJpbnN0YW5jZVVybCIsImluc3RhbmNlX3VybCIsInJlZnJlc2hUb2tlbiIsInJlZnJlc2hfdG9rZW4iLCJjb3VudCIsInNsZWVwIiwidGltZW91dCIsImFyZ3MiLCJtcyIsInNldFRpbWVvdXQiLCJjb2xscHNpYmxlRWxlbWVudCIsInRlbVN0YXRlIiwidXRpbENvbnRyb2xXcmFwcGVyIiwiaXNFeHBhbmRhYmxlIiwiZmxhZyIsImN1cnJlbnRJbnB1dCIsImVuY29kZVVSSUNvbXBvbmVudCIsImNhbGxiYWNrIiwiUEFHRV9JTlBVVCIsInBhZ2VzIiwiaW5wdXRzIiwic2VydmljZXMiLCJ1cGRhdGVFbnRpdGllc0Zvckdyb3VwIiwibG9hZEhvb2siLCJjb25maWd1cmF0aW9uIiwidGFicyIsInRhYiIsInRhYmxlIiwiY3VycmVudFNlcnZpY2VTdGF0ZSIsIk1hcCIsIlBBR0VfQ09ORiIsImF1dGhUeXBlIiwib2F1dGhfc3RhdGVfZW5hYmxlZCIsInRlbXBFbnRpdHkiLCJiYXNpYyIsIm9hdXRoIiwiYXV0aGZpZWxkcyIsImlzRW5jcnlwdGVkIiwibG9jYXRpb24iLCJocmVmIiwib2F1dGhDb25mRGF0YSIsIm9hdXRoX3BvcHVwX3dpZHRoIiwib2F1dGhfcG9wdXBfaGVpZ2h0Iiwib2F1dGhfdGltZW91dCIsImF1dGhfY29kZV9lbmRwb2ludCIsImFjY2Vzc190b2tlbl9lbmRwb2ludCIsImRpc2FibGVvbkVkaXQiLCJFcnJvciIsImNoYW5nZUZpZWxkcyIsImZsYXR0ZW5lZE1hcCIsIm9uQ3JlYXRlIiwiY29uc29sZSIsIm9uUmVuZGVyIiwib25FZGl0TG9hZCIsIm1hcmdpblRvcCIsImdlbmVyYXRlV2FybmluZ01lc3NhZ2UiLCJnZW5lcmF0ZUVycm9yTWVzc2FnZSIsInJlbmRlckdyb3VwRWxlbWVudHMiLCJTVFlMRV9QQUdFIiwiU1RZTEVfTU9EQUwiLCJDdXN0b21UYWJsZUNvbnRyb2wiLCJmaWxlTmFtZSIsInJvdyIsIlRhYmxlQ2VsbFdyYXBwZXIiLCJUYWJsZSIsIkNlbGwiLCJnZXRFeHBhbnNpb25Sb3ciLCJjb2xTcGFuIiwibW9yZUluZm8iLCJjdXN0b21Sb3ciLCJSb3ciLCJ0ZXJtV2lkdGgiLCJEZWZpbml0aW9uTGlzdHMiLCJUZXJtIiwiRGVzY3JpcHRpb24iLCJnZXRFeHBhbnNpb25Sb3dEYXRhIiwiU3dpdGNoV3JhcHBlciIsIkN1c3RvbVRhYmxlUm93IiwiY29sdW1ucyIsImhlYWRlck1hcHBpbmciLCJoYW5kbGVUb2dnbGVBY3Rpb25DbGljayIsImhhbmRsZUVkaXRBY3Rpb25DbGljayIsImhhbmRsZUNsb25lQWN0aW9uQ2xpY2siLCJoYW5kbGVEZWxldGVBY3Rpb25DbGljayIsInJvd0FjdGlvbnNQcmltYXJ5QnV0dG9uIiwidXNlQ2FsbGJhY2siLCJzZWxlY3RlZFJvdyIsImRhdGEtY29sdW1uIiwic2NyZWVuUmVhZGVyVGV4dCIsInNpemUiLCJzdGF0dXNDb250ZW50IiwiX190b2dnbGVTaG93U3Bpbm5lciIsImhlYWRlciIsImNlbGxIVE1MIiwiY3VzdG9tQ2VsbCIsImdldEN1c3RvbUNlbGwiLCJzZWxlY3RlZExhYmVsIiwidW5zZWxlY3RlZExhYmVsIiwiRGVsZXRlTW9kYWwiLCJFcnJvck1zZyIsInByZXZTdGF0ZSIsImlzRGVsZXRpbmciLCIkdW5zZXQiLCJkZWxldGVNc2ciLCJoYW5kbGVEZWxldGUiLCJDdXN0b21UYWJsZSIsImhhbmRsZU9wZW5QYWdlU3R5bGVEaWFsb2ciLCJoYW5kbGVTb3J0Iiwic29ydERpciIsInNvcnRLZXkiLCJ1bmlmaWVkQ29uZmlncyIsImVudGl0eU1vZGFsIiwic2V0RW50aXR5TW9kYWwiLCJkZWxldGVNb2RhbCIsInNldERlbGV0ZU1vZGFsIiwidXNlQ29udGV4dCIsInRhYmxlQ29uZmlnIiwic2VydmljZVRvU3R5bGVNYXAiLCJxdWVyeSIsInNlcnZpY2VLZXkiLCJjb2x1bW4iLCJoYW5kbGVFbnRpdHlDbG9zZSIsImhhbmRsZURlbGV0ZUNsb3NlIiwiZ2V0VGFibGVIZWFkZXJDZWxsIiwiSGVhZCIsImhlYWREYXRhIiwiSGVhZENlbGwiLCJvblNvcnQiLCJzdHJpcGVSb3dzIiwicm93RXhwYW5zaW9uIiwiZXhwYW5zaW9uUm93IiwiZ2VuZXJhdGVNb2RhbERpYWxvZyIsIlRhYmxlRmlsdGVyIiwid2FpdCIsImxhdGVyIiwiY2xlYXJUaW1lb3V0IiwiVGFibGVIZWFkZXJXcmFwcGVyIiwiVGFibGVGaWx0ZXJXcmFwcGVyIiwiVGFibGVIZWFkZXIiLCJ0b3RhbEVsZW1lbnQiLCJoYW5kbGVSZXF1ZXN0TW9kYWxPcGVuIiwiaXRlbUxhYmVsIiwiYXJyIiwidW5zaGlmdCIsImdldFNlYXJjaFR5cGVEcm9wZG93biIsInBhZ2VOdW1iZXIiLCJhbHdheXNTaG93TGFzdFBhZ2VMaW5rIiwidG90YWxQYWdlcyIsIk1hdGgiLCJjZWlsIiwiVGFibGVXcmFwcGVyIiwic2V0U29ydEtleSIsInNldFNvcnREaXIiLCJzZXRFcnJvciIsImZldGNoSW5wdXRzIiwicmVxdWVzdHMiLCJhbGwiLCJlcnJvckNvZGUiLCJ1Y2NFcnJvckNvZGUiLCJyZXMiLCJmaW5kQnlNYXRjaGluZ1ZhbHVlIiwidGFibGVGaWVsZHMiLCJtb3JlSW5mb0RhdGEiLCJ2IiwiZm91bmQiLCJ2diIsInRyaW0iLCJuZXdBcnIiLCJzb3J0ZWRBcnIiLCJzb3J0Iiwicm93QSIsInJvd0IiLCJ1cGRhdGVkQXJyIiwic2xpY2UiLCJnZXRSb3dEYXRhIiwiZmlsdGVyZWREYXRhIiwiY3VycmVudFJvd0RhdGEiLCJjaGFuZ2VUb2dnbGVTdGF0dXMiLCJwcmV2U29ydERpciIsIkVSUjAwMDEiLCJFUlIwMDAyIiwiRVJSMDAwMyIsIkVSUjAwMDQiLCJFUlIwMDA1IiwiRXJyb3JCb3VuZGFyeSIsImVycm9ySW5mbyIsImFsaWduIiwiYm94U2hhZG93IiwidGV4dEFsaWduIiwibGV2ZWwiLCJlcnJvckNvZGVz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QU8sQ0FBRXVoQixVQUFXdmhCLEVBQU13aEIsa0IsR0FSTnJmLElBQU1zQixXQXVEbEN5ZixFQUFjeGxCLFVBQVksQ0FDdEJaLFNBQVVhLElBQVVDLFVBQVUsQ0FBQ0QsSUFBVUUsUUFBUUYsSUFBVUcsTUFBT0gsSUFBVUcsT0FBT0MsWUFHeEVtbEIiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBjcmVhdGVDb250ZXh0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmNvbnN0IFRhYmxlQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoe1xuICAgIHJvd0RhdGE6IHt9LFxuICAgIHNldFJvd0RhdGE6ICgpID0+IHt9LFxufSk7XG5cbmV4cG9ydCBjb25zdCBUYWJsZUNvbnRleHRQcm92aWRlciA9ICh7IGNoaWxkcmVuIH0pID0+IHtcbiAgICBjb25zdCBbcm93RGF0YSwgc2V0Um93RGF0YV0gPSB1c2VTdGF0ZSh7fSk7XG4gICAgY29uc3QgW3NlYXJjaFRleHQsIHNldFNlYXJjaFRleHRdID0gdXNlU3RhdGUoJycpO1xuICAgIGNvbnN0IFtzZWFyY2hUeXBlLCBzZXRTZWFyY2hUeXBlXSA9IHVzZVN0YXRlKCdhbGwnKTtcbiAgICBjb25zdCBbcGFnZVNpemUsIHNldFBhZ2VTaXplXSA9IHVzZVN0YXRlKDEwKTtcbiAgICBjb25zdCBbY3VycmVudFBhZ2UsIHNldEN1cnJlbnRQYWdlXSA9IHVzZVN0YXRlKDApO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPFRhYmxlQ29udGV4dC5Qcm92aWRlclxuICAgICAgICAgICAgdmFsdWU9e3tcbiAgICAgICAgICAgICAgICByb3dEYXRhLFxuICAgICAgICAgICAgICAgIHNldFJvd0RhdGEsXG4gICAgICAgICAgICAgICAgc2VhcmNoVGV4dCxcbiAgICAgICAgICAgICAgICBzZXRTZWFyY2hUZXh0LFxuICAgICAgICAgICAgICAgIHNlYXJjaFR5cGUsXG4gICAgICAgICAgICAgICAgc2V0U2VhcmNoVHlwZSxcbiAgICAgICAgICAgICAgICBwYWdlU2l6ZSxcbiAgICAgICAgICAgICAgICBzZXRQYWdlU2l6ZSxcbiAgICAgICAgICAgICAgICBjdXJyZW50UGFnZSxcbiAgICAgICAgICAgICAgICBzZXRDdXJyZW50UGFnZSxcbiAgICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPC9UYWJsZUNvbnRleHQuUHJvdmlkZXI+XG4gICAgKTtcbn07XG5cblRhYmxlQ29udGV4dFByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm5vZGUpLCBQcm9wVHlwZXMubm9kZV0pLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBUYWJsZUNvbnRleHQ7XG4iLCJleHBvcnQgY29uc3QgTU9ERV9DTE9ORSA9ICdjbG9uZSc7XG5leHBvcnQgY29uc3QgTU9ERV9DUkVBVEUgPSAnY3JlYXRlJztcbmV4cG9ydCBjb25zdCBNT0RFX0RFTEVURSA9ICdkZWxldGUnO1xuZXhwb3J0IGNvbnN0IE1PREVfRURJVCA9ICdlZGl0JztcbmV4cG9ydCBjb25zdCBNT0RFX0NPTkZJRyA9ICdjb25maWcnO1xuIiwiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCB7IENTUkZUb2tlbiwgYXBwIH0gZnJvbSAnQHNwbHVuay9zcGx1bmstdXRpbHMvY29uZmlnJztcbmltcG9ydCB7IGNyZWF0ZVJFU1RVUkwgfSBmcm9tICdAc3BsdW5rL3NwbHVuay11dGlscy91cmwnO1xuaW1wb3J0IHsgZ2VuZXJhdGVFbmRQb2ludFVybCwgZ2VuZXJhdGVUb2FzdCB9IGZyb20gJy4vdXRpbCc7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIFRoZSBvYmplY3QgY29udGFpbmluZyByZXF1aXJlZCBwYXJhbXMgZm9yIHJlcXVlc3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhLnNlcnZpY2VOYW1lIHNlcnZpY2UgbmFtZSB3aGljaCBpcyBpbnB1dCBuYW1lIG9yIHRhYiBuYW1lIGJhc2VkIG9uIHRoZSBwYWdlXG4gKiBAcGFyYW0ge3N0cmluZ30gZGF0YS5lbmRwb2ludFVybCByZXN0IGVuZHBvaW50IHBhdGhcbiAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhLnBhcmFtcyBvYmplY3Qgd2l0aCBwYXJhbXMgYXMga2V5IHZhbHVlIHBhaXJzXG4gKiBAcGFyYW0ge29iamVjdH0gZGF0YS5ib2R5IG9iamVjdCB3aXRoIGJvZHkgYXMga2V5IHZhbHVlIHBhaXJzIGZvciBwb3N0IHJlcXVlc3RcbiAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhLmN1c3RvbUhlYWRlcnMgZXh0cmEgaGVhZGVycyBhcyBrZXkgdmFsdWUgcGFpclxuICogQHBhcmFtIHtzdHJpbmd9IGRhdGEubWV0aG9kIHJlc3QgbWV0aG9kIHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhLmhhbmRsZUVycm9yIHdoZXRoZXIgb3Igbm90IHNob3cgdG9hc3Qgbm90aWZpY2F0aW9ucyBvbiBmYWlsdXJlXG4gKiBAcGFyYW0ge3N0cmluZ30gZGF0YS5jYWxsYmFja09uRXJyb3IgY2FsbGJhY2sgZnVuY3Rpb24gdG8gZXhlY3V0ZSBhZnRlciBoYW5kbGluZyBlcnJvci4gT25seSBleGVjdXRlZCB3aGVuIGhhbmRsZUVycm9yIGlzIHNldCB0byB0cnVlXG4gKiBAcmV0dXJuc1xuICovXG5jb25zdCBheGlvc0NhbGxXcmFwcGVyID0gKHtcbiAgICBzZXJ2aWNlTmFtZSxcbiAgICBlbmRwb2ludFVybCxcbiAgICBwYXJhbXMsXG4gICAgYm9keSxcbiAgICBjYW5jZWxUb2tlbixcbiAgICBjdXN0b21IZWFkZXJzID0ge30sXG4gICAgbWV0aG9kID0gJ2dldCcsXG4gICAgaGFuZGxlRXJyb3IgPSBmYWxzZSxcbiAgICBjYWxsYmFja09uRXJyb3IgPSAoKSA9PiB7fSxcbn0pID0+IHtcbiAgICBjb25zdCBlbmRwb2ludCA9IHNlcnZpY2VOYW1lID8gZ2VuZXJhdGVFbmRQb2ludFVybChzZXJ2aWNlTmFtZSkgOiBlbmRwb2ludFVybDtcbiAgICBjb25zdCBhcHBEYXRhID0ge1xuICAgICAgICBhcHAsXG4gICAgICAgIG93bmVyOiAnbm9ib2R5JyxcbiAgICB9O1xuICAgIGNvbnN0IGJhc2VIZWFkZXJzID0ge1xuICAgICAgICAnWC1TcGx1bmstRm9ybS1LZXknOiBDU1JGVG9rZW4sXG4gICAgICAgICdYLVJlcXVlc3RlZC1XaXRoJzogJ1hNTEh0dHBSZXF1ZXN0JyxcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICB9O1xuICAgIGNvbnN0IGhlYWRlcnMgPSBPYmplY3QuYXNzaWduKGJhc2VIZWFkZXJzLCBjdXN0b21IZWFkZXJzKTtcbiAgICBjb25zdCB1cmwgPSBjcmVhdGVSRVNUVVJMKGVuZHBvaW50LCBhcHBEYXRhKTtcblxuICAgIGxldCBuZXdQYXJhbXMgPSB7IG91dHB1dF9tb2RlOiAnanNvbicgfTtcbiAgICBpZiAocGFyYW1zKSB7XG4gICAgICAgIG5ld1BhcmFtcyA9IHsgLi4ubmV3UGFyYW1zLCAuLi5wYXJhbXMgfTtcbiAgICB9XG5cbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBwYXJhbXM6IG5ld1BhcmFtcyxcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICB1cmwsXG4gICAgICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgICAgIGNhbmNlbFRva2VuLFxuICAgIH07XG5cbiAgICBpZiAobWV0aG9kID09PSAncG9zdCcpIHtcbiAgICAgICAgb3B0aW9ucy5kYXRhID0gYm9keTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGFuZGxlRXJyb3JcbiAgICAgICAgPyBheGlvcyhvcHRpb25zKS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSAnJztcbiAgICAgICAgICAgICAgaWYgKGF4aW9zLmlzQ2FuY2VsKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoZXJyb3IucmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgIC8vIFRoZSByZXF1ZXN0IHdhcyBtYWRlIGFuZCB0aGUgc2VydmVyIHJlc3BvbmRlZCB3aXRoIGEgc3RhdHVzIGNvZGVcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgRXJyb3IgcmVzcG9uc2UgcmVjZWl2ZWQgZnJvbSBzZXJ2ZXI6ICR7ZXJyb3IucmVzcG9uc2UuZGF0YS5tZXNzYWdlc1swXS50ZXh0fWA7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3IucmVxdWVzdCkge1xuICAgICAgICAgICAgICAgICAgLy8gVGhlIHJlcXVlc3Qgd2FzIG1hZGUgYnV0IG5vIHJlc3BvbnNlIHdhcyByZWNlaXZlZFxuICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBObyByZXNwb25zZSByZWNlaXZlZCB3aGlsZSBtYWtpbmcgcmVxdWVzdCB0byAke2VuZHBvaW50fWA7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAvLyBTb21ldGhpbmcgaGFwcGVuZWQgaW4gc2V0dGluZyB1cCB0aGUgcmVxdWVzdCB0aGF0IHRyaWdnZXJlZCBhbiBFcnJvclxuICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBFcnJvciBtYWtpbmcgJHttZXRob2R9IHJlcXVlc3QgdG8gJHtlbmRwb2ludH1gO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGdlbmVyYXRlVG9hc3QobWVzc2FnZSwgJ2Vycm9yJyk7XG4gICAgICAgICAgICAgIGNhbGxiYWNrT25FcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgfSlcbiAgICAgICAgOiBheGlvcyhvcHRpb25zKTtcbn07XG5cbmV4cG9ydCB7IGF4aW9zQ2FsbFdyYXBwZXIgfTtcbiIsImltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgdmFyaWFibGVzIH0gZnJvbSAnQHNwbHVuay90aGVtZXMnO1xuXG5leHBvcnQgY29uc3QgVGl0bGVDb21wb25lbnQgPSBzdHlsZWQuZGl2LmF0dHJzKHtcbiAgICBjbGFzc05hbWU6ICdwYWdlVGl0bGUnLFxufSlgXG4gICAgJi5wYWdlVGl0bGUge1xuICAgICAgICBmb250LXNpemU6ICR7dmFyaWFibGVzLmZvbnRTaXplWFhMYXJnZX07XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gICAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IFN1YlRpdGxlQ29tcG9uZW50ID0gc3R5bGVkLmRpdi5hdHRycyh7XG4gICAgY2xhc3NOYW1lOiAncGFnZVN1YnRpdGxlJyxcbn0pYFxuICAgICYucGFnZVN1YnRpdGxlIHtcbiAgICAgICAgZm9udC1zaXplOiAke3ZhcmlhYmxlcy5mb250U2l6ZX07XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IFRhYmxlQ2FwdGlvbkNvbXBvbmVudCA9IHN0eWxlZC5kaXZgXG4gICAgLnRhYmxlLWNhcHRpb24taW5uZXIge1xuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgIH1cbmA7XG4iLCJpbXBvcnQgeyB1c2VMb2NhdGlvbiB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG4vLyBBIGN1c3RvbSBob29rIHRoYXQgYnVpbGRzIG9uIHVzZUxvY2F0aW9uIHRvIHBhcnNlIHRoZSBxdWVyeSBzdHJpbmcgZm9yIHlvdS5cbmZ1bmN0aW9uIHVzZVF1ZXJ5KCkge1xuICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKHVzZUxvY2F0aW9uKCkuc2VhcmNoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdXNlUXVlcnk7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBCdXR0b24gZnJvbSAnQHNwbHVuay9yZWFjdC11aS9CdXR0b24nO1xuaW1wb3J0IE1vZGFsIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvTW9kYWwnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgV2FpdFNwaW5uZXIgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9XYWl0U3Bpbm5lcic7XG5pbXBvcnQgeyBfIH0gZnJvbSAnQHNwbHVuay91aS11dGlscy9pMThuJztcblxuaW1wb3J0IHsgTU9ERV9DTE9ORSwgTU9ERV9DUkVBVEUsIE1PREVfRURJVCB9IGZyb20gJy4uL2NvbnN0YW50cy9tb2Rlcyc7XG5pbXBvcnQgQmFzZUZvcm1WaWV3IGZyb20gJy4vQmFzZUZvcm1WaWV3JztcblxuY29uc3QgTW9kYWxXcmFwcGVyID0gc3R5bGVkKE1vZGFsKWBcbiAgICB3aWR0aDogODAwcHg7XG5gO1xuXG5jbGFzcyBFbnRpdHlNb2RhbCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICAvLyBSZWYgaXMgdXNlZCBoZXJlIHRvIGNhbGwgc3VibWl0IG1ldGhvZCBvZiBmb3JtIG9ubHlcbiAgICAgICAgdGhpcy5mb3JtID0gUmVhY3QuY3JlYXRlUmVmKCk7IC8vIG5vc2VtZ3JlcDogdHlwZXNjcmlwdC5yZWFjdC5zZWN1cml0eS5hdWRpdC5yZWFjdC1uby1yZWZzLnJlYWN0LW5vLXJlZnNcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHsgaXNTdWJtaXRpdG5nOiBmYWxzZSB9O1xuXG4gICAgICAgIGlmIChwcm9wcy5tb2RlID09PSBNT0RFX0NSRUFURSkge1xuICAgICAgICAgICAgdGhpcy5idXR0b25UZXh0ID0gXygnQWRkJyk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvcHMubW9kZSA9PT0gTU9ERV9DTE9ORSkge1xuICAgICAgICAgICAgdGhpcy5idXR0b25UZXh0ID0gXygnU2F2ZScpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb3BzLm1vZGUgPT09IE1PREVfRURJVCkge1xuICAgICAgICAgICAgdGhpcy5idXR0b25UZXh0ID0gXygnVXBkYXRlJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJ1dHRvblRleHQgPSBfKCdTdWJtaXQnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZVJlcXVlc3RDbG9zZSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVSZXF1ZXN0Q2xvc2UoKTtcbiAgICB9O1xuXG4gICAgaGFuZGxlU3VibWl0ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmZvcm0uY3VycmVudC5oYW5kbGVTdWJtaXQoKTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVSZXF1ZXN0Q2xvc2UoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2V0OiB3aGV0aGVyIGZvcm0gaXMgc3VibWl0dGluZ1xuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gY2xvc2UgOiBjbG9zZSB0aGUgRW50aXR5IG1vZGFsXG4gICAgICovXG4gICAgaGFuZGxlRm9ybVN1Ym1pdCA9IChzZXQsIGNsb3NlKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc1N1Ym1pdGl0bmc6IHNldCB9KTtcbiAgICAgICAgaWYgKGNsb3NlKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZVJlcXVlc3RDbG9zZSgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxNb2RhbFdyYXBwZXIgb3Blbj17dGhpcy5wcm9wcy5vcGVufT5cbiAgICAgICAgICAgICAgICA8TW9kYWwuSGVhZGVyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlPXt0aGlzLnByb3BzLmZvcm1MYWJlbH1cbiAgICAgICAgICAgICAgICAgICAgb25SZXF1ZXN0Q2xvc2U9e3RoaXMuaGFuZGxlUmVxdWVzdENsb3NlfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPE1vZGFsLkJvZHk+XG4gICAgICAgICAgICAgICAgICAgIDxCYXNlRm9ybVZpZXcgLy8gbm9zZW1ncmVwOiB0eXBlc2NyaXB0LnJlYWN0LnNlY3VyaXR5LmF1ZGl0LnJlYWN0LW5vLXJlZnMucmVhY3Qtbm8tcmVmc1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmPXt0aGlzLmZvcm19XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlPXt0aGlzLnByb3BzLnBhZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlTmFtZT17dGhpcy5wcm9wcy5zZXJ2aWNlTmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU9e3RoaXMucHJvcHMubW9kZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YW56YU5hbWU9e3RoaXMucHJvcHMuc3RhbnphTmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUZvcm1TdWJtaXQ9e3RoaXMuaGFuZGxlRm9ybVN1Ym1pdH1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L01vZGFsLkJvZHk+XG4gICAgICAgICAgICAgICAgPE1vZGFsLkZvb3Rlcj5cbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwZWFyYW5jZT1cInNlY29uZGFyeVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZVJlcXVlc3RDbG9zZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtfKCdDYW5jZWwnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXt0aGlzLnN0YXRlLmlzU3VibWl0aXRuZ31cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2F2ZUJ0blwiXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlYXJhbmNlPVwicHJpbWFyeVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17dGhpcy5zdGF0ZS5pc1N1Ym1pdGl0bmcgPyA8V2FpdFNwaW5uZXIgLz4gOiB0aGlzLmJ1dHRvblRleHR9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZVN1Ym1pdH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXt0aGlzLnN0YXRlLmlzU3VibWl0aXRuZ31cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L01vZGFsLkZvb3Rlcj5cbiAgICAgICAgICAgIDwvTW9kYWxXcmFwcGVyPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuRW50aXR5TW9kYWwucHJvcFR5cGVzID0ge1xuICAgIHBhZ2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgaGFuZGxlUmVxdWVzdENsb3NlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZXJ2aWNlTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBtb2RlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHN0YW56YU5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZm9ybUxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgRW50aXR5TW9kYWw7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IExpbmsgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9MaW5rJztcblxuY29uc3QgTWFya2Rvd25XcmFwcGVyID0gc3R5bGVkLnNwYW5gXG4gICAgY29sb3I6ICR7KHByb3BzKSA9PiBwcm9wcy5jb2xvcn07XG5gO1xuXG5mdW5jdGlvbiBNYXJrZG93bk1lc3NhZ2UocHJvcHMpIHtcbiAgICAvLyBmbGF0TWFwIGFkZHMgdGhlIGxpbmsgdG8gdGhlIHBhcnQgb2YgdGV4dCB0aGF0IGhhcyBiZWVuIHNwbGl0IGZyb20gdGV4dFxuICAgIC8vIGFuZCByZXR1cm5zIGEgbmV3IGFycmF5IGZvcm1lZCBieSBhcHBseWluZyBhIGdpdmVuIGZ1bmN0aW9uIHRvIGVhY2ggZWxlbWVudCBvZiB0aGUgYXJyYXksXG4gICAgLy8gYW5kIHRoZW4gZmxhdHRlbmluZyB0aGUgcmVzdWx0IGJ5IG9uZSBsZXZlbFxuICAgIGZ1bmN0aW9uIGZsYXRNYXAoYXJyYXksIGZuKSB7XG4gICAgICAgIGxldCBtYXJrZG93blRleHQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgY29uc3QgbWFwcGluZyA9IGZuKGFycmF5W2ldKTtcbiAgICAgICAgICAgIG1hcmtkb3duVGV4dCA9IG1hcmtkb3duVGV4dC5jb25jYXQobWFwcGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hcmtkb3duVGV4dDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRNYXJrZG93blRleHQoKSB7XG4gICAgICAgIGxldCBtYXJrZG93blRleHQgPSBwcm9wcy50ZXh0O1xuICAgICAgICBpZiAocHJvcHMubWFya2Rvd25UeXBlID09PSAnbGluaycpIHtcbiAgICAgICAgICAgIG1hcmtkb3duVGV4dCA9IDxMaW5rIHRvPXtwcm9wcy5saW5rfT57cHJvcHMudGV4dH08L0xpbms+O1xuICAgICAgICB9IGVsc2UgaWYgKHByb3BzLm1hcmtkb3duVHlwZSA9PT0gJ2h5YnJpZCcpIHtcbiAgICAgICAgICAgIC8vIG1hcmtkb3duVHlwZSBoeWJyaWQgaXMgZm9yIHN1cHBvcnQgb2YgYm90aCB0ZXh0IGFuZCBsaW5rXG4gICAgICAgICAgICBtYXJrZG93blRleHQgPSBmbGF0TWFwKG1hcmtkb3duVGV4dC5zcGxpdChwcm9wcy50b2tlbiksIChwYXJ0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgcGFydCxcbiAgICAgICAgICAgICAgICAgICAgPExpbmsga2V5PXtwYXJ0fSB0bz17cHJvcHMubGlua30+XG4gICAgICAgICAgICAgICAgICAgICAgICB7cHJvcHMubGlua1RleHR9XG4gICAgICAgICAgICAgICAgICAgIDwvTGluaz4sXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbWFya2Rvd25UZXh0LnBvcCgpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb3BzLm1hcmtkb3duVHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICBtYXJrZG93blRleHQgPSA8TWFya2Rvd25XcmFwcGVyIGNvbG9yPXtwcm9wcy5jb2xvcn0+e3Byb3BzLnRleHR9PC9NYXJrZG93bldyYXBwZXI+O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hcmtkb3duVGV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gPGRpdiBkYXRhLXRlc3Q9XCJtc2ctbWFya2Rvd25cIj57Z2V0TWFya2Rvd25UZXh0KCl9PC9kaXY+O1xufVxuXG5NYXJrZG93bk1lc3NhZ2UucHJvcFR5cGVzID0ge1xuICAgIHRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbGluazogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBtYXJrZG93blR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG9rZW46IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbGlua1RleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBSZWFjdC5tZW1vKE1hcmtkb3duTWVzc2FnZSk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBMaW5rIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvTGluayc7XG5cbmZ1bmN0aW9uIEhlbHBMaW5rQ29tcG9uZW50KHByb3BzKSB7XG4gICAgY29uc3QgeyB0ZXh0LCBsaW5rIH0gPSBwcm9wcy5jb250cm9sT3B0aW9ucztcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxMaW5rIHRvPXtsaW5rfSBvcGVuSW5OZXdDb250ZXh0PlxuICAgICAgICAgICAge3RleHR9XG4gICAgICAgIDwvTGluaz5cbiAgICApO1xufVxuXG5IZWxwTGlua0NvbXBvbmVudC5wcm9wVHlwZXMgPSB7XG4gICAgY29udHJvbE9wdGlvbnM6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEhlbHBMaW5rQ29tcG9uZW50O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgVGV4dCBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL1RleHQnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbmNvbnN0IFRleHRXcmFwcGVyID0gc3R5bGVkKFRleHQpYFxuICAgIHdpZHRoOiAzMjBweCAhaW1wb3J0YW50O1xuYDtcblxuY2xhc3MgVGV4dENvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgaGFuZGxlQ2hhbmdlID0gKGUsIHsgdmFsdWUgfSkgPT4ge1xuICAgICAgICB0aGlzLnByb3BzLmhhbmRsZUNoYW5nZSh0aGlzLnByb3BzLmZpZWxkLCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxUZXh0V3JhcHBlclxuICAgICAgICAgICAgICAgIGlubGluZVxuICAgICAgICAgICAgICAgIGVycm9yPXt0aGlzLnByb3BzLmVycm9yfVxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXt0aGlzLnByb3BzPy5jb250cm9sT3B0aW9ucz8ucGxhY2Vob2xkZXJ9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXt0aGlzLnByb3BzLmZpZWxkfVxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXt0aGlzLnByb3BzLmRpc2FibGVkfVxuICAgICAgICAgICAgICAgIHZhbHVlPXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy52YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdGhpcy5wcm9wcy52YWx1ZSA9PT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJydcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5wcm9wcy52YWx1ZS50b1N0cmluZygpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgICAgICB0eXBlPXt0aGlzLnByb3BzLmVuY3J5cHRlZCA/ICdwYXNzd29yZCcgOiAndGV4dCd9XG4gICAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuVGV4dENvbXBvbmVudC5wcm9wVHlwZXMgPSB7XG4gICAgLy8gTnVtYmVyIGlzIGV4cGVjdGVkIGlmIHByb3ZpZGVkIG51bWJlciBpbiBnbG9iYWxDb25maWcuanNvbiBpbnN0ZWFkIG9mIGEgc3RyaW5nLlxuICAgIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gICAgaGFuZGxlQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGZpZWxkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBjb250cm9sT3B0aW9uczogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBlbmNyeXB0ZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRleHRDb21wb25lbnQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgU2VsZWN0IGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvU2VsZWN0JztcbmltcG9ydCBDb21ib0JveCBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL0NvbWJvQm94JztcbmltcG9ydCBCdXR0b24gZnJvbSAnQHNwbHVuay9yZWFjdC11aS9CdXR0b24nO1xuaW1wb3J0IENsZWFyIGZyb20gJ0BzcGx1bmsvcmVhY3QtaWNvbnMvQ2xlYXInO1xuaW1wb3J0IHsgXyB9IGZyb20gJ0BzcGx1bmsvdWktdXRpbHMvaTE4bic7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbmltcG9ydCB7IGF4aW9zQ2FsbFdyYXBwZXIgfSBmcm9tICcuLi91dGlsL2F4aW9zQ2FsbFdyYXBwZXInO1xuaW1wb3J0IHsgZmlsdGVyUmVzcG9uc2UgfSBmcm9tICcuLi91dGlsL3V0aWwnO1xuXG5jb25zdCBTZWxlY3RXcmFwcGVyID0gc3R5bGVkKFNlbGVjdClgXG4gICAgd2lkdGg6IDMyMHB4ICFpbXBvcnRhbnQ7XG5gO1xuXG5jb25zdCBTdHlsZWREaXYgPSBzdHlsZWQuZGl2YFxuICAgIGRpdjpmaXJzdC1jaGlsZCB7XG4gICAgICAgIHdpZHRoOiAzMjBweCAhaW1wb3J0YW50O1xuICAgIH1cbmA7XG5cbmZ1bmN0aW9uIFNpbmdsZUlucHV0Q29tcG9uZW50KHByb3BzKSB7XG4gICAgY29uc3Qge1xuICAgICAgICBmaWVsZCxcbiAgICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgICAgZXJyb3IgPSBmYWxzZSxcbiAgICAgICAgY29udHJvbE9wdGlvbnMsXG4gICAgICAgIGRlcGVuZGVuY3lWYWx1ZXMsXG4gICAgICAgIC4uLnJlc3RQcm9wc1xuICAgIH0gPSBwcm9wcztcbiAgICBjb25zdCB7XG4gICAgICAgIGVuZHBvaW50VXJsLFxuICAgICAgICBkZW55TGlzdCxcbiAgICAgICAgYWxsb3dMaXN0LFxuICAgICAgICBwbGFjZWhvbGRlciA9IF8oJ1NlbGVjdCBhIHZhbHVlJyksXG4gICAgICAgIGRlcGVuZGVuY2llcyxcbiAgICAgICAgY3JlYXRlU2VhcmNoQ2hvaWNlLFxuICAgICAgICByZWZlcmVuY2VOYW1lLFxuICAgICAgICBkaXNhYmxlU2VhcmNoLFxuICAgICAgICBsYWJlbEZpZWxkLFxuICAgICAgICBhdXRvQ29tcGxldGVGaWVsZHMsXG4gICAgICAgIGhpZGVDbGVhckJ0bixcbiAgICB9ID0gY29udHJvbE9wdGlvbnM7XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZSwgb2JqKSB7XG4gICAgICAgIHJlc3RQcm9wcy5oYW5kbGVDaGFuZ2UoZmllbGQsIG9iai52YWx1ZSk7XG4gICAgfVxuICAgIGNvbnN0IE9wdGlvbiA9IGNyZWF0ZVNlYXJjaENob2ljZSA/IENvbWJvQm94Lk9wdGlvbiA6IFNlbGVjdC5PcHRpb247XG4gICAgY29uc3QgSGVhZGluZyA9IGNyZWF0ZVNlYXJjaENob2ljZSA/IENvbWJvQm94LkhlYWRpbmcgOiBTZWxlY3QuSGVhZGluZztcblxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlT3B0aW9ucyhpdGVtcykge1xuICAgICAgICBjb25zdCBkYXRhID0gW107XG4gICAgICAgIGl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGlmIChpdGVtLnZhbHVlICYmIGl0ZW0ubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBkYXRhLnB1c2goPE9wdGlvbiBsYWJlbD17aXRlbS5sYWJlbH0gdmFsdWU9e2l0ZW0udmFsdWV9IGtleT17aXRlbS52YWx1ZX0gLz4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGl0ZW0uY2hpbGRyZW4gJiYgaXRlbS5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGRhdGEucHVzaCg8SGVhZGluZyBrZXk9e2l0ZW0ubGFiZWx9PntpdGVtLmxhYmVsfTwvSGVhZGluZz4pO1xuICAgICAgICAgICAgICAgIGl0ZW0uY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wdXNoKDxPcHRpb24gbGFiZWw9e2NoaWxkLmxhYmVsfSB2YWx1ZT17Y2hpbGQudmFsdWV9IGtleT17Y2hpbGQudmFsdWV9IC8+KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBbb3B0aW9ucywgc2V0T3B0aW9uc10gPSB1c2VTdGF0ZShudWxsKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghZW5kcG9pbnRVcmwgJiYgIXJlZmVyZW5jZU5hbWUgJiYgYXV0b0NvbXBsZXRlRmllbGRzKSB7XG4gICAgICAgICAgICBzZXRPcHRpb25zKGdlbmVyYXRlT3B0aW9ucyhhdXRvQ29tcGxldGVGaWVsZHMpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgY29uc3Qgc291cmNlID0gYXhpb3MuQ2FuY2VsVG9rZW4uc291cmNlKCk7XG5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvd1xuICAgICAgICBjb25zdCBvcHRpb25zID0geyBDYW5jZWxUb2tlbjogc291cmNlLnRva2VuLCBoYW5kbGVFcnJvcjogdHJ1ZSB9O1xuICAgICAgICBpZiAocmVmZXJlbmNlTmFtZSkge1xuICAgICAgICAgICAgb3B0aW9ucy5zZXJ2aWNlTmFtZSA9IHJlZmVyZW5jZU5hbWU7XG4gICAgICAgIH0gZWxzZSBpZiAoZW5kcG9pbnRVcmwpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuZW5kcG9pbnRVcmwgPSBlbmRwb2ludFVybDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZXBlbmRlbmN5VmFsdWVzKSB7XG4gICAgICAgICAgICBvcHRpb25zLnBhcmFtcyA9IGRlcGVuZGVuY3lWYWx1ZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZXBlbmRlbmNpZXMgfHwgZGVwZW5kZW5jeVZhbHVlcykge1xuICAgICAgICAgICAgc2V0TG9hZGluZyh0cnVlKTtcbiAgICAgICAgICAgIGF4aW9zQ2FsbFdyYXBwZXIob3B0aW9ucylcbiAgICAgICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldE9wdGlvbnMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVPcHRpb25zKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJSZXNwb25zZShyZXNwb25zZS5kYXRhLmVudHJ5LCBsYWJlbEZpZWxkLCBhbGxvd0xpc3QsIGRlbnlMaXN0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBzb3VyY2UuY2FuY2VsKCdPcGVyYXRpb24gY2FuY2VsZWQuJyk7XG4gICAgICAgICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIH07XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgICB9LCBbZGVwZW5kZW5jeVZhbHVlc10pO1xuXG4gICAgY29uc3QgZWZmZWN0aXZlRGlzYWJsZWQgPSBsb2FkaW5nID8gdHJ1ZSA6IGRpc2FibGVkO1xuICAgIGNvbnN0IGVmZmVjdGl2ZVBsYWNlaG9sZGVyID0gbG9hZGluZyA/IF8oJ0xvYWRpbmcnKSA6IHBsYWNlaG9sZGVyO1xuICAgIC8vIGhpZGVDbGVhckJ0bj10cnVlIG9ubHkgcGFzc2VkIGZvciBPQXV0aCBlbHNlIGl0cyB1bmRlZmluZWRcbiAgICBjb25zdCBlZmZlY3RpdmVJc0NsZWFyYWJsZSA9IGVmZmVjdGl2ZURpc2FibGVkID8gZmFsc2UgOiAhaGlkZUNsZWFyQnRuO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICAgIHtjcmVhdGVTZWFyY2hDaG9pY2UgPyAoXG4gICAgICAgICAgICAgICAgPFN0eWxlZERpdiBjbGFzc05hbWU9XCJkcm9wZG93bkJveFwiPlxuICAgICAgICAgICAgICAgICAgICA8Q29tYm9Cb3hcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtwcm9wcy52YWx1ZSA9PT0gbnVsbCA/ICcnIDogcHJvcHMudmFsdWV9XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lPXtmaWVsZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yPXtlcnJvcn1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtlZmZlY3RpdmVQbGFjZWhvbGRlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtlZmZlY3RpdmVEaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmxpbmVcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAge29wdGlvbnMgJiYgb3B0aW9ucy5sZW5ndGggPiAwICYmIG9wdGlvbnN9XG4gICAgICAgICAgICAgICAgICAgIDwvQ29tYm9Cb3g+XG4gICAgICAgICAgICAgICAgPC9TdHlsZWREaXY+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgIDxTZWxlY3RXcmFwcGVyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkcm9wZG93bkJveFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRlc3QtbG9hZGluZz17bG9hZGluZ31cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtwcm9wcy52YWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9e2ZpZWxkfVxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I9e2Vycm9yfVxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e2VmZmVjdGl2ZVBsYWNlaG9sZGVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2VmZmVjdGl2ZURpc2FibGVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcj17IWRpc2FibGVTZWFyY2h9XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmxpbmVcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAge29wdGlvbnMgJiYgb3B0aW9ucy5sZW5ndGggPiAwICYmIG9wdGlvbnN9XG4gICAgICAgICAgICAgICAgICAgIDwvU2VsZWN0V3JhcHBlcj5cbiAgICAgICAgICAgICAgICAgICAge2VmZmVjdGl2ZUlzQ2xlYXJhYmxlID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGVzdD1cImNsZWFyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlYXJhbmNlPVwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uPXs8Q2xlYXIgLz59XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gcmVzdFByb3BzLmhhbmRsZUNoYW5nZShmaWVsZCwgJycpfVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICApfVxuICAgICAgICA8Lz5cbiAgICApO1xufVxuXG5TaW5nbGVJbnB1dENvbXBvbmVudC5wcm9wVHlwZXMgPSB7XG4gICAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBoYW5kbGVDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZmllbGQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZGVwZW5kZW5jeVZhbHVlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjb250cm9sT3B0aW9uczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgYXV0b0NvbXBsZXRlRmllbGRzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgICAgIGVuZHBvaW50VXJsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBkZW55TGlzdDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgYWxsb3dMaXN0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgZGVwZW5kZW5jaWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgICAgIGNyZWF0ZVNlYXJjaENob2ljZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgIHJlZmVyZW5jZU5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGRpc2FibGVTZWFyY2g6IFByb3BUeXBlcy5ib29sLFxuICAgICAgICBsYWJlbEZpZWxkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBoaWRlQ2xlYXJCdG46IFByb3BUeXBlcy5ib29sLFxuICAgIH0pLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgU2luZ2xlSW5wdXRDb21wb25lbnQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgTXVsdGlzZWxlY3QgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9NdWx0aXNlbGVjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5cbmltcG9ydCB7IGF4aW9zQ2FsbFdyYXBwZXIgfSBmcm9tICcuLi91dGlsL2F4aW9zQ2FsbFdyYXBwZXInO1xuaW1wb3J0IHsgZmlsdGVyUmVzcG9uc2UgfSBmcm9tICcuLi91dGlsL3V0aWwnO1xuaW1wb3J0IHsgZ2V0Rm9ybWF0dGVkTWVzc2FnZSB9IGZyb20gJy4uL3V0aWwvbWVzc2FnZVV0aWwnO1xuXG5jb25zdCBNdWx0aVNlbGVjdFdyYXBwZXIgPSBzdHlsZWQoTXVsdGlzZWxlY3QpYFxuICAgIHdpZHRoOiAzMjBweCAhaW1wb3J0YW50O1xuYDtcblxuZnVuY3Rpb24gTXVsdGlJbnB1dENvbXBvbmVudChwcm9wcykge1xuICAgIGNvbnN0IHtcbiAgICAgICAgZmllbGQsXG4gICAgICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgICAgIGVycm9yID0gZmFsc2UsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBjb250cm9sT3B0aW9ucyxcbiAgICAgICAgZGVwZW5kZW5jeVZhbHVlcyxcbiAgICAgICAgLi4ucmVzdFByb3BzXG4gICAgfSA9IHByb3BzO1xuICAgIGNvbnN0IHtcbiAgICAgICAgZW5kcG9pbnRVcmwsXG4gICAgICAgIGRlbnlMaXN0LFxuICAgICAgICBhbGxvd0xpc3QsXG4gICAgICAgIGl0ZW1zLFxuICAgICAgICBkZXBlbmRlbmNpZXMsXG4gICAgICAgIHJlZmVyZW5jZU5hbWUsXG4gICAgICAgIHBsYWNlaG9sZGVyLFxuICAgICAgICBjcmVhdGVTZWFyY2hDaG9pY2UsXG4gICAgICAgIGxhYmVsRmllbGQsXG4gICAgICAgIGRlbGltaXRlciA9ICcsJyxcbiAgICB9ID0gY29udHJvbE9wdGlvbnM7XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZSwgeyB2YWx1ZXMgfSkge1xuICAgICAgICByZXN0UHJvcHMuaGFuZGxlQ2hhbmdlKGZpZWxkLCB2YWx1ZXMuam9pbihkZWxpbWl0ZXIpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZU9wdGlvbnMoaXRlbUxpc3QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW1MaXN0Lm1hcCgoaXRlbSkgPT4gKFxuICAgICAgICAgICAgPE11bHRpc2VsZWN0Lk9wdGlvbiBsYWJlbD17aXRlbS5sYWJlbH0gdmFsdWU9e2l0ZW0udmFsdWV9IGtleT17aXRlbS52YWx1ZX0gLz5cbiAgICAgICAgKSk7XG4gICAgfVxuXG4gICAgY29uc3QgW2xvYWRpbmcsIHNldExvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IFtvcHRpb25zLCBzZXRPcHRpb25zXSA9IHVzZVN0YXRlKG51bGwpO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCFlbmRwb2ludFVybCAmJiBpdGVtcykge1xuICAgICAgICAgICAgc2V0T3B0aW9ucyhnZW5lcmF0ZU9wdGlvbnMoaXRlbXMpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgY29uc3Qgc291cmNlID0gYXhpb3MuQ2FuY2VsVG9rZW4uc291cmNlKCk7XG5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvd1xuICAgICAgICBjb25zdCBvcHRpb25zID0geyBDYW5jZWxUb2tlbjogc291cmNlLnRva2VuLCBoYW5kbGVFcnJvcjogdHJ1ZSB9O1xuICAgICAgICBpZiAocmVmZXJlbmNlTmFtZSkge1xuICAgICAgICAgICAgb3B0aW9ucy5zZXJ2aWNlTmFtZSA9IHJlZmVyZW5jZU5hbWU7XG4gICAgICAgIH0gZWxzZSBpZiAoZW5kcG9pbnRVcmwpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuZW5kcG9pbnRVcmwgPSBlbmRwb2ludFVybDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZXBlbmRlbmN5VmFsdWVzKSB7XG4gICAgICAgICAgICBvcHRpb25zLnBhcmFtcyA9IGRlcGVuZGVuY3lWYWx1ZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZXBlbmRlbmNpZXMgfHwgZGVwZW5kZW5jeVZhbHVlcykge1xuICAgICAgICAgICAgc2V0TG9hZGluZyh0cnVlKTtcbiAgICAgICAgICAgIGF4aW9zQ2FsbFdyYXBwZXIob3B0aW9ucylcbiAgICAgICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldE9wdGlvbnMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVPcHRpb25zKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJSZXNwb25zZShyZXNwb25zZS5kYXRhLmVudHJ5LCBsYWJlbEZpZWxkLCBhbGxvd0xpc3QsIGRlbnlMaXN0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBzb3VyY2UuY2FuY2VsKCdPcGVyYXRpb24gY2FuY2VsZWQuJyk7XG4gICAgICAgICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIH07XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgICB9LCBbZGVwZW5kZW5jeVZhbHVlc10pO1xuXG4gICAgY29uc3QgZWZmZWN0aXZlRGlzYWJsZWQgPSBsb2FkaW5nID8gdHJ1ZSA6IGRpc2FibGVkO1xuICAgIGNvbnN0IGVmZmVjdGl2ZVBsYWNlaG9sZGVyID0gbG9hZGluZyA/IGdldEZvcm1hdHRlZE1lc3NhZ2UoMTE1KSA6IHBsYWNlaG9sZGVyO1xuXG4gICAgY29uc3QgdmFsdWVMaXN0ID0gdmFsdWUgPyB2YWx1ZS5zcGxpdChkZWxpbWl0ZXIpIDogW107XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8TXVsdGlTZWxlY3RXcmFwcGVyXG4gICAgICAgICAgICB2YWx1ZXM9e3ZhbHVlTGlzdH1cbiAgICAgICAgICAgIGVycm9yPXtlcnJvcn1cbiAgICAgICAgICAgIG5hbWU9e2ZpZWxkfVxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9e2VmZmVjdGl2ZVBsYWNlaG9sZGVyfVxuICAgICAgICAgICAgZGlzYWJsZWQ9e2VmZmVjdGl2ZURpc2FibGVkfVxuICAgICAgICAgICAgYWxsb3dOZXdWYWx1ZXM9e2NyZWF0ZVNlYXJjaENob2ljZX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICBpbmxpbmVcbiAgICAgICAgPlxuICAgICAgICAgICAge29wdGlvbnMgJiYgb3B0aW9ucy5sZW5ndGggPiAwICYmIG9wdGlvbnN9XG4gICAgICAgIDwvTXVsdGlTZWxlY3RXcmFwcGVyPlxuICAgICk7XG59XG5cbk11bHRpSW5wdXRDb21wb25lbnQucHJvcFR5cGVzID0ge1xuICAgIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgaGFuZGxlQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGZpZWxkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGRlcGVuZGVuY3lWYWx1ZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY29udHJvbE9wdGlvbnM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgIGRlbGltaXRlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGNyZWF0ZVNlYXJjaENob2ljZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgIHJlZmVyZW5jZU5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGRlcGVuZGVuY2llczogUHJvcFR5cGVzLmFycmF5LFxuICAgICAgICBlbmRwb2ludFVybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgZGVueUxpc3Q6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGFsbG93TGlzdDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgbGFiZWxGaWVsZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgaXRlbXM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgICAgICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICAgICAgICBsYWJlbDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICAgICAgICB9KVxuICAgICAgICApLFxuICAgIH0pLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgTXVsdGlJbnB1dENvbXBvbmVudDtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFN3aXRjaCBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL1N3aXRjaCc7XG5pbXBvcnQgeyBpc0ZhbHNlIH0gZnJvbSAnLi4vdXRpbC91dGlsJztcblxuY2xhc3MgQ2hlY2tCb3hDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGhhbmRsZUNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMudmFsdWUgJiYgIWlzRmFsc2UodGhpcy5wcm9wcy52YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuaGFuZGxlQ2hhbmdlKHRoaXMucHJvcHMuZmllbGQsIDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVDaGFuZ2UodGhpcy5wcm9wcy5maWVsZCwgMSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFN3aXRjaFxuICAgICAgICAgICAgICAgIGtleT17dGhpcy5wcm9wcy5maWVsZH1cbiAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy5maWVsZH1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17dGhpcy5wcm9wcy5kaXNhYmxlZH1cbiAgICAgICAgICAgICAgICBzZWxlY3RlZD17ISh0aGlzLnByb3BzLnZhbHVlID8gaXNGYWxzZSh0aGlzLnByb3BzLnZhbHVlKSA6IHRydWUpfVxuICAgICAgICAgICAgICAgIGFwcGVhcmFuY2U9XCJjaGVja2JveFwiXG4gICAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuQ2hlY2tCb3hDb21wb25lbnQucHJvcFR5cGVzID0ge1xuICAgIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAgIGhhbmRsZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBmaWVsZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBDaGVja0JveENvbXBvbmVudDtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJhZGlvQmFyIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvUmFkaW9CYXInO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbmNvbnN0IFJhZGlvQmFyV3JhcHBlciA9IHN0eWxlZChSYWRpb0JhcilgXG4gICAgd2lkdGg6IDMyMHB4O1xuYDtcblxuY2xhc3MgUmFkaW9Db21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGhhbmRsZUNoYW5nZSA9IChlLCB7IHZhbHVlIH0pID0+IHtcbiAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVDaGFuZ2UodGhpcy5wcm9wcy5maWVsZCwgdmFsdWUpO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8UmFkaW9CYXJXcmFwcGVyXG4gICAgICAgICAgICAgICAgaW5saW5lXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfVxuICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLnZhbHVlfVxuICAgICAgICAgICAgICAgIGtleT17dGhpcy5wcm9wcy5maWVsZH1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jb250cm9sT3B0aW9ucy5pdGVtcy5tYXAoKGl0ZW0pID0+IChcbiAgICAgICAgICAgICAgICAgICAgPFJhZGlvQmFyLk9wdGlvbiBrZXk9e2l0ZW0udmFsdWV9IHZhbHVlPXtpdGVtLnZhbHVlfSBsYWJlbD17aXRlbS5sYWJlbH0gLz5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvUmFkaW9CYXJXcmFwcGVyPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuUmFkaW9Db21wb25lbnQucHJvcFR5cGVzID0ge1xuICAgIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGhhbmRsZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBmaWVsZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb250cm9sT3B0aW9uczogUHJvcFR5cGVzLm9iamVjdCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGlvQ29tcG9uZW50O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgU3RhdGljQ29udGVudCBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL1N0YXRpY0NvbnRlbnQnO1xuXG5mdW5jdGlvbiBQbGFjZWhvbGRlckNvbXBvbmVudChwcm9wcykge1xuICAgIGNvbnN0IHsgZGVmYXVsdFZhbHVlIH0gPSBwcm9wcy5jb250cm9sT3B0aW9ucztcblxuICAgIHJldHVybiA8U3RhdGljQ29udGVudD57ZGVmYXVsdFZhbHVlfTwvU3RhdGljQ29udGVudD47XG59XG5cblBsYWNlaG9sZGVyQ29tcG9uZW50LnByb3BUeXBlcyA9IHtcbiAgICBjb250cm9sT3B0aW9uczogUHJvcFR5cGVzLm9iamVjdCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBsYWNlaG9sZGVyQ29tcG9uZW50O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBfIH0gZnJvbSAnQHNwbHVuay91aS11dGlscy9pMThuJztcblxuaW1wb3J0IHsgZ2V0VW5pZmllZENvbmZpZ3MgfSBmcm9tICcuLi91dGlsL3V0aWwnO1xuaW1wb3J0IHsgZ2V0QnVpbGREaXJQYXRoIH0gZnJvbSAnLi4vdXRpbC9zY3JpcHQnO1xuXG5jbGFzcyBDdXN0b21Db250cm9sIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNob3VsZFJlbmRlciA9IHRydWU7XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIGNvbnN0IGdsb2JhbENvbmZpZyA9IGdldFVuaWZpZWRDb25maWdzKCk7XG4gICAgICAgIGNvbnN0IGFwcE5hbWUgPSBnbG9iYWxDb25maWcubWV0YS5uYW1lO1xuXG4gICAgICAgIHRoaXMubG9hZEN1c3RvbUNvbnRyb2woXG4gICAgICAgICAgICB0aGlzLnByb3BzLmNvbnRyb2xPcHRpb25zLnNyYyxcbiAgICAgICAgICAgIHRoaXMucHJvcHMuY29udHJvbE9wdGlvbnMudHlwZSxcbiAgICAgICAgICAgIGFwcE5hbWVcbiAgICAgICAgKS50aGVuKChDb250cm9sKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjdXN0b21Db250cm9sID0gbmV3IENvbnRyb2woXG4gICAgICAgICAgICAgICAgZ2xvYmFsQ29uZmlnLFxuICAgICAgICAgICAgICAgIHRoaXMuZWwsXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5kYXRhLFxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUsXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy51dGlsQ3VzdG9tRnVuY3Rpb25zXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY3VzdG9tQ29udHJvbC5yZW5kZXIoKTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXN0b21Db250cm9sLnZhbGlkYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmFkZEN1c3RvbVZhbGlkYXRvcih0aGlzLnByb3BzLmZpZWxkLCBjdXN0b21Db250cm9sLnZhbGlkYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvYWRpbmc6IGZhbHNlIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICAgICAgaWYgKCFuZXh0U3RhdGUubG9hZGluZyAmJiB0aGlzLnNob3VsZFJlbmRlcikge1xuICAgICAgICAgICAgdGhpcy5zaG91bGRSZW5kZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBsb2FkQ3VzdG9tQ29udHJvbCA9IChtb2R1bGUsIHR5cGUsIGFwcE5hbWUpID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2V4dGVybmFsJykge1xuICAgICAgICAgICAgICAgIGltcG9ydCgvKiB3ZWJwYWNrSWdub3JlOiB0cnVlICovIGAke2dldEJ1aWxkRGlyUGF0aCgpfS9jdXN0b20vJHttb2R1bGV9LmpzYCkudGhlbihcbiAgICAgICAgICAgICAgICAgICAgKGV4dGVybmFsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBDb250cm9sID0gZXh0ZXJuYWwuZGVmYXVsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoQ29udHJvbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfX25vbl93ZWJwYWNrX3JlcXVpcmVfXyhbYGFwcC8ke2FwcE5hbWV9L2pzL2J1aWxkL2N1c3RvbS8ke21vZHVsZX1gXSwgKENvbnRyb2wpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShDb250cm9sKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHNldFZhbHVlID0gKG5ld1ZhbHVlKSA9PiB7XG4gICAgICAgIHRoaXMucHJvcHMuaGFuZGxlQ2hhbmdlKHRoaXMucHJvcHMuZmllbGQsIG5ld1ZhbHVlKTtcbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5sb2FkaW5nICYmIF8oJ0xvYWRpbmcuLi4nKX1cbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIC8vIG5vc2VtZ3JlcDogdHlwZXNjcmlwdC5yZWFjdC5zZWN1cml0eS5hdWRpdC5yZWFjdC1uby1yZWZzLnJlYWN0LW5vLXJlZnNcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZj17KGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbCA9IGVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IHZpc2liaWxpdHk6IHRoaXMuc3RhdGUubG9hZGluZyA/ICdoaWRkZW4nIDogJ3Zpc2libGUnIH19XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC8+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5DdXN0b21Db250cm9sLnByb3BUeXBlcyA9IHtcbiAgICBkYXRhOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGZpZWxkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGhhbmRsZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgY29udHJvbE9wdGlvbnM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgYWRkQ3VzdG9tVmFsaWRhdG9yOiBQcm9wVHlwZXMuZnVuYyxcbiAgICB1dGlsQ3VzdG9tRnVuY3Rpb25zOiBQcm9wVHlwZXMub2JqZWN0LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ3VzdG9tQ29udHJvbDtcbiIsImltcG9ydCBIZWxwTGlua0NvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnRzL0hlbHBMaW5rQ29tcG9uZW50JztcbmltcG9ydCBUZXh0Q29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudHMvVGV4dENvbXBvbmVudCc7XG5pbXBvcnQgU2luZ2xlSW5wdXRDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50cy9TaW5nbGVJbnB1dENvbXBvbmVudCc7XG5pbXBvcnQgTXVsdGlJbnB1dENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnRzL011bHRpSW5wdXRDb21wb25lbnQnO1xuaW1wb3J0IENoZWNrQm94Q29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudHMvQ2hlY2tCb3hDb21wb25lbnQnO1xuaW1wb3J0IFJhZGlvQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudHMvUmFkaW9Db21wb25lbnQnO1xuaW1wb3J0IFBsYWNlaG9sZGVyQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudHMvUGxhY2Vob2xkZXJDb21wb25lbnQnO1xuaW1wb3J0IEN1c3RvbUNvbnRyb2wgZnJvbSAnLi4vY29tcG9uZW50cy9DdXN0b21Db250cm9sJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHRleHQ6IFRleHRDb21wb25lbnQsXG4gICAgc2luZ2xlU2VsZWN0OiBTaW5nbGVJbnB1dENvbXBvbmVudCxcbiAgICBoZWxwTGluazogSGVscExpbmtDb21wb25lbnQsXG4gICAgbXVsdGlwbGVTZWxlY3Q6IE11bHRpSW5wdXRDb21wb25lbnQsXG4gICAgY2hlY2tib3g6IENoZWNrQm94Q29tcG9uZW50LFxuICAgIHJhZGlvOiBSYWRpb0NvbXBvbmVudCxcbiAgICBwbGFjZWhvbGRlcjogUGxhY2Vob2xkZXJDb21wb25lbnQsXG4gICAgY3VzdG9tOiBDdXN0b21Db250cm9sLFxufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IENvbnRyb2xHcm91cCBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL0NvbnRyb2xHcm91cCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcblxuaW1wb3J0IE1hcmtkb3duTWVzc2FnZSBmcm9tICcuL01hcmtkb3duTWVzc2FnZSc7XG5pbXBvcnQgQ09OVFJPTF9UWVBFX01BUCBmcm9tICcuLi9jb25zdGFudHMvQ29udHJvbFR5cGVNYXAnO1xuXG5jb25zdCBDdXN0b21FbGVtZW50ID0gc3R5bGVkLmRpdmBcbiAgICBtYXJnaW4tbGVmdDogMzBweDtcbmA7XG5cbmNvbnN0IENvbnRyb2xHcm91cFdyYXBwZXIgPSBzdHlsZWQoQ29udHJvbEdyb3VwKS5hdHRycygocHJvcHMpID0+ICh7XG4gICAgJ2RhdGEtbmFtZSc6IHByb3BzLmRhdGFOYW1lLFxufSkpYFxuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1heC13aWR0aDogMTAwJTtcblxuICAgID4gKiB7XG4gICAgICAgICY6Zmlyc3QtY2hpbGQge1xuICAgICAgICAgICAgd2lkdGg6IDI0MHB4ICFpbXBvcnRhbnQ7XG4gICAgICAgIH1cbiAgICAgICAgJjpudGgtY2hpbGQoMykge1xuICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDI3MHB4ICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICB3aWR0aDogMzIwcHg7XG4gICAgICAgIH1cbiAgICB9XG5gO1xuXG5jbGFzcyBDb250cm9sV3JhcHBlciBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5jb250cm9sVHlwZSA9IHRoaXMuaXNTdHJpbmcocHJvcHMuZW50aXR5LnR5cGUpXG4gICAgICAgICAgICA/IENPTlRST0xfVFlQRV9NQVBbcHJvcHMuZW50aXR5LnR5cGVdXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIC8vIEFkZCAnb3B0aW9uYWwnIHBsYWNlaG9sZGVyIGZvciBvcHRpb25hbCBmaWVsZFxuICAgICAgICAvLyBOb3RlOiBmb3Igb2F1dGggZmllbGQgaXQgaXMgcG9zc2libGUgcmVxdWlyZWQgaXMgZmFsc2UgYnV0IHRoZSBmaWVsZCBpcyBhY3R1YWxseSByZXF1aXJlZFxuICAgICAgICAvLyBiYXNlZCBvbiB3aGF0IHR5cGUgb2YgYXV0aGVudGljYXRpb24gaXMgc2VsZWN0ZWRcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdGhpcy5wcm9wcy5lbnRpdHkub3B0aW9ucztcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgIXRoaXMucHJvcHMuZW50aXR5LnJlcXVpcmVkICYmXG4gICAgICAgICAgICAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMucHJvcHMuZW50aXR5LCAnb2F1dGhfZmllbGQnKSAmJlxuICAgICAgICAgICAgIXRoaXMub3B0aW9ucz8ucGxhY2Vob2xkZXJcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnb3B0aW9uYWwnLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzU3RyaW5nID0gKHN0cikgPT4ge1xuICAgICAgICByZXR1cm4gISEodHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgfHwgc3RyIGluc3RhbmNlb2YgU3RyaW5nKTtcbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IGZpZWxkLCB0eXBlLCBsYWJlbCwgdG9vbHRpcCwgaGVscCwgZW5jcnlwdGVkID0gZmFsc2UgfSA9IHRoaXMucHJvcHMuZW50aXR5O1xuICAgICAgICBjb25zdCB7IGhhbmRsZUNoYW5nZSwgYWRkQ3VzdG9tVmFsaWRhdG9yLCB1dGlsQ3VzdG9tRnVuY3Rpb25zIH0gPSB0aGlzLnByb3BzLnV0aWxpdHlGdW5jdHM7XG4gICAgICAgIC8vIFdlIGhhdmUgdG8gcHV0IGVtcHR5IG9iamVjdCBiZWNhdXNlIG1hcmtEb3duTWVzc2FnZSBwcm9wIGNhbiBiZSB1bmRlZmluZWRcbiAgICAgICAgLy8gYmVjYXVzZSB3ZSBhcmUgbm90IGV4cGxpY2l0bHkgc2V0dGluZyBpdCBidXQgZXhwZWN0aW5nIGl0IGZyb20gY3VzdG9tIGhvb2tzIG9ubHkuXG4gICAgICAgIGNvbnN0IHsgdGV4dCwgbGluaywgY29sb3IsIG1hcmtkb3duVHlwZSwgdG9rZW4sIGxpbmtUZXh0IH0gPVxuICAgICAgICAgICAgdGhpcy5wcm9wcy5tYXJrZG93bk1lc3NhZ2UgfHwge307XG4gICAgICAgIGxldCByb3dWaWV3O1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5lbnRpdHkudHlwZSA9PT0gJ2N1c3RvbScpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMucHJvcHMudmFsdWUsXG4gICAgICAgICAgICAgICAgbW9kZTogdGhpcy5wcm9wcy5tb2RlLFxuICAgICAgICAgICAgICAgIHNlcnZpY2VOYW1lOiB0aGlzLnByb3BzLnNlcnZpY2VOYW1lLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcm93VmlldyA9IHRoaXMuY29udHJvbFR5cGVcbiAgICAgICAgICAgICAgICA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQodGhpcy5jb250cm9sVHlwZSwge1xuICAgICAgICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgaGFuZGxlQ2hhbmdlLFxuICAgICAgICAgICAgICAgICAgICAgIGFkZEN1c3RvbVZhbGlkYXRvcixcbiAgICAgICAgICAgICAgICAgICAgICB1dGlsQ3VzdG9tRnVuY3Rpb25zLFxuICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xPcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIDogYE5vIFZpZXcgRm91bmQgZm9yICR7dHlwZX0gdHlwZWA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByb3dWaWV3ID0gdGhpcy5jb250cm9sVHlwZVxuICAgICAgICAgICAgICAgID8gUmVhY3QuY3JlYXRlRWxlbWVudCh0aGlzLmNvbnRyb2xUeXBlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgaGFuZGxlQ2hhbmdlLFxuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnByb3BzLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xPcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IHRoaXMucHJvcHMuZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRoaXMucHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgICAgICAgICAgICAgZW5jcnlwdGVkLFxuICAgICAgICAgICAgICAgICAgICAgIGRlcGVuZGVuY3lWYWx1ZXM6IHRoaXMucHJvcHMuZGVwZW5kZW5jeVZhbHVlcyxcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgOiBgTm8gVmlldyBGb3VuZCBmb3IgJHt0eXBlfSB0eXBlYDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGhlbHBUZXh0ID0gKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICA8TWFya2Rvd25NZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgIHRleHQ9e3RleHQgfHwgJyd9XG4gICAgICAgICAgICAgICAgICAgIGxpbms9e2xpbmsgfHwgJyd9XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yPXtjb2xvciB8fCAnJ31cbiAgICAgICAgICAgICAgICAgICAgbWFya2Rvd25UeXBlPXttYXJrZG93blR5cGUgfHwgJyd9XG4gICAgICAgICAgICAgICAgICAgIHRva2VuPXt0b2tlbiB8fCAnJ31cbiAgICAgICAgICAgICAgICAgICAgbGlua1RleHQ9e2xpbmtUZXh0IHx8ICcnfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAge2hlbHB9XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy5wcm9wcy5kaXNwbGF5ICYmIChcbiAgICAgICAgICAgICAgICA8Q29udHJvbEdyb3VwV3JhcHBlclxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17bGFiZWx9XG4gICAgICAgICAgICAgICAgICAgIGhlbHA9e2hlbHBUZXh0fVxuICAgICAgICAgICAgICAgICAgICB0b29sdGlwPXt0b29sdGlwfVxuICAgICAgICAgICAgICAgICAgICBlcnJvcj17dGhpcy5wcm9wcy5lcnJvcn1cbiAgICAgICAgICAgICAgICAgICAgZGF0YU5hbWU9e2ZpZWxkfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPEN1c3RvbUVsZW1lbnQ+e3Jvd1ZpZXd9PC9DdXN0b21FbGVtZW50PlxuICAgICAgICAgICAgICAgIDwvQ29udHJvbEdyb3VwV3JhcHBlcj5cbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9XG59XG5cbkNvbnRyb2xXcmFwcGVyLnByb3BUeXBlcyA9IHtcbiAgICBtb2RlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHV0aWxpdHlGdW5jdHM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgdmFsdWU6IFByb3BUeXBlcy5hbnksXG4gICAgZGlzcGxheTogUHJvcFR5cGVzLmJvb2wsXG4gICAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuICAgIGVudGl0eTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbWFya2Rvd25NZXNzYWdlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHNlcnZpY2VOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGRlcGVuZGVuY3lWYWx1ZXM6IFByb3BUeXBlcy5vYmplY3QsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb250cm9sV3JhcHBlcjtcbiIsImltcG9ydCB7IGdldEZvcm1hdHRlZE1lc3NhZ2UgfSBmcm9tICcuLi91dGlsL21lc3NhZ2VVdGlsJztcblxuLy8gUmVnZXggb2YgaXB2NCwgZW1haWwgYW5kIGRhdGUgY29tZSBmcm9tXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYWxkZWVkL21ldGVvci1zaW1wbGUtc2NoZW1hL2Jsb2IvNGMxZTI1NzBiMTA1NWFkNjBlMWU2NTQwNTgyYjg4MmY3NjVmZGUxMy9zaW1wbGUtc2NoZW1hLmpzI0w1MjVcbmV4cG9ydCBjb25zdCBSRUdFWF9JUFY0ID0gL14oPzooPzpbMC0xXT9cXGR7MSwyfXwyWzAtNF1cXGR8MjVbMC01XSkoPzpcXC58JCkpezR9JC87XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuZXhwb3J0IGNvbnN0IFJFR0VYX0VNQUlMID0gL15bYS16QS1aMC05LiEjJCUmJyorXFwvPT9eX2B7fH1+LV0rQFthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPyg/OlxcLlthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPykqJC87XG5cbi8vIENvZGVRTDogVGhpcyBSZWdleCB3aWxsIGJlIGV4ZWN1dGVkIGF0IGNsaWVudCBzaWRlIGFuZCB0byBhdm9pZCByZWdyZXNzaW9uIHdlIHdvbid0IGZpeC5cbmV4cG9ydCBjb25zdCBSRUdFWF9VUkwgPSAvXig/Oig/Omh0dHBzP3xmdHB8b3BjXFwudGNwKTpcXC9cXC8pPyg/OlxcUysoPzo6XFxTKik/QCk/KD86KD86WzEtOV1cXGQ/fDFcXGRcXGR8MlswMV1cXGR8MjJbMC0zXSkoPzpcXC4oPzoxP1xcZHsxLDJ9fDJbMC00XVxcZHwyNVswLTVdKSl7Mn0oPzpcXC4oPzpbMS05XVxcZD98MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC00XSkpfCg/Oig/OlthLXpcXHUwMGExLVxcdWZmZmYwLTldKy0/Xz8pKlthLXpcXHUwMGExLVxcdWZmZmYwLTldKykoPzpcXC4oPzpbYS16XFx1MDBhMS1cXHVmZmZmMC05XSstPykqW2EtelxcdTAwYTEtXFx1ZmZmZjAtOV0rKSooPzpcXC4oPzpbYS16XFx1MDBhMS1cXHVmZmZmXXsyLH0pKT8pKD86OlxcZHsyLDV9KT8oPzpcXC9bXlxcc10qKT8kLztcblxuLy8gRnJvbSBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9ibG9iLzIuMTcuMS9tb21lbnQuanMjTDE5ODAgbW9tZW50LmpzIGlzIHVzaW5nIHJlZ2V4IGJlbG93IGZvciBjaGVja2luZyBJU084NjAxIGRhdGUgc3RyaW5nXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1lc2NhcGVcbmV4cG9ydCBjb25zdCBSRUdFWF9EQVRFID0gL15cXHMqKCg/OlsrLV1cXGR7Nn18XFxkezR9KS0oPzpcXGRcXGQtXFxkXFxkfFdcXGRcXGQtXFxkfFdcXGRcXGR8XFxkXFxkXFxkfFxcZFxcZCkpKD86KFR8ICkoXFxkXFxkKD86OlxcZFxcZCg/OjpcXGRcXGQoPzpbLixdXFxkKyk/KT8pPykoW1xcK1xcLV1cXGRcXGQoPzo6P1xcZFxcZCk/fFxccypaKT8pPyQvO1xuXG5leHBvcnQgY29uc3QgUFJFREVGSU5FRF9WQUxJREFUT1JTX0RJQ1QgPSB7XG4gICAgdXJsOiB7IHJlZ2V4OiBSRUdFWF9VUkwsIGlucHV0VmFsdWVUeXBlOiBnZXRGb3JtYXR0ZWRNZXNzYWdlKDExMSkgfSxcbiAgICBlbWFpbDogeyByZWdleDogUkVHRVhfRU1BSUwsIGlucHV0VmFsdWVUeXBlOiBnZXRGb3JtYXR0ZWRNZXNzYWdlKDExMikgfSxcbiAgICBpcHY0OiB7IHJlZ2V4OiBSRUdFWF9JUFY0LCBpbnB1dFZhbHVlVHlwZTogZ2V0Rm9ybWF0dGVkTWVzc2FnZSgxMTMpIH0sXG4gICAgZGF0ZTogeyByZWdleDogUkVHRVhfREFURSwgaW5wdXRWYWx1ZVR5cGU6IGdldEZvcm1hdHRlZE1lc3NhZ2UoMTE0KSB9LFxufTtcbiIsImltcG9ydCB7IFBSRURFRklORURfVkFMSURBVE9SU19ESUNUIH0gZnJvbSAnLi4vY29uc3RhbnRzL3ByZURlZmluZWRSZWdleCc7XG5pbXBvcnQgeyBnZXRGb3JtYXR0ZWRNZXNzYWdlIH0gZnJvbSAnLi9tZXNzYWdlVXRpbCc7XG5pbXBvcnQge1xuICAgIHBhcnNlTnVtYmVyVmFsaWRhdG9yLFxuICAgIHBhcnNlUmVnZXhSYXdTdHIsXG4gICAgcGFyc2VTdHJpbmdWYWxpZGF0b3IsXG4gICAgcGFyc2VGdW5jdGlvblJhd1N0cixcbn0gZnJvbSAnLi91Y2NDb25maWd1cmF0aW9uVmFsaWRhdG9ycyc7XG5cbi8vIFZhbGlkYXRlIHByb3ZpZGVkIHNhdmVWYWxpZGF0b3IgZnVuY3Rpb25cbmV4cG9ydCBmdW5jdGlvbiBTYXZlVmFsaWRhdG9yKHZhbGlkYXRvckZ1bmMsIGZvcm1EYXRhKSB7XG4gICAgY29uc3QgeyBlcnJvciwgcmVzdWx0IH0gPSBwYXJzZUZ1bmN0aW9uUmF3U3RyKHZhbGlkYXRvckZ1bmMpO1xuICAgIGlmIChlcnJvcikge1xuICAgICAgICByZXR1cm4geyBlcnJvck1zZzogZXJyb3IgfTtcbiAgICB9XG4gICAgY29uc3QgcmV0ID0gcmVzdWx0KGZvcm1EYXRhKTtcbiAgICBpZiAodHlwZW9mIHJldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3JNc2c6IHJldCB9O1xuICAgIH1cbn1cblxuY2xhc3MgVmFsaWRhdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihlbnRpdGllcykge1xuICAgICAgICB0aGlzLmVudGl0aWVzID0gZW50aXRpZXM7XG4gICAgICAgIHRoaXMuaXNOYW1lID0gZW50aXRpZXMuZmluZCgoZSkgPT4gZS5maWVsZCA9PT0gJ25hbWUnKTtcbiAgICB9XG5cbiAgICBjaGVja0lzRmllbGRIYXNJbnB1dCA9IChhdHRyVmFsdWUpID0+IHtcbiAgICAgICAgcmV0dXJuIGF0dHJWYWx1ZSAhPT0gdW5kZWZpbmVkICYmIGF0dHJWYWx1ZSAhPT0gJycgJiYgYXR0clZhbHVlICE9PSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBWYWxpZGF0ZSB0aGUgcmVxdWlyZWQgZmllbGQgaGFzIHZhbHVlXG4gICAgUmVxdWlyZWRWYWxpZGF0b3IoZmllbGQsIGxhYmVsLCBkYXRhKSB7XG4gICAgICAgIGlmICghdGhpcy5jaGVja0lzRmllbGRIYXNJbnB1dChkYXRhKSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3JGaWVsZDogZmllbGQsIGVycm9yTXNnOiBnZXRGb3JtYXR0ZWRNZXNzYWdlKDYsIFtsYWJlbF0pIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFZhbGlkYXRlIHRoZSBzdHJpbmcgbGVuZ3RoIG9mIGZpZWxkXG4gICAgU3RyaW5nVmFsaWRhdG9yKGZpZWxkLCBsYWJlbCwgdmFsaWRhdG9yLCBkYXRhKSB7XG4gICAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IHBhcnNlU3RyaW5nVmFsaWRhdG9yKHZhbGlkYXRvci5taW5MZW5ndGgsIHZhbGlkYXRvci5tYXhMZW5ndGgpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGVycm9yRmllbGQ6IGZpZWxkLCBlcnJvck1zZzogZXJyb3IgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jaGVja0lzRmllbGRIYXNJbnB1dChkYXRhKSAmJiBkYXRhLmxlbmd0aCA+IHZhbGlkYXRvci5tYXhMZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZXJyb3JGaWVsZDogZmllbGQsXG4gICAgICAgICAgICAgICAgZXJyb3JNc2c6IHZhbGlkYXRvci5lcnJvck1zZ1xuICAgICAgICAgICAgICAgICAgICA/IHZhbGlkYXRvci5lcnJvck1zZ1xuICAgICAgICAgICAgICAgICAgICA6IGdldEZvcm1hdHRlZE1lc3NhZ2UoMTgsIFtsYWJlbCwgdmFsaWRhdG9yLm1heExlbmd0aF0pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jaGVja0lzRmllbGRIYXNJbnB1dChkYXRhKSAmJiBkYXRhLmxlbmd0aCA8IHZhbGlkYXRvci5taW5MZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZXJyb3JGaWVsZDogZmllbGQsXG4gICAgICAgICAgICAgICAgZXJyb3JNc2c6IHZhbGlkYXRvci5lcnJvck1zZ1xuICAgICAgICAgICAgICAgICAgICA/IHZhbGlkYXRvci5lcnJvck1zZ1xuICAgICAgICAgICAgICAgICAgICA6IGdldEZvcm1hdHRlZE1lc3NhZ2UoMTcsIFtsYWJlbCwgdmFsaWRhdG9yLm1pbkxlbmd0aF0pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gVmFsaWRhdGUgdGhlIGZpZWxkIHNob3VsZCBtYXRjaCB0aGUgcHJvdmlkZWQgUmVnZXhcbiAgICBSZWdleFZhbGlkYXRvcihmaWVsZCwgbGFiZWwsIHZhbGlkYXRvciwgZGF0YSkge1xuICAgICAgICBjb25zdCB7IGVycm9yLCByZXN1bHQ6IHJlZ2V4IH0gPSBwYXJzZVJlZ2V4UmF3U3RyKHZhbGlkYXRvci5wYXR0ZXJuKTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4geyBlcnJvckZpZWxkOiBmaWVsZCwgZXJyb3JNc2c6IGVycm9yIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY2hlY2tJc0ZpZWxkSGFzSW5wdXQoZGF0YSkgJiYgIXJlZ2V4LnRlc3QoZGF0YSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZXJyb3JGaWVsZDogZmllbGQsXG4gICAgICAgICAgICAgICAgZXJyb3JNc2c6IHZhbGlkYXRvci5lcnJvck1zZ1xuICAgICAgICAgICAgICAgICAgICA/IHZhbGlkYXRvci5lcnJvck1zZ1xuICAgICAgICAgICAgICAgICAgICA6IGdldEZvcm1hdHRlZE1lc3NhZ2UoMTUsIFtsYWJlbCwgdmFsaWRhdG9yLnBhdHRlcm5dKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFZhbGlkYXRlIHRoZSBjdXN0b20gY29tcG9uZW50XG4gICAgc3RhdGljIEN1c3RvbVZhbGlkYXRvcih2YWxpZGF0b3JGdW5jLCBmaWVsZCwgZGF0YSkge1xuICAgICAgICBjb25zdCByZXQgPSB2YWxpZGF0b3JGdW5jKGZpZWxkLCBkYXRhKTtcbiAgICAgICAgaWYgKHR5cGVvZiByZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4geyBlcnJvckZpZWxkOiBmaWVsZCwgZXJyb3JNc2c6IHJldCB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBWYWxpZGF0ZSB0aGUgZmllbGQgc2hvdWxkIG1hdGNoIHByZWRlZmluZWQgUmVnZXhlc1xuICAgIFByZURlZmluZWRSZWdleFZhbGlkYXRvcihmaWVsZCwgbGFiZWwsIHZhbGlkYXRvciwgZGF0YSwgcGF0dGVybiwgaW5wdXRWYWx1ZVR5cGUpIHtcbiAgICAgICAgY29uc3QgeyBlcnJvciwgcmVzdWx0OiByZWdleCB9ID0gcGFyc2VSZWdleFJhd1N0cihwYXR0ZXJuKTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4geyBlcnJvckZpZWxkOiBmaWVsZCwgZXJyb3JNc2c6IGVycm9yIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY2hlY2tJc0ZpZWxkSGFzSW5wdXQoZGF0YSkgJiYgIXJlZ2V4LnRlc3QoZGF0YSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZXJyb3JGaWVsZDogZmllbGQsXG4gICAgICAgICAgICAgICAgZXJyb3JNc2c6IHZhbGlkYXRvci5lcnJvck1zZ1xuICAgICAgICAgICAgICAgICAgICA/IHZhbGlkYXRvci5lcnJvck1zZ1xuICAgICAgICAgICAgICAgICAgICA6IGdldEZvcm1hdHRlZE1lc3NhZ2UoMTksIFtsYWJlbCwgaW5wdXRWYWx1ZVR5cGVdKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFZhbGlkYXRlIHRoZSByYW5nZSBvZiBudW1lcmljIGZpZWxkXG4gICAgTnVtYmVyVmFsaWRhdG9yKGZpZWxkLCBsYWJlbCwgdmFsaWRhdG9yLCBkYXRhKSB7XG4gICAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IHBhcnNlTnVtYmVyVmFsaWRhdG9yKHZhbGlkYXRvci5yYW5nZSk7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3JGaWVsZDogZmllbGQsIGVycm9yTXNnOiBlcnJvciB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdmFsID0gTnVtYmVyKGRhdGEpO1xuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKHZhbCkpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZXJyb3JGaWVsZDogZmllbGQsXG4gICAgICAgICAgICAgICAgZXJyb3JNc2c6IHZhbGlkYXRvci5lcnJvck1zZ1xuICAgICAgICAgICAgICAgICAgICA/IHZhbGlkYXRvci5lcnJvck1zZ1xuICAgICAgICAgICAgICAgICAgICA6IGdldEZvcm1hdHRlZE1lc3NhZ2UoMTYsIFtsYWJlbF0pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAodGhpcy5jaGVja0lzRmllbGRIYXNJbnB1dChkYXRhKSAmJiB2YWwgPiB2YWxpZGF0b3IucmFuZ2VbMV0pIHx8XG4gICAgICAgICAgICB2YWwgPCB2YWxpZGF0b3IucmFuZ2VbMF1cbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVycm9yRmllbGQ6IGZpZWxkLFxuICAgICAgICAgICAgICAgIGVycm9yTXNnOiB2YWxpZGF0b3IuZXJyb3JNc2dcbiAgICAgICAgICAgICAgICAgICAgPyB2YWxpZGF0b3IuZXJyb3JNc2dcbiAgICAgICAgICAgICAgICAgICAgOiBnZXRGb3JtYXR0ZWRNZXNzYWdlKDgsIFtsYWJlbCwgdmFsaWRhdG9yLnJhbmdlWzBdLCB2YWxpZGF0b3IucmFuZ2VbMV1dKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGRvVmFsaWRhdGlvbihkYXRhKSB7XG4gICAgICAgIGlmICh0aGlzLmlzTmFtZSkge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0VmFsdWUgPSBkYXRhLm5hbWU7XG4gICAgICAgICAgICBjb25zdCBuYW1lRmllbGRMYWJlbCA9IHRoaXMuaXNOYW1lLmxhYmVsO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldFZhbHVlID09PSAndW5kZWZpbmVkJyB8fCB0YXJnZXRWYWx1ZSA9PT0gJycgfHwgdGFyZ2V0VmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGVycm9yRmllbGQ6ICduYW1lJywgZXJyb3JNc2c6IGdldEZvcm1hdHRlZE1lc3NhZ2UoMCwgW25hbWVGaWVsZExhYmVsXSkgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghKHR5cGVvZiB0YXJnZXRWYWx1ZSA9PT0gJ3N0cmluZycgfHwgdGFyZ2V0VmFsdWUgaW5zdGFuY2VvZiBTdHJpbmcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3JGaWVsZDogJ25hbWUnLCBlcnJvck1zZzogZ2V0Rm9ybWF0dGVkTWVzc2FnZSgxLCBbbmFtZUZpZWxkTGFiZWxdKSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHRhcmdldFZhbHVlLnN0YXJ0c1dpdGgoJ18nKSB8fFxuICAgICAgICAgICAgICAgIHRhcmdldFZhbHVlID09PSAnLicgfHxcbiAgICAgICAgICAgICAgICB0YXJnZXRWYWx1ZSA9PT0gJy4uJyB8fFxuICAgICAgICAgICAgICAgIHRhcmdldFZhbHVlLnRvTG93ZXJDYXNlKCkgPT09ICdkZWZhdWx0J1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3JGaWVsZDogJ25hbWUnLCBlcnJvck1zZzogZ2V0Rm9ybWF0dGVkTWVzc2FnZSgzLCBbbmFtZUZpZWxkTGFiZWxdKSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVnZXhNZXRhQ2hhcmFjdGVycyA9IFsnKicsICdcXFxcJywgJ1snLCAnXScsICcoJywgJyknLCAnPycsICc6J107XG4gICAgICAgICAgICBpZiAocmVnZXhNZXRhQ2hhcmFjdGVycy5zb21lKChkKSA9PiB0YXJnZXRWYWx1ZS5pbmRleE9mKGQpID4gLTEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3JGaWVsZDogJ25hbWUnLCBlcnJvck1zZzogZ2V0Rm9ybWF0dGVkTWVzc2FnZSgzLCBbbmFtZUZpZWxkTGFiZWxdKSB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGFyZ2V0VmFsdWUubGVuZ3RoID49IDEwMjQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBlcnJvckZpZWxkOiAnbmFtZScsIGVycm9yTXNnOiBnZXRGb3JtYXR0ZWRNZXNzYWdlKDIyLCBbbmFtZUZpZWxkTGFiZWxdKSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJldDtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGxldCBqO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmVudGl0aWVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lbnRpdGllc1tpXS5yZXF1aXJlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHJldCA9IHRoaXMuUmVxdWlyZWRWYWxpZGF0b3IoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXNbaV0uZmllbGQsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXNbaV0ubGFiZWwsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFbdGhpcy5lbnRpdGllc1tpXS5maWVsZF1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmIChyZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YVt0aGlzLmVudGl0aWVzW2ldLmZpZWxkXSA9PT0gJycgfHwgZGF0YVt0aGlzLmVudGl0aWVzW2ldLmZpZWxkXSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuZW50aXRpZXNbaV0udmFsaWRhdG9ycykge1xuICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCB0aGlzLmVudGl0aWVzW2ldLnZhbGlkYXRvcnMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmVudGl0aWVzW2ldLnZhbGlkYXRvcnNbal0udHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQgPSB0aGlzLlN0cmluZ1ZhbGlkYXRvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllc1tpXS5maWVsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllc1tpXS5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllc1tpXS52YWxpZGF0b3JzW2pdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW3RoaXMuZW50aXRpZXNbaV0uZmllbGRdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncmVnZXgnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IHRoaXMuUmVnZXhWYWxpZGF0b3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXNbaV0uZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXNbaV0ubGFiZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXNbaV0udmFsaWRhdG9yc1tqXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVt0aGlzLmVudGl0aWVzW2ldLmZpZWxkXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gdGhpcy5OdW1iZXJWYWxpZGF0b3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXNbaV0uZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXNbaV0ubGFiZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXNbaV0udmFsaWRhdG9yc1tqXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVt0aGlzLmVudGl0aWVzW2ldLmZpZWxkXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3VybCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gdGhpcy5QcmVEZWZpbmVkUmVnZXhWYWxpZGF0b3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXNbaV0uZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXNbaV0ubGFiZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXNbaV0udmFsaWRhdG9yc1tqXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVt0aGlzLmVudGl0aWVzW2ldLmZpZWxkXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUFJFREVGSU5FRF9WQUxJREFUT1JTX0RJQ1QudXJsLnJlZ2V4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQUkVERUZJTkVEX1ZBTElEQVRPUlNfRElDVC51cmwuaW5wdXRWYWx1ZVR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQgPSB0aGlzLlByZURlZmluZWRSZWdleFZhbGlkYXRvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllc1tpXS5maWVsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllc1tpXS5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllc1tpXS52YWxpZGF0b3JzW2pdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW3RoaXMuZW50aXRpZXNbaV0uZmllbGRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQUkVERUZJTkVEX1ZBTElEQVRPUlNfRElDVC5kYXRlLnJlZ2V4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQUkVERUZJTkVEX1ZBTElEQVRPUlNfRElDVC5kYXRlLmlucHV0VmFsdWVUeXBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZW1haWwnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IHRoaXMuUHJlRGVmaW5lZFJlZ2V4VmFsaWRhdG9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzW2ldLmZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzW2ldLmxhYmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzW2ldLnZhbGlkYXRvcnNbal0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbdGhpcy5lbnRpdGllc1tpXS5maWVsZF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBSRURFRklORURfVkFMSURBVE9SU19ESUNULmVtYWlsLnJlZ2V4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQUkVERUZJTkVEX1ZBTElEQVRPUlNfRElDVC5lbWFpbC5pbnB1dFZhbHVlVHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2lwdjQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IHRoaXMuUHJlRGVmaW5lZFJlZ2V4VmFsaWRhdG9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzW2ldLmZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzW2ldLmxhYmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzW2ldLnZhbGlkYXRvcnNbal0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbdGhpcy5lbnRpdGllc1tpXS5maWVsZF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBSRURFRklORURfVkFMSURBVE9SU19ESUNULmlwdjQucmVnZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBSRURFRklORURfVkFMSURBVE9SU19ESUNULmlwdjQuaW5wdXRWYWx1ZVR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjdXN0b20nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IFZhbGlkYXRvci5DdXN0b21WYWxpZGF0b3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXNbaV0udmFsaWRhdG9yc1tqXS52YWxpZGF0b3JGdW5jLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzW2ldLmZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW3RoaXMuZW50aXRpZXNbaV0uZmllbGRdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBWYWxpZGF0b3I7XG4iLCJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgdXBkYXRlIGZyb20gJ2ltbXV0YWJpbGl0eS1oZWxwZXInO1xuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSAndXVpZCc7XG5cbmltcG9ydCBDb2xsYXBzaWJsZVBhbmVsIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvQ29sbGFwc2libGVQYW5lbCc7XG5pbXBvcnQgTWVzc2FnZSBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL01lc3NhZ2UnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbmltcG9ydCBDb250cm9sV3JhcHBlciBmcm9tICcuL0NvbnRyb2xXcmFwcGVyJztcbmltcG9ydCBWYWxpZGF0b3IsIHsgU2F2ZVZhbGlkYXRvciB9IGZyb20gJy4uL3V0aWwvVmFsaWRhdG9yJztcbmltcG9ydCB7IGdldFVuaWZpZWRDb25maWdzLCBnZW5lcmF0ZVRvYXN0IH0gZnJvbSAnLi4vdXRpbC91dGlsJztcbmltcG9ydCB7IE1PREVfQ0xPTkUsIE1PREVfQ1JFQVRFLCBNT0RFX0VESVQsIE1PREVfQ09ORklHIH0gZnJvbSAnLi4vY29uc3RhbnRzL21vZGVzJztcbmltcG9ydCB7IFBBR0VfSU5QVVQsIFBBR0VfQ09ORiB9IGZyb20gJy4uL2NvbnN0YW50cy9wYWdlcyc7XG5pbXBvcnQgeyBheGlvc0NhbGxXcmFwcGVyIH0gZnJvbSAnLi4vdXRpbC9heGlvc0NhbGxXcmFwcGVyJztcbmltcG9ydCB7IHBhcnNlRXJyb3JNc2csIGdldEZvcm1hdHRlZE1lc3NhZ2UgfSBmcm9tICcuLi91dGlsL21lc3NhZ2VVdGlsJztcbmltcG9ydCB7IGdldEJ1aWxkRGlyUGF0aCB9IGZyb20gJy4uL3V0aWwvc2NyaXB0JztcblxuaW1wb3J0IHtcbiAgICBFUlJPUl9SRVFVRVNUX1RJTUVPVVRfVFJZX0FHQUlOLFxuICAgIEVSUk9SX1JFUVVFU1RfVElNRU9VVF9BQ0NFU1NfVE9LRU5fVFJZX0FHQUlOLFxuICAgIEVSUk9SX09DQ1VSUkVEX1RSWV9BR0FJTixcbiAgICBFUlJPUl9BVVRIX1BST0NFU1NfVEVSTUlOQVRFRF9UUllfQUdBSU4sXG4gICAgRVJST1JfU1RBVEVfTUlTU0lOR19UUllfQUdBSU4sXG59IGZyb20gJy4uL2NvbnN0YW50cy9vQXV0aEVycm9yTWVzc2FnZSc7XG5pbXBvcnQgVGFibGVDb250ZXh0IGZyb20gJy4uL2NvbnRleHQvVGFibGVDb250ZXh0JztcblxuY29uc3QgQ29sbGFwc2libGVQYW5lbFdyYXBwZXIgPSBzdHlsZWQoQ29sbGFwc2libGVQYW5lbClgXG4gICAgc3BhbiB7XG4gICAgICAgIGJ1dHRvbiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgICAgICAgIG1hcmdpbjogMTBweCAwO1xuXG4gICAgICAgICAgICAmOmhvdmVyOm5vdChbZGlzYWJsZWRdKSxcbiAgICAgICAgICAgICY6Zm9jdXM6bm90KFtkaXNhYmxlZF0pLFxuICAgICAgICAgICAgJjphY3RpdmU6bm90KFtkaXNhYmxlZF0pIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICAgICAgICBib3gtc2hhZG93OiBub25lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLmNvbGxhcHNpYmxlLWVsZW1lbnQge1xuICAgICAgICBwYWRkaW5nLXRvcDogMTVweDtcbiAgICB9XG5gO1xuXG5jb25zdCBDdXN0b21Hcm91cExhYmVsID0gc3R5bGVkLmRpdmBcbiAgICBwYWRkaW5nOiA2cHggMTBweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjJmNGY1O1xuYDtcblxuY2xhc3MgQmFzZUZvcm1WaWV3IGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gICAgc3RhdGljIGNvbnRleHRUeXBlID0gVGFibGVDb250ZXh0O1xuXG4gICAgY29uc3RydWN0b3IocHJvcHMsIGNvbnRleHQpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICAvLyBmbGFnIGZvciB0byByZW5kZXIgaG9vayBtZXRob2QgZm9yIG9uY2VcbiAgICAgICAgdGhpcy5mbGFnID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHt9O1xuICAgICAgICB0aGlzLmN1cnJlbnRJbnB1dCA9IHt9O1xuICAgICAgICBjb25zdCBnbG9iYWxDb25maWcgPSBnZXRVbmlmaWVkQ29uZmlncygpO1xuICAgICAgICB0aGlzLmFwcE5hbWUgPSBnbG9iYWxDb25maWcubWV0YS5uYW1lO1xuICAgICAgICB0aGlzLmVuZHBvaW50ID1cbiAgICAgICAgICAgIHByb3BzLm1vZGUgPT09IE1PREVfRURJVCB8fCBwcm9wcy5tb2RlID09PSBNT0RFX0NPTkZJR1xuICAgICAgICAgICAgICAgID8gYCR7dGhpcy5wcm9wcy5zZXJ2aWNlTmFtZX0vJHtlbmNvZGVVUklDb21wb25lbnQodGhpcy5wcm9wcy5zdGFuemFOYW1lKX1gXG4gICAgICAgICAgICAgICAgOiBgJHt0aGlzLnByb3BzLnNlcnZpY2VOYW1lfWA7XG5cbiAgICAgICAgdGhpcy51dGlsID0ge1xuICAgICAgICAgICAgc2V0U3RhdGU6IChjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMub25TYXZlUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoKHByZXZpb3VzU3RhdGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhwcmV2aW91c1N0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgcmVzb2x2ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0RXJyb3JGaWVsZE1zZzogdGhpcy5zZXRFcnJvckZpZWxkTXNnLFxuICAgICAgICAgICAgY2xlYXJBbGxFcnJvck1zZzogdGhpcy5jbGVhckFsbEVycm9yTXNnLFxuICAgICAgICAgICAgc2V0RXJyb3JNc2c6IHRoaXMuc2V0RXJyb3JNc2csXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy51dGlsQ29udHJvbFdyYXBwZXIgPSB7XG4gICAgICAgICAgICBoYW5kbGVDaGFuZ2U6IHRoaXMuaGFuZGxlQ2hhbmdlLFxuICAgICAgICAgICAgYWRkQ3VzdG9tVmFsaWRhdG9yOiB0aGlzLmFkZEN1c3RvbVZhbGlkYXRvcixcbiAgICAgICAgICAgIHV0aWxDdXN0b21GdW5jdGlvbnM6IHRoaXMudXRpbCxcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAocHJvcHMucGFnZSA9PT0gUEFHRV9JTlBVVCkge1xuICAgICAgICAgICAgZ2xvYmFsQ29uZmlnLnBhZ2VzLmlucHV0cy5zZXJ2aWNlcy5mb3JFYWNoKChzZXJ2aWNlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNlcnZpY2UubmFtZSA9PT0gcHJvcHMuc2VydmljZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ncm91cHMgPSBzZXJ2aWNlLmdyb3VwcztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllcyA9IHNlcnZpY2UuZW50aXR5O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUVudGl0aWVzRm9yR3JvdXAoc2VydmljZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IHNlcnZpY2Uub3B0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlcnZpY2UuaG9vaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ob29rRGVmZXJyZWQgPSB0aGlzLmxvYWRIb29rKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2UuaG9vay5zcmMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZS5ob29rLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsQ29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wcy5tb2RlID09PSBNT0RFX0VESVQgfHwgcHJvcHMubW9kZSA9PT0gTU9ERV9DTE9ORSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50SW5wdXQgPSBjb250ZXh0LnJvd0RhdGFbcHJvcHMuc2VydmljZU5hbWVdW3Byb3BzLnN0YW56YU5hbWVdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbG9iYWxDb25maWcucGFnZXMuY29uZmlndXJhdGlvbi50YWJzLmZvckVhY2goKHRhYikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZsYWcgPSB0YWIudGFibGVcbiAgICAgICAgICAgICAgICAgICAgPyB0YWIubmFtZSA9PT0gcHJvcHMuc2VydmljZU5hbWVcbiAgICAgICAgICAgICAgICAgICAgOiB0YWIubmFtZSA9PT0gcHJvcHMuc3RhbnphTmFtZTtcbiAgICAgICAgICAgICAgICBpZiAoZmxhZykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzID0gdGFiLmVudGl0eTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gdGFiLm9wdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWIuaG9vaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ob29rRGVmZXJyZWQgPSB0aGlzLmxvYWRIb29rKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYi5ob29rLnNyYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWIuaG9vay50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbENvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGFiLnRhYmxlICYmIChwcm9wcy5tb2RlID09PSBNT0RFX0VESVQgfHwgcHJvcHMubW9kZSA9PT0gTU9ERV9DTE9ORSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudElucHV0ID0gY29udGV4dC5yb3dEYXRhW3Byb3BzLnNlcnZpY2VOYW1lXVtwcm9wcy5zdGFuemFOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9wcy5tb2RlID09PSBNT0RFX0NPTkZJRykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50SW5wdXQgPSBwcm9wcy5jdXJyZW50U2VydmljZVN0YXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlX2NvbmZpZ190aXRsZSA9IHRhYi50aXRsZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudElucHV0ID0gY29udGV4dC5yb3dEYXRhW3Byb3BzLnNlcnZpY2VOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVwZW5kZW5jeU1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5pc09BdXRoID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNBdXRoVmFsID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYXV0aE1hcCA9IHt9O1xuICAgICAgICBsZXQgdGVtU3RhdGUgPSB7fTtcbiAgICAgICAgY29uc3QgdGVtRW50aXRpZXMgPSBbXTtcblxuICAgICAgICB0aGlzLmVudGl0aWVzLmZvckVhY2goKGUpID0+IHtcbiAgICAgICAgICAgIGlmIChlLnR5cGUgPT09ICdvYXV0aCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzT0F1dGggPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChwcm9wcy5wYWdlID09PSBQQUdFX0NPTkYgJiYgcHJvcHMuc2VydmljZU5hbWUgPT09ICdhY2NvdW50Jykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhdXRoVHlwZSA9IGU/Lm9wdGlvbnM/LmF1dGhfdHlwZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc29hdXRoU3RhdGUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGU/Lm9wdGlvbnM/Lm9hdXRoX3N0YXRlX2VuYWJsZWQgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBlPy5vcHRpb25zPy5vYXV0aF9zdGF0ZV9lbmFibGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChhdXRoVHlwZS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQXV0aFZhbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEZWZpbmluZyBzdGF0ZSBmb3IgYXV0aF90eXBlIGluIGNhc2Ugb2YgbXVsdGlwbGUgQXV0aGVudGljYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBFbnRpdHkgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkudmFsdWUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiB0aGlzLmN1cnJlbnRJbnB1dC5hdXRoX3R5cGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5jdXJyZW50SW5wdXQuYXV0aF90eXBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYXV0aFR5cGVbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LmRpc3BsYXkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS5lcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtU3RhdGUuYXV0aF90eXBlID0gdGVtcEVudGl0eTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGVmaW5pbmcgRW50aXR5IGZvciBhdXRoX3R5cGUgaW4gZW50aXR5bGlzdCBvZiBnbG9iYWxDb25maWdcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVudGl0eSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50aXR5LmZpZWxkID0gJ2F1dGhfdHlwZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHkudHlwZSA9ICdzaW5nbGVTZWxlY3QnO1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50aXR5LmxhYmVsID0gJ0F1dGggVHlwZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhc2ljOiAnQmFzaWMgQXV0aGVudGljYXRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9hdXRoOiAnT0F1dGggMi4wIEF1dGhlbnRpY2F0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHkub3B0aW9ucyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50aXR5Lm9wdGlvbnMuaGlkZUNsZWFyQnRuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eS5vcHRpb25zLmF1dG9Db21wbGV0ZUZpZWxkcyA9IGF1dGhUeXBlLm1hcCgodHlwZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGxhYmVsOiBjb250ZW50W3R5cGVdLCB2YWx1ZTogdHlwZSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1FbnRpdGllcy5wdXNoKGVudGl0eSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzU2luZ2xlT2F1dGggPSBhdXRoVHlwZS5pbmNsdWRlcygnb2F1dGgnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZGluZyBTdGF0ZSBhbmQgRW50aXR5KGluIGVudGl0eWxpc3QpIGZvciBldmVyeSBGaWVsZHMgb2YgXCJvYXV0aFwiIHR5cGVcbiAgICAgICAgICAgICAgICAgICAgLy8gSXRlcmF0aW5nIG92ZXIgZXZlcnl0eXBlIG9mIEF1dGhlbnRpY2F0aW9uIHVuZGVyIFwib2F1dGhcIiB0eXBlXG4gICAgICAgICAgICAgICAgICAgIGF1dGhUeXBlLmZvckVhY2goKHR5cGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGF1dGhmaWVsZHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkcyA9IGU/Lm9wdGlvbnNbdHlwZV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm9yIFBhcnRpY2F1bGFyIHR5cGUgaXRlcmF0aW5nIG92ZXIgZmllbGRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRzLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGV2ZXJ5IGZpZWxkIGZvciBhdXRoIHR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcEVudGl0eSA9IHt9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wcy5tb2RlID09PSBNT0RFX0NSRUFURSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS52YWx1ZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGZpZWxkPy5kZWZhdWx0VmFsdWUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZmllbGQuZGVmYXVsdFZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzRW5jcnlwdGVkID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgZmllbGQ/LmVuY3J5cHRlZCAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBmaWVsZD8uZW5jcnlwdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LnZhbHVlID0gaXNFbmNyeXB0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmN1cnJlbnRJbnB1dFtmaWVsZC5maWVsZF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS5kaXNwbGF5ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiB0ZW1TdGF0ZS5hdXRoX3R5cGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0eXBlID09PSB0ZW1TdGF0ZS5hdXRoX3R5cGUudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkuZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1TdGF0ZVtmaWVsZC5maWVsZF0gPSB0ZW1wRW50aXR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQudHlwZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgZmllbGQ/LnR5cGUgIT09ICd1bmRlZmluZWQnID8gZmllbGQudHlwZSA6ICd0ZXh0JztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGVkIHNwZWNpYWwgY2FzZSBmb3IgcmVkaXJlY3RfdXJsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZC5maWVsZCA9PT0gJ3JlZGlyZWN0X3VybCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkudmFsdWUgPSB3aW5kb3cubG9jYXRpb24uaHJlZlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zcGxpdCgnPycpWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb25maWd1cmF0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7dGhpcy5hcHBOYW1lLnRvTG93ZXJDYXNlKCl9X3JlZGlyZWN0YFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1FbnRpdGllcy5wdXNoKGZpZWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aGZpZWxkcy5wdXNoKGZpZWxkLmZpZWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmF1dGhNYXBbdHlwZV0gPSBhdXRoZmllbGRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGF1dGhUeXBlLmluY2x1ZGVzKCdvYXV0aCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvYXV0aENvbmZEYXRhID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTdG9yaW5nIE8tQXV0aCBDb25maWd1cmF0aW9uIGRhdGEgdG8gY2xhc3MgdmFyaWFibGUgdG8gdXNlIGxhdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYXV0aENvbmZEYXRhLnBvcHVwV2lkdGggPSBlLm9wdGlvbnMub2F1dGhfcG9wdXBfd2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGUub3B0aW9ucy5vYXV0aF9wb3B1cF93aWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogNjAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2F1dGhDb25mRGF0YS5wb3B1cEhlaWdodCA9IGUub3B0aW9ucy5vYXV0aF9wb3B1cF9oZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGUub3B0aW9ucy5vYXV0aF9wb3B1cF9oZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IDYwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9hdXRoQ29uZkRhdGEuYXV0aFRpbWVvdXQgPSBlLm9wdGlvbnMub2F1dGhfdGltZW91dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZS5vcHRpb25zLm9hdXRoX3RpbWVvdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IDE4MDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9hdXRoQ29uZkRhdGEuYXV0aENvZGVFbmRwb2ludCA9IGUub3B0aW9ucy5hdXRoX2NvZGVfZW5kcG9pbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGUub3B0aW9ucy5hdXRoX2NvZGVfZW5kcG9pbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYXV0aENvbmZEYXRhLmFjY2Vzc1Rva2VuRW5kcG9pbnQgPSBlLm9wdGlvbnMuYWNjZXNzX3Rva2VuX2VuZHBvaW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBlLm9wdGlvbnMuYWNjZXNzX3Rva2VuX2VuZHBvaW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9hdXRoQ29uZiA9IG9hdXRoQ29uZkRhdGE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBFbnRpdHkgPSB7fTtcbiAgICAgICAgICAgICAgICBlLmVuY3J5cHRlZCA9IHR5cGVvZiBlLmVuY3J5cHRlZCAhPT0gJ3VuZGVmaW5lZCcgPyBlLmVuY3J5cHRlZCA6IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgaWYgKHByb3BzLm1vZGUgPT09IE1PREVfQ1JFQVRFKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkudmFsdWUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGUuZGVmYXVsdFZhbHVlICE9PSAndW5kZWZpbmVkJyA/IGUuZGVmYXVsdFZhbHVlIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS5kaXNwbGF5ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBlPy5vcHRpb25zPy5kaXNwbGF5ICE9PSAndW5kZWZpbmVkJyA/IGUub3B0aW9ucy5kaXNwbGF5IDogdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS5lcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRlbVN0YXRlW2UuZmllbGRdID0gdGVtcEVudGl0eTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BzLm1vZGUgPT09IE1PREVfRURJVCkge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LnZhbHVlID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiB0aGlzLmN1cnJlbnRJbnB1dFtlLmZpZWxkXSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuY3VycmVudElucHV0W2UuZmllbGRdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LnZhbHVlID0gZS5lbmNyeXB0ZWQgPyAnJyA6IHRlbXBFbnRpdHkudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS5kaXNwbGF5ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBlPy5vcHRpb25zPy5kaXNwbGF5ICE9PSAndW5kZWZpbmVkJyA/IGUub3B0aW9ucy5kaXNwbGF5IDogdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS5lcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmZpZWxkID09PSAnbmFtZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkuZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBlPy5vcHRpb25zPy5kaXNhYmxlb25FZGl0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS5kaXNhYmxlZCA9IGUub3B0aW9ucy5kaXNhYmxlb25FZGl0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRlbVN0YXRlW2UuZmllbGRdID0gdGVtcEVudGl0eTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BzLm1vZGUgPT09IE1PREVfQ0xPTkUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS52YWx1ZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmZpZWxkID09PSAnbmFtZScgfHwgZS5lbmNyeXB0ZWQgPyAnJyA6IHRoaXMuY3VycmVudElucHV0W2UuZmllbGRdO1xuICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LmRpc3BsYXkgPVxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGU/Lm9wdGlvbnM/LmRpc3BsYXkgIT09ICd1bmRlZmluZWQnID8gZS5vcHRpb25zLmRpc3BsYXkgOiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LmVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGVtU3RhdGVbZS5maWVsZF0gPSB0ZW1wRW50aXR5O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvcHMubW9kZSA9PT0gTU9ERV9DT05GSUcpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5kZWZhdWx0VmFsdWUgPSB0eXBlb2YgZS5kZWZhdWx0VmFsdWUgIT09ICd1bmRlZmluZWQnID8gZS5kZWZhdWx0VmFsdWUgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LnZhbHVlID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiB0aGlzLmN1cnJlbnRJbnB1dFtlLmZpZWxkXSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuY3VycmVudElucHV0W2UuZmllbGRdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBlLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS52YWx1ZSA9IGUuZW5jcnlwdGVkID8gJycgOiB0ZW1wRW50aXR5LnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LmRpc3BsYXkgPVxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGU/Lm9wdGlvbnM/LmRpc3BsYXkgIT09ICd1bmRlZmluZWQnID8gZS5vcHRpb25zLmRpc3BsYXkgOiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LmVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuZmllbGQgPT09ICduYW1lJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGU/Lm9wdGlvbnM/LmRpc2FibGVvbkVkaXQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LmRpc2FibGVkID0gZS5vcHRpb25zLmRpc2FibGVvbkVkaXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGVtU3RhdGVbZS5maWVsZF0gPSB0ZW1wRW50aXR5O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBtb2RlIDonLCBwcm9wcy5tb2RlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBoYW5kbGUgZGVwZW5kZW50IGZpZWxkc1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkcyA9IGUub3B0aW9ucz8uZGVwZW5kZW5jaWVzO1xuICAgICAgICAgICAgICAgIGlmIChmaWVsZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGRzLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGFuZ2VGaWVsZHMgPSB0aGlzLmRlcGVuZGVuY3lNYXAuZ2V0KGZpZWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFuZ2VGaWVsZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VGaWVsZHNbZS5maWVsZF0gPSBmaWVsZHM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVwZW5kZW5jeU1hcC5zZXQoZmllbGQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2UuZmllbGRdOiBmaWVsZHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0ZW1FbnRpdGllcy5wdXNoKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmVudGl0aWVzID0gdGVtRW50aXRpZXM7XG5cbiAgICAgICAgLy8gZmxhdHRlbiB0aGUgZGVwZW5kZW5jeU1hcCB0byByZW1vdmUgcmVkdW5kYW50IGl0ZXJhdGlvbnMgZm9yIHJlc29sdmluZyB0aGVtXG4gICAgICAgIC8vIG9uZS1ieS1vbmUgaW4gZm9sbG93aW5nIGxvb3BcbiAgICAgICAgbGV0IGZsYXR0ZW5lZE1hcCA9IHt9O1xuICAgICAgICB0aGlzLmRlcGVuZGVuY3lNYXAuZm9yRWFjaCgodmFsdWUpID0+IHtcbiAgICAgICAgICAgIGZsYXR0ZW5lZE1hcCA9IHsgLi4uZmxhdHRlbmVkTWFwLCAuLi52YWx1ZSB9O1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBjaGFuZ2VzID0ge307XG4gICAgICAgIE9iamVjdC5rZXlzKGZsYXR0ZW5lZE1hcCkuZm9yRWFjaCgoZmllbGQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IGZsYXR0ZW5lZE1hcFtmaWVsZF07XG4gICAgICAgICAgICBjb25zdCBkYXRhID0ge307XG4gICAgICAgICAgICBsZXQgbG9hZCA9IHRydWU7XG5cbiAgICAgICAgICAgIHZhbHVlcy5mb3JFYWNoKChkZXBlbmRlbmN5KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVxdWlyZWQgPSAhIXRoaXMuZW50aXRpZXMuZmluZCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5maWVsZCA9PT0gZGVwZW5kZW5jeTtcbiAgICAgICAgICAgICAgICB9KS5yZXF1aXJlZDtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHRlbVN0YXRlW2RlcGVuZGVuY3ldLnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmIChyZXF1aXJlZCAmJiAhY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvYWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtkZXBlbmRlbmN5XSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtkZXBlbmRlbmN5XSA9IGN1cnJlbnRWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGxvYWQpIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2VzW2ZpZWxkXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgZGVwZW5kZW5jeVZhbHVlczogeyAkc2V0OiBkYXRhIH0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gYXBwbHkgZGVwZW5kZW5jeSBmaWVsZCBjaGFuZ2VzIGluIHN0YXRlXG4gICAgICAgIHRlbVN0YXRlID0gdXBkYXRlKHRlbVN0YXRlLCBjaGFuZ2VzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGRhdGE6IHRlbVN0YXRlLFxuICAgICAgICAgICAgZXJyb3JNc2c6ICcnLFxuICAgICAgICAgICAgd2FybmluZ01zZzogJycsXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSG9vayBvbiBjcmVhdGUgbWV0aG9kIGNhbGxcbiAgICAgICAgaWYgKHRoaXMuaG9va0RlZmVycmVkKSB7XG4gICAgICAgICAgICB0aGlzLmhvb2tEZWZlcnJlZC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuaG9vay5vbkNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ob29rLm9uQ3JlYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlRW50aXRpZXNGb3JHcm91cCA9IChzZXJ2aWNlKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmdyb3VwcyAmJiB0aGlzLmdyb3Vwcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuZ3JvdXBzLmZvckVhY2goKGdyb3VwKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGdyb3VwICYmIGdyb3VwLmZpZWxkcz8ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLmZpZWxkcy5mb3JFYWNoKChmaWVsZE5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gc2VydmljZS5lbnRpdHkuZmluZEluZGV4KChlKSA9PiBlLmZpZWxkID09PSBmaWVsZE5hbWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZE9iaiA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc2VydmljZS5lbnRpdHlbaW5kZXhdKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZE9iai5pc0dyb3VwaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzLnNwbGljZShpbmRleCwgMSwgdXBkYXRlZE9iaik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGhhbmRsZVN1Ym1pdCA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5jbGVhckVycm9yTXNnKCk7XG4gICAgICAgIHRoaXMucHJvcHMuaGFuZGxlRm9ybVN1Ym1pdCgvKiBpc1N1Ym1pdHRpbmcgKi8gdHJ1ZSwgLyogY2xvc2VFbnRpdHkgKi8gZmFsc2UpO1xuXG4gICAgICAgIHRoaXMuZGF0YWRpY3QgPSB7fTtcblxuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnN0YXRlLmRhdGEpLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRhdGFkaWN0W2ZpZWxkXSA9IHRoaXMuc3RhdGUuZGF0YVtmaWVsZF0udmFsdWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLmhvb2sgJiYgdHlwZW9mIHRoaXMuaG9vay5vblNhdmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbGlkYXRpb25QYXNzID0gdGhpcy5ob29rLm9uU2F2ZSh0aGlzLmRhdGFkaWN0KTtcbiAgICAgICAgICAgIGlmICghdmFsaWRhdGlvblBhc3MpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmhhbmRsZUZvcm1TdWJtaXQoLyogaXNTdWJtaXR0aW5nICovIGZhbHNlLCAvKiBjbG9zZUVudGl0eSAqLyBmYWxzZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGV4ZWN1dGVWYWxpZGF0aW9uU3VibWl0ID0gKCkgPT4ge1xuICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5zdGF0ZS5kYXRhKS5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YWRpY3RbZmllbGRdID0gdGhpcy5zdGF0ZS5kYXRhW2ZpZWxkXS52YWx1ZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyB2YWxpZGF0aW9uIGZvciB1bmlxdWUgbmFtZVxuICAgICAgICAgICAgaWYgKFtNT0RFX0NSRUFURSwgTU9ERV9DTE9ORV0uaW5jbHVkZXModGhpcy5wcm9wcy5tb2RlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzRXhpc3RpbmdOYW1lID0gQm9vbGVhbihcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LnZhbHVlcyh0aGlzLmNvbnRleHQucm93RGF0YSkuZmluZCgodmFsKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXModmFsKS5maW5kKChuYW1lKSA9PiBuYW1lID09PSB0aGlzLmRhdGFkaWN0Lm5hbWUpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzRXhpc3RpbmdOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5lbnRpdGllcy5maW5kSW5kZXgoKGUpID0+IGUuZmllbGQgPT09ICduYW1lJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RXJyb3JGaWVsZE1zZyhcbiAgICAgICAgICAgICAgICAgICAgICAgICduYW1lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldEZvcm1hdHRlZE1lc3NhZ2UoMiwgW3RoaXMuZW50aXRpZXNbaW5kZXhdLmxhYmVsLCB0aGlzLmRhdGFkaWN0Lm5hbWVdKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmhhbmRsZUZvcm1TdWJtaXQoLyogaXNTdWJtaXR0aW5nICovIGZhbHNlLCAvKiBjbG9zZUVudGl0eSAqLyBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHZhbGlkYXRpb24gY29uZGl0aW9uIG9mIHJlcXVpcmVkIGZpZWxkcyBpbiBPLUF1dGhcbiAgICAgICAgICAgIGxldCB0ZW1FbnRpdGllcztcbiAgICAgICAgICAgIGlmICh0aGlzLmlzT0F1dGgpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVxRmllbGRzID0gW107XG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5hdXRoTWFwKS5mb3JFYWNoKCh0eXBlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGBpc0F1dGhWYWxgIGlzIHJlcXVpcmVkIGluIGEgY2FzZSB3aGVyZSBvbmx5IHNpbmdsZSBhdXRoIHR5cGUgaXMgcHJvdmlkZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IHRoaXMuZGF0YWRpY3QuYXV0aF90eXBlIHx8ICF0aGlzLmlzQXV0aFZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVxRmllbGRzID0gWy4uLnJlcUZpZWxkcywgLi4udGhpcy5hdXRoTWFwW3R5cGVdXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRlbUVudGl0aWVzID0gdGhpcy5lbnRpdGllcy5tYXAoKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcUZpZWxkcy5pbmNsdWRlcyhlLmZpZWxkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWxsIG9hdXRoIGZpZWxkcyBhcmUgcmVxdWlyZWQgZXhjZXB0IGlmIGV4cGxpY2l0ZWx5IGByZXF1aXJlZGAgaXMgc2V0IHRvIGBmYWxzZWBcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHJlcXVpcmVkOiB0cnVlLCAuLi5lIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRlbUVudGl0aWVzID0gdGhpcy5lbnRpdGllcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVmFsaWRhdGlvbiBvZiBmb3JtIGZpZWxkcyBvbiBTdWJtaXRcbiAgICAgICAgICAgIGNvbnN0IHZhbGlkYXRvciA9IG5ldyBWYWxpZGF0b3IodGVtRW50aXRpZXMpO1xuICAgICAgICAgICAgbGV0IGVycm9yID0gdmFsaWRhdG9yLmRvVmFsaWRhdGlvbih0aGlzLmRhdGFkaWN0KTtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0RXJyb3JGaWVsZE1zZyhlcnJvci5lcnJvckZpZWxkLCBlcnJvci5lcnJvck1zZyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMuc2F2ZVZhbGlkYXRvcikge1xuICAgICAgICAgICAgICAgIGVycm9yID0gU2F2ZVZhbGlkYXRvcih0aGlzLm9wdGlvbnMuc2F2ZVZhbGlkYXRvciwgdGhpcy5kYXRhZGljdCk7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RXJyb3JNc2coZXJyb3IuZXJyb3JNc2cpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVGb3JtU3VibWl0KC8qIGlzU3VibWl0dGluZyAqLyBmYWxzZSwgLyogY2xvc2VFbnRpdHkgKi8gZmFsc2UpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICB0aGlzLmlzT0F1dGggJiZcbiAgICAgICAgICAgICAgICAodGhpcy5pc1NpbmdsZU9hdXRoIHx8ICh0aGlzLmlzQXV0aFZhbCAmJiB0aGlzLmRhdGFkaWN0LmF1dGhfdHlwZSA9PT0gJ29hdXRoJykpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAvLyBoYW5kbGUgb2F1dGggQXV0aGVudGljYXRpb25cbiAgICAgICAgICAgICAgICAvLyBQb3B1bGF0ZSB0aGUgcGFyYW1ldGVyIHN0cmluZyB3aXRoIGNsaWVudF9pZCwgcmVkaXJlY3RfdXJsIGFuZCByZXNwb25zZV90eXBlXG4gICAgICAgICAgICAgICAgbGV0IHBhcmFtZXRlcnMgPSBgP3Jlc3BvbnNlX3R5cGU9Y29kZSZjbGllbnRfaWQ9JHt0aGlzLmRhdGFkaWN0LmNsaWVudF9pZH0mcmVkaXJlY3RfdXJpPSR7dGhpcy5kYXRhZGljdC5yZWRpcmVjdF91cmx9YDtcbiAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHZhbHVlIGZvciBzdGF0ZV9lbmFibGVkXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdGVFbmFibGVkID0gdGhpcy5pc29hdXRoU3RhdGUgIT0gbnVsbCA/IHRoaXMuaXNvYXV0aFN0YXRlIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlRW5hYmxlZCA9PT0gJ3RydWUnIHx8IHN0YXRlRW5hYmxlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlX2VuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAvLyBHZW5lcmF0aW5nIGEgY3J5cHRvZ3JhcGhpY2FsbHkgc3Ryb25nIHN0YXRlIHBhcmFtZXRlciwgd2hpY2ggd2lsbCBiZSB1c2VkIE9OTFkgZHVyaW5nIGNvbmZpZ3VyYXRpb25cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vYXV0aF9zdGF0ZSA9IHV1aWR2NCgpLnJlcGxhY2UoLy0vZywgJycpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFwcGVuZGluZyB0aGUgc3RhdGUgaW4gdGhlIGhlYWRlcnNcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVycyA9IGAke3BhcmFtZXRlcnN9JnN0YXRlPSR7dGhpcy5vYXV0aF9zdGF0ZX1gO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IGhvc3QgPSBgaHR0cHM6Ly8ke3RoaXMuZGF0YWRpY3QuZW5kcG9pbnR9JHt0aGlzLm9hdXRoQ29uZi5hdXRoQ29kZUVuZHBvaW50fSR7cGFyYW1ldGVyc31gO1xuICAgICAgICAgICAgICAgIChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0Vycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNSZXNwb25zZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAvLyBHZXQgYXV0aF90eXBlIGVsZW1lbnQgZnJvbSBnbG9iYWwgY29uZmlnIGpzb25cblxuICAgICAgICAgICAgICAgICAgICAvLyBPcGVuIGEgcG9wdXAgdG8gbWFrZSBhdXRoIHJlcXVlc3RcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGlsZFdpbiA9IHdpbmRvdy5vcGVuKFxuICAgICAgICAgICAgICAgICAgICAgICAgaG9zdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGAke3RoaXMuYXBwTmFtZX0gT0F1dGhgLFxuICAgICAgICAgICAgICAgICAgICAgICAgYHdpZHRoPSR7dGhpcy5vYXV0aENvbmYucG9wdXBXaWR0aH0sIGhlaWdodD0ke3RoaXMub2F1dGhDb25mLnBvcHVwSGVpZ2h0fWBcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsbGJhY2sgdG8gcmVjZWl2ZSBkYXRhIGZyb20gcmVkaXJlY3QgdXJsXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5nZXRNZXNzYWdlID0gKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT24gQ2FsbCBiYWNrIHdpdGggQXV0aCBjb2RlIHRoaXMgbWV0aG9kIHdpbGwgYmUgY2FsbGVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVPYXV0aFRva2VuKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAvLyBXYWl0IHRpbGwgd2UgZ2V0IGF1dGhfY29kZSBmcm9tIGNhbGxpbmcgc2l0ZSB0aHJvdWdoIHJlZGlyZWN0IHVybCwgd2Ugd2lsbCB3YWl0IGZvciAzIG1pbnNcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0Rm9yQXV0aGVudGljYXRpb24odGhpcy5vYXV0aENvbmYuYXV0aFRpbWVvdXQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0NhbGxlZCAmJiB0aGlzLmNoaWxkV2luLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIGVycm9yIG1lc3NhZ2UgaWYgdGhlIHVzZXIgaGFzIGNsb3NlIHRoZSBhdXRoZW50aWNhdGlvbiB3aW5kb3cgd2l0aG91dCB0YWtpbmcgYW55IGFjdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRFcnJvck1zZyhFUlJPUl9BVVRIX1BST0NFU1NfVEVSTUlOQVRFRF9UUllfQUdBSU4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVGb3JtU3VibWl0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGlzU3VibWl0dGluZyAqLyBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBjbG9zZUVudGl0eSAqLyBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0NhbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRpbWVvdXQgZXJyb3IgbWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRFcnJvck1zZyhFUlJPUl9SRVFVRVNUX1RJTUVPVVRfVFJZX0FHQUlOKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGFuZGxlRm9ybVN1Ym1pdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBpc1N1Ym1pdHRpbmcgKi8gZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogY2xvc2VFbnRpdHkgKi8gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBSZXNldCBjYWxsZWQgZmxhZyBhcyB3ZSBoYXZlIHRvIHdhaXQgdGlsbCB3ZSBnZXQgdGhlIGFjY2Vzc190b2tlbiwgcmVmcmVzaF90b2tlbiBhbmQgaW5zdGFuY2VfdXJsXG4gICAgICAgICAgICAgICAgICAgIC8vIFdhaXQgdGlsbCB3ZSBnZXQgdGhlIHJlc3BvbnNlLCBoZXJlIHdlIGhhdmUgYWRkZWQgd2FpdCBmb3IgMzAgc2Vjc1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRGb3JCYWNrZW5kUmVzcG9uc2UoMzApO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc1Jlc3BvbnNlICYmICF0aGlzLmlzRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCBlcnJvciBtZXNzYWdlIHRvIHByZXZlbnQgc2F2aW5nLlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0Vycm9yID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRpbWVvdXQgZXJyb3IgbWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRFcnJvck1zZyhFUlJPUl9SRVFVRVNUX1RJTUVPVVRfQUNDRVNTX1RPS0VOX1RSWV9BR0FJTik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmhhbmRsZUZvcm1TdWJtaXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogaXNTdWJtaXR0aW5nICovIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGNsb3NlRW50aXR5ICovIGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH0pKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0Vycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVEYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmhhbmRsZUZvcm1TdWJtaXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogaXNTdWJtaXR0aW5nICovIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGNsb3NlRW50aXR5ICovIGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2F2ZURhdGEoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5ob29rICYmXG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5ob29rLm9uU2F2ZSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgICAgdHlwZW9mIHRoaXMub25TYXZlUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLm9uU2F2ZVByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgZXhlY3V0ZVZhbGlkYXRpb25TdWJtaXQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXhlY3V0ZVZhbGlkYXRpb25TdWJtaXQoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBzYXZlRGF0YSA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgYm9keSA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5kYXRhZGljdCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhZGljdFtrZXldICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBib2R5LmFwcGVuZChrZXksIHRoaXMuZGF0YWRpY3Rba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGNsZWFyIG91dCBmaWVsZHMgb2Ygb3RoZXIgYXV0aGVudGljYXRpb24gbWV0aG9kcyB3aGVuIHVzaW5nIG9uZVxuICAgICAgICBpZiAodGhpcy5pc0F1dGhWYWwpIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMuYXV0aE1hcCkuZm9yRWFjaCgodHlwZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRhdGFkaWN0LmF1dGhfdHlwZSAhPT0gdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmF1dGhNYXBbdHlwZV0uZm9yRWFjaCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keS5zZXQoZSwgJycpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmlzT0F1dGgpIHtcbiAgICAgICAgICAgIC8vIFByZXZlbnQgcGFzc2luZyByZWRpcmVjdF91cmwgZmllbGQgdXNlZCBpbiBPQXV0aCB0byBiYWNrZW5kIGNvbmYgZmlsZVxuICAgICAgICAgICAgYm9keS5kZWxldGUoJ3JlZGlyZWN0X3VybCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnByb3BzLm1vZGUgPT09IE1PREVfRURJVCkge1xuICAgICAgICAgICAgYm9keS5kZWxldGUoJ25hbWUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF4aW9zQ2FsbFdyYXBwZXIoe1xuICAgICAgICAgICAgc2VydmljZU5hbWU6IHRoaXMuZW5kcG9pbnQsXG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgY3VzdG9tSGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcgfSxcbiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgICAgICAgICAgaGFuZGxlRXJyb3I6IGZhbHNlLFxuICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsID0gcmVzcG9uc2U/LmRhdGE/LmVudHJ5WzBdO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLm1vZGUgIT09IE1PREVfQ09ORklHKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRtcE9iaiA9IHt9O1xuXG4gICAgICAgICAgICAgICAgICAgIHRtcE9ialt2YWwubmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBRERPTi0zODU4MTogYGRhdGFkaWN0YCBwcm92aWRlcyBmYWxsYmFjayB2YWx1ZXMgaWYgcmggc2tpcHNcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuZGF0YWRpY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi52YWwuY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiB2YWwuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB2YWwubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VOYW1lOiB0aGlzLnByb3BzLnNlcnZpY2VOYW1lLFxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5zZXRSb3dEYXRhKFxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlKHRoaXMuY29udGV4dC5yb3dEYXRhLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW3RoaXMucHJvcHMuc2VydmljZU5hbWVdOiB7ICRtZXJnZTogdG1wT2JqIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ob29rICYmIHR5cGVvZiB0aGlzLmhvb2sub25TYXZlU3VjY2VzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhvb2sub25TYXZlU3VjY2VzcygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5tb2RlID09PSBNT0RFX0VESVQpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVUb2FzdChgVXBkYXRlZCBcIiR7dmFsLm5hbWV9XCJgLCAnc3VjY2VzcycpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5tb2RlID09PSBNT0RFX0NPTkZJRykge1xuICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZVRvYXN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgYFVwZGF0ZWQgXCIke3RoaXMubW9kZV9jb25maWdfdGl0bGUgPyB0aGlzLm1vZGVfY29uZmlnX3RpdGxlIDogdmFsLm5hbWV9XCJgLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVUb2FzdChgQ3JlYXRlZCBcIiR7dmFsLm5hbWV9XCJgLCAnc3VjY2VzcycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmhhbmRsZUZvcm1TdWJtaXQoLyogaXNTdWJtaXR0aW5nICovIGZhbHNlLCAvKiBjbG9zZUVudGl0eSAqLyB0cnVlKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yU3VibWl0TXNnID0gcGFyc2VFcnJvck1zZyhlcnIpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBlcnJvck1zZzogZXJyb3JTdWJtaXRNc2cgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaG9vayAmJiB0eXBlb2YgdGhpcy5ob29rLm9uU2F2ZUZhaWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ob29rLm9uU2F2ZUZhaWwoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVGb3JtU3VibWl0KC8qIGlzU3VibWl0dGluZyAqLyBmYWxzZSwgLyogY2xvc2VFbnRpdHkgKi8gZmFsc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGhhbmRsZUNoYW5nZSA9IChmaWVsZCwgdGFyZ2V0VmFsdWUpID0+IHtcbiAgICAgICAgY29uc3QgY2hhbmdlcyA9IHt9O1xuICAgICAgICBpZiAoZmllbGQgPT09ICdhdXRoX3R5cGUnKSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmF1dGhNYXApLmZvckVhY2goKHR5cGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gdGFyZ2V0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdXRoTWFwW3R5cGVdLmZvckVhY2goKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZXNbZV0gPSB7IGRpc3BsYXk6IHsgJHNldDogdHJ1ZSB9IH07XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXV0aE1hcFt0eXBlXS5mb3JFYWNoKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzW2VdID0geyBkaXNwbGF5OiB7ICRzZXQ6IGZhbHNlIH0gfTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5kZXBlbmRlbmN5TWFwLmhhcyhmaWVsZCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5kZXBlbmRlbmN5TWFwLmdldChmaWVsZCk7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyh2YWx1ZSkuZm9yRWFjaCgobG9hZEZpZWxkKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHt9O1xuICAgICAgICAgICAgICAgIGxldCBsb2FkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIHZhbHVlW2xvYWRGaWVsZF0uZm9yRWFjaCgoZGVwZW5kZW5jeSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXF1aXJlZCA9ICEhdGhpcy5lbnRpdGllcy5maW5kKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5maWVsZCA9PT0gZGVwZW5kZW5jeTtcbiAgICAgICAgICAgICAgICAgICAgfSkucmVxdWlyZWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlcGVuZGVuY3kgPT09IGZpZWxkID8gdGFyZ2V0VmFsdWUgOiB0aGlzLnN0YXRlLmRhdGFbZGVwZW5kZW5jeV0udmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXF1aXJlZCAmJiAhY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2RlcGVuZGVuY3ldID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbZGVwZW5kZW5jeV0gPSBjdXJyZW50VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChsb2FkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZXNbbG9hZEZpZWxkXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlcGVuZGVuY3lWYWx1ZXM6IHsgJHNldDogZGF0YSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHsgJHNldDogbnVsbCB9LFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNoYW5nZXNbZmllbGRdID0geyB2YWx1ZTogeyAkc2V0OiB0YXJnZXRWYWx1ZSB9IH07XG5cbiAgICAgICAgY29uc3QgbmV3RmllbGRzID0gdXBkYXRlKHRoaXMuc3RhdGUsIHsgZGF0YTogY2hhbmdlcyB9KTtcbiAgICAgICAgY29uc3QgdGVtcFN0YXRlID0gdGhpcy5jbGVhckFsbEVycm9yTXNnKG5ld0ZpZWxkcyk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUodGVtcFN0YXRlKTtcblxuICAgICAgICBpZiAodGhpcy5ob29rRGVmZXJyZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaG9va0RlZmVycmVkLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5ob29rLm9uQ2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaG9vay5vbkNoYW5nZShmaWVsZCwgdGFyZ2V0VmFsdWUsIHRlbXBTdGF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgYWRkQ3VzdG9tVmFsaWRhdG9yID0gKGZpZWxkLCB2YWxpZGF0b3JGdW5jKSA9PiB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5lbnRpdGllcy5maW5kSW5kZXgoKHgpID0+IHguZmllbGQgPT09IGZpZWxkKTtcbiAgICAgICAgY29uc3QgdmFsaWRhdG9yID0gW3sgdHlwZTogJ2N1c3RvbScsIHZhbGlkYXRvckZ1bmMgfV07XG4gICAgICAgIHRoaXMuZW50aXRpZXNbaW5kZXhdLnZhbGlkYXRvcnMgPSB2YWxpZGF0b3I7XG4gICAgfTtcblxuICAgIC8vIFNldCBlcnJvciBtZXNzYWdlIHRvIGRpc3BsYXkgYW5kIHNldCBlcnJvciBpbiBwZXJ0aWN1bGFyIGZpZWxkXG4gICAgc2V0RXJyb3JGaWVsZE1zZyA9IChmaWVsZCwgbXNnKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoKHByZXZpb3VzU3RhdGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0ZpZWxkcyA9IHVwZGF0ZShwcmV2aW91c1N0YXRlLCB7XG4gICAgICAgICAgICAgICAgZGF0YTogeyBbZmllbGRdOiB7IGVycm9yOiB7ICRzZXQ6IHRydWUgfSB9IH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG5ld0ZpZWxkcy5lcnJvck1zZyA9IG1zZztcbiAgICAgICAgICAgIHJldHVybiBuZXdGaWVsZHM7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBTZXQgZXJyb3IgaW4gcGVydGljdWxhciBmaWVsZFxuICAgIHNldEVycm9yRmllbGQgPSAoZmllbGQpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSgocHJldmlvdXNTdGF0ZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZShwcmV2aW91c1N0YXRlLCB7IGRhdGE6IHsgW2ZpZWxkXTogeyBlcnJvcjogeyAkc2V0OiB0cnVlIH0gfSB9IH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gQ2xlYXIgZXJyb3IgbWVzc2FnZVxuICAgIGNsZWFyRXJyb3JNc2cgPSAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmVycm9yTXNnKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKChwcmV2aW91c1N0YXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgLi4ucHJldmlvdXNTdGF0ZSwgZXJyb3JNc2c6ICcnIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBTZXQgZXJyb3IgbWVzc2FnZVxuICAgIHNldEVycm9yTXNnID0gKG1zZykgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKChwcmV2aW91c1N0YXRlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4geyAuLi5wcmV2aW91c1N0YXRlLCBlcnJvck1zZzogbXNnIH07XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBDbGVhciBlcnJvci93YXJuaW5nIG1lc3NhZ2UgYW5kIGVycm9ycyBmcm9tIGZpZWxkc1xuICAgIGNsZWFyQWxsRXJyb3JNc2cgPSAoU3RhdGUpID0+IHtcbiAgICAgICAgY29uc3QgbmV3RmllbGRzID0gU3RhdGUgPyB7IC4uLlN0YXRlIH0gOiB7IC4uLnRoaXMuc3RhdGUgfTtcbiAgICAgICAgbmV3RmllbGRzLmVycm9yTXNnID0gJyc7XG4gICAgICAgIG5ld0ZpZWxkcy53YXJuaW5nTXNnID0gJyc7XG4gICAgICAgIGNvbnN0IG5ld0RhdGEgPSBTdGF0ZSA/IHsgLi4uU3RhdGUuZGF0YSB9IDogeyAuLi50aGlzLnN0YXRlLmRhdGEgfTtcbiAgICAgICAgY29uc3QgdGVtRGF0YSA9IHt9O1xuICAgICAgICBPYmplY3Qua2V5cyhuZXdEYXRhKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgIGlmIChuZXdEYXRhW2tleV0uZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0ZW1EYXRhW2tleV0gPSB7IC4uLm5ld0RhdGFba2V5XSwgZXJyb3I6IGZhbHNlIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRlbURhdGFba2V5XSA9IG5ld0RhdGFba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG5ld0ZpZWxkcy5kYXRhID0gdGVtRGF0YTtcbiAgICAgICAgcmV0dXJuIFN0YXRlID8gbmV3RmllbGRzIDogbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gRGlzcGxheSBlcnJvciBtZXNzYWdlXG4gICAgZ2VuZXJhdGVFcnJvck1lc3NhZ2UgPSAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmVycm9yTXNnKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxNZXNzYWdlIGFwcGVhcmFuY2U9XCJmaWxsXCIgdHlwZT1cImVycm9yXCI+XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmVycm9yTXNnfVxuICAgICAgICAgICAgICAgIDwvTWVzc2FnZT5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIGdlbmVyYXRlV2FybmluZ01lc3NhZ2UgPSAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLndhcm5pbmdNc2cpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPE1lc3NhZ2UgYXBwZWFyYW5jZT1cImZpbGxcIiB0eXBlPVwid2FybmluZ1wiPlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS53YXJuaW5nTXNnfVxuICAgICAgICAgICAgICAgIDwvTWVzc2FnZT5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIC8vIGdlbmVyYXRlc3VibWl0TWVzc2FnZVxuICAgIGxvYWRIb29rID0gKG1vZHVsZSwgdHlwZSwgZ2xvYmFsQ29uZmlnKSA9PiB7XG4gICAgICAgIGNvbnN0IG15UHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2V4dGVybmFsJykge1xuICAgICAgICAgICAgICAgIGltcG9ydCgvKiB3ZWJwYWNrSWdub3JlOiB0cnVlICovIGAke2dldEJ1aWxkRGlyUGF0aCgpfS9jdXN0b20vJHttb2R1bGV9LmpzYCkudGhlbihcbiAgICAgICAgICAgICAgICAgICAgKGV4dGVybmFsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBIb29rID0gZXh0ZXJuYWwuZGVmYXVsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaG9vayA9IG5ldyBIb29rKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbENvbmZpZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnNlcnZpY2VOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5tb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXRpbFxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoSG9vayk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfX25vbl93ZWJwYWNrX3JlcXVpcmVfXyhcbiAgICAgICAgICAgICAgICAgICAgW2BhcHAvJHt0aGlzLmFwcE5hbWV9L2pzL2J1aWxkL2N1c3RvbS8ke21vZHVsZX1gXSxcbiAgICAgICAgICAgICAgICAgICAgKEhvb2spID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaG9vayA9IG5ldyBIb29rKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbENvbmZpZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnNlcnZpY2VOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5tb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXRpbFxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoSG9vayk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG15UHJvbWlzZTtcbiAgICB9O1xuXG4gICAgLypcbiAgICAgKiBGdW5jdGlvbiB0byBnZXQgYWNjZXNzIHRva2VuLCByZWZyZXNoIHRva2VuIGFuZCBpbnN0YW5jZSB1cmxcbiAgICAgKiB1c2luZyByZXN0IGNhbGwgb25jZSBvYXV0aCBjb2RlIHJlY2VpdmVkIGZyb20gY2hpbGQgd2luZG93XG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gICAgaGFuZGxlT2F1dGhUb2tlbiA9IChtZXNzYWdlKSA9PiB7XG4gICAgICAgIC8vIENoZWNrIG1lc3NhZ2UgZm9yIGVycm9yLiBJZiBlcnJvciBzaG93IGVycm9yIG1lc3NhZ2UuXG4gICAgICAgIGlmICghbWVzc2FnZSB8fCAobWVzc2FnZSAmJiBtZXNzYWdlLmVycm9yKSB8fCBtZXNzYWdlLmNvZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zZXRFcnJvck1zZyhFUlJPUl9PQ0NVUlJFRF9UUllfQUdBSU4pO1xuICAgICAgICAgICAgdGhpcy5pc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuaXNSZXNwb25zZSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RhdGVSZXNwb25zZSA9IG1lc3NhZ2Uuc3RhdGU7XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhdGVfZW5hYmxlZCA9PT0gdHJ1ZSAmJiB0aGlzLm9hdXRoX3N0YXRlICE9PSBzdGF0ZVJlc3BvbnNlKSB7XG4gICAgICAgICAgICB0aGlzLnNldEVycm9yTXNnKEVSUk9SX1NUQVRFX01JU1NJTkdfVFJZX0FHQUlOKTtcbiAgICAgICAgICAgIHRoaXMuaXNFcnJvciA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmlzUmVzcG9uc2UgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY29kZSA9IGRlY29kZVVSSUNvbXBvbmVudChtZXNzYWdlLmNvZGUpO1xuICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICB1cmw6IGBodHRwczovLyR7dGhpcy5kYXRhZGljdC5lbmRwb2ludH0ke3RoaXMub2F1dGhDb25mLmFjY2Vzc1Rva2VuRW5kcG9pbnR9YCxcbiAgICAgICAgICAgIGdyYW50X3R5cGU6ICdhdXRob3JpemF0aW9uX2NvZGUnLFxuICAgICAgICAgICAgY2xpZW50X2lkOiB0aGlzLmRhdGFkaWN0LmNsaWVudF9pZCxcbiAgICAgICAgICAgIGNsaWVudF9zZWNyZXQ6IHRoaXMuZGF0YWRpY3QuY2xpZW50X3NlY3JldCxcbiAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICByZWRpcmVjdF91cmk6IHRoaXMuZGF0YWRpY3QucmVkaXJlY3RfdXJsLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGJvZHkgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gICAgICAgIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgYm9keS5hcHBlbmQoa2V5LCBkYXRhW2tleV0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBPQXV0aEVuZHBvaW50ID0gYCR7dGhpcy5hcHBOYW1lfV9vYXV0aC9vYXV0aGA7XG4gICAgICAgIC8vIEludGVybmFsIGhhbmRsZXIgY2FsbCB0byBnZXQgdGhlIGFjY2VzcyB0b2tlbiBhbmQgb3RoZXIgdmFsdWVzXG4gICAgICAgIGF4aW9zQ2FsbFdyYXBwZXIoe1xuICAgICAgICAgICAgZW5kcG9pbnRVcmw6IE9BdXRoRW5kcG9pbnQsXG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgY3VzdG9tSGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcgfSxcbiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgICAgICAgICAgaGFuZGxlRXJyb3I6IGZhbHNlLFxuICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZW50cnlbMF0uY29udGVudC5lcnJvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjY2Vzc1Rva2VuID0gcmVzcG9uc2UuZGF0YS5lbnRyeVswXS5jb250ZW50LmFjY2Vzc190b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5zdGFuY2VVcmwgPSByZXNwb25zZS5kYXRhLmVudHJ5WzBdLmNvbnRlbnQuaW5zdGFuY2VfdXJsO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWZyZXNoVG9rZW4gPSByZXNwb25zZS5kYXRhLmVudHJ5WzBdLmNvbnRlbnQucmVmcmVzaF90b2tlbjtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFkaWN0Lmluc3RhbmNlX3VybCA9IGluc3RhbmNlVXJsO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFkaWN0LnJlZnJlc2hfdG9rZW4gPSByZWZyZXNoVG9rZW47XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YWRpY3QuYWNjZXNzX3Rva2VuID0gYWNjZXNzVG9rZW47XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNSZXNwb25zZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnNldEVycm9yTXNnKHJlc3BvbnNlLmRhdGEuZW50cnlbMF0uY29udGVudC5lcnJvcik7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmlzUmVzcG9uc2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0RXJyb3JNc2coRVJST1JfT0NDVVJSRURfVFJZX0FHQUlOKTtcbiAgICAgICAgICAgICAgICB0aGlzLmlzRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNSZXNwb25zZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIEZ1bmN0aW9uIHRvIHdhaXQgZm9yIGF1dGhlbnRpY2F0aW9uIGNhbGwgYmFjayBpbiBjaGlsZCB3aW5kb3cuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gICAgd2FpdEZvckF1dGhlbnRpY2F0aW9uID0gYXN5bmMgKGNvdW50KSA9PiB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBjb3VudCAtPSAxO1xuICAgICAgICAvLyBDaGVjayBpZiBjYWxsYmFjayBmdW5jdGlvbiBjYWxsZWQgaWYgY2FsbGVkIHRoZW4gZXhpdCBmcm9tIHdhaXRcbiAgICAgICAgaWYgKHRoaXMuaXNDYWxsZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIG5vdCBjYWxsZWQgYW5kIGNvdW50IGlzIG5vdCByZWFjaGVkIHRvIDE4MCB0aGVuIHJldHVybiBlcnJvciBmb3IgdGltZW91dFxuICAgICAgICBpZiAoY291bnQgPT09IDAgfHwgdGhpcy5jaGlsZFdpbi5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNFcnJvciA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZWxzZSBjYWxsIHNsZWVwIGFuZCByZWNhbGwgdGhlIHNhbWUgZnVuY3Rpb25cbiAgICAgICAgYXdhaXQgdGhpcy5zbGVlcCh0aGlzLndhaXRGb3JBdXRoZW50aWNhdGlvbiwgY291bnQpO1xuICAgIH07XG5cbiAgICAvLyBGdW5jdGlvbiB0byB3YWl0IGZvciBiYWNrZW5kIGNhbGwgZ2V0IHJlc3BvbnNlIGZyb20gYmFja2VuZFxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gICAgd2FpdEZvckJhY2tlbmRSZXNwb25zZSA9IGFzeW5jIChjb3VudCkgPT4ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgY291bnQgKz0gMTtcbiAgICAgICAgLy8gQ2hlY2sgaWYgY2FsbGJhY2sgZnVuY3Rpb24gY2FsbGVkIGlmIGNhbGxlZCB0aGVuIGV4aXQgZnJvbSB3YWl0XG4gICAgICAgIGlmICh0aGlzLmlzUmVzcG9uc2UgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIG5vdCBjYWxsZWQgYW5kIGNvdW50IGlzIG5vdCByZWFjaGVkIHRvIDYwIHRoZW4gcmV0dXJuIGVycm9yIGZvciB0aW1lb3V0XG4gICAgICAgIGlmIChjb3VudCA9PT0gNjApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlbHNlIGNhbGwgc2xlZXAgYW5kIHJlY2FsbCB0aGUgc2FtZSBmdW5jdGlvblxuICAgICAgICBhd2FpdCB0aGlzLnNsZWVwKHRoaXMud2FpdEZvckJhY2tlbmRSZXNwb25zZSwgY291bnQpO1xuICAgIH07XG5cbiAgICAvKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gZmlyc3QgYWRkIHNsZWVwIGZvciAxIHNlY3MgYW5kIHRoZSBjYWxsIHRoZSBmdW5jdGlvbiBwYXNzZWQgaW4gYXJndW1lbnRcbiAgICAgKi9cbiAgICBzbGVlcCA9IGFzeW5jIChmbiwgLi4uYXJncykgPT4ge1xuICAgICAgICBhd2FpdCB0aGlzLnRpbWVvdXQoMTAwMCk7XG4gICAgICAgIHJldHVybiBmbiguLi5hcmdzKTtcbiAgICB9O1xuXG4gICAgLypcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgcmVzb2x2ZSB0aGUgcHJvbWlzZSBvbmNlIHRoZSBwcm92aWRlZCB0aW1lb3V0IG9jY3Vyc1xuICAgICAqL1xuICAgIHRpbWVvdXQgPSAobXMpID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7XG4gICAgfTtcblxuICAgIHJlbmRlckdyb3VwRWxlbWVudHMgPSAoKSA9PiB7XG4gICAgICAgIGxldCBlbCA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLmdyb3VwcyAmJiB0aGlzLmdyb3Vwcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGVsID0gdGhpcy5ncm91cHMubWFwKChncm91cCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbGxwc2libGVFbGVtZW50ID1cbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAuZmllbGRzPy5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAuZmllbGRzLm1hcCgoZmllbGROYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbnRpdGllcy5tYXAoKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5maWVsZCA9PT0gZmllbGROYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlbVN0YXRlID0gdGhpcy5zdGF0ZS5kYXRhW2UuZmllbGRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENvbnRyb2xXcmFwcGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtlLmZpZWxkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxpdHlGdW5jdHM9e3RoaXMudXRpbENvbnRyb2xXcmFwcGVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0ZW1TdGF0ZS52YWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5PXt0ZW1TdGF0ZS5kaXNwbGF5fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yPXt0ZW1TdGF0ZS5lcnJvcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHk9e2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZU5hbWU9e3RoaXMucHJvcHMuc2VydmljZU5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZT17dGhpcy5wcm9wcy5tb2RlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXt0ZW1TdGF0ZS5kaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZG93bk1lc3NhZ2U9e3RlbVN0YXRlLm1hcmtkb3duTWVzc2FnZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmN5VmFsdWVzPXt0ZW1TdGF0ZS5kZXBlbmRlbmN5VmFsdWVzIHx8IG51bGx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBncm91cC5vcHRpb25zLmlzRXhwYW5kYWJsZSA/IChcbiAgICAgICAgICAgICAgICAgICAgPENvbGxhcHNpYmxlUGFuZWxXcmFwcGVyIHRpdGxlPXtncm91cC5sYWJlbH0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbGxhcHNpYmxlLWVsZW1lbnRcIj57Y29sbHBzaWJsZUVsZW1lbnR9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvQ29sbGFwc2libGVQYW5lbFdyYXBwZXI+XG4gICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxDdXN0b21Hcm91cExhYmVsPntncm91cC5sYWJlbH08L0N1c3RvbUdyb3VwTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pntjb2xscHNpYmxlRWxlbWVudH08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbDtcbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICAvLyBvblJlbmRlciBtZXRob2Qgb2YgSG9va1xuICAgICAgICBpZiAodGhpcy5mbGFnKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5ob29rRGVmZXJyZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhvb2tEZWZlcnJlZC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmhvb2sub25SZW5kZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ob29rLm9uUmVuZGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5tb2RlID09PSBNT0RFX0VESVQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ob29rRGVmZXJyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ob29rRGVmZXJyZWQudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuaG9vay5vbkVkaXRMb2FkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ob29rLm9uRWRpdExvYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5mbGFnID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGZvcm0gc3R5bGU9e3RoaXMucHJvcHMubW9kZSA9PT0gTU9ERV9DT05GSUcgPyB7IG1hcmdpblRvcDogJzI1cHgnIH0gOiB7fX0+XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLmdlbmVyYXRlV2FybmluZ01lc3NhZ2UoKX1cbiAgICAgICAgICAgICAgICAgICAge3RoaXMuZ2VuZXJhdGVFcnJvck1lc3NhZ2UoKX1cbiAgICAgICAgICAgICAgICAgICAge3RoaXMucmVuZGVyR3JvdXBFbGVtZW50cygpfVxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5lbnRpdGllcy5tYXAoKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiBudWxsIGlmIHdlIG5lZWQgdG8gc2hvdyBlbGVtZW50IGluIGEgZ3JvdXBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLmlzR3JvdXBpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlbVN0YXRlID0gdGhpcy5zdGF0ZS5kYXRhW2UuZmllbGRdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVtU3RhdGUucGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7IC4uLmUub3B0aW9ucywgcGxhY2Vob2xkZXI6IHRlbVN0YXRlLnBsYWNlaG9sZGVyIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q29udHJvbFdyYXBwZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtlLmZpZWxkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsaXR5RnVuY3RzPXt0aGlzLnV0aWxDb250cm9sV3JhcHBlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RlbVN0YXRlLnZhbHVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5PXt0ZW1TdGF0ZS5kaXNwbGF5fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcj17dGVtU3RhdGUuZXJyb3J9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eT17ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZU5hbWU9e3RoaXMucHJvcHMuc2VydmljZU5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU9e3RoaXMucHJvcHMubW9kZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e3RlbVN0YXRlLmRpc2FibGVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZG93bk1lc3NhZ2U9e3RlbVN0YXRlLm1hcmtkb3duTWVzc2FnZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVwZW5kZW5jeVZhbHVlcz17dGVtU3RhdGUuZGVwZW5kZW5jeVZhbHVlcyB8fCBudWxsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbkJhc2VGb3JtVmlldy5wcm9wVHlwZXMgPSB7XG4gICAgcGFnZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzZXJ2aWNlTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzdGFuemFOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGN1cnJlbnRTZXJ2aWNlU3RhdGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbW9kZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBoYW5kbGVGb3JtU3VibWl0OiBQcm9wVHlwZXMuZnVuYyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEJhc2VGb3JtVmlldztcbiIsImV4cG9ydCBjb25zdCBFUlJPUl9SRVFVRVNUX1RJTUVPVVRfVFJZX0FHQUlOID0gJ1JlcXVlc3QgdGltZSBvdXQgd2hpbGUgYXV0aGVudGljYXRpbmcuIFBsZWFzZSB0cnkgYWdhaW4uJztcbmV4cG9ydCBjb25zdCBFUlJPUl9SRVFVRVNUX1RJTUVPVVRfQUNDRVNTX1RPS0VOX1RSWV9BR0FJTiA9ICdSZXF1ZXN0IHRpbWUgb3V0IHdoaWxlIGdldHRpbmcgYWNjZXNzdG9rZW4uIFBsZWFzZSB0cnkgYWdhaW4uJztcbmV4cG9ydCBjb25zdCBFUlJPUl9PQ0NVUlJFRF9UUllfQUdBSU4gPSBcIkVycm9yIG9jY3VycmVkIHdoaWxlIHRyeWluZyB0byBhdXRoZW50aWNhdGUuIFBsZWFzZSB0cnkgQWdhaW4uXCI7XG5leHBvcnQgY29uc3QgRVJST1JfQVVUSF9QUk9DRVNTX1RFUk1JTkFURURfVFJZX0FHQUlOID0gXCJBdXRoZW50aWNhdGlvbiBwcm9jZXNzIGludGVycnVwdGVkLiBQbGVhc2UgdHJ5IGFnYWluLlwiO1xuZXhwb3J0IGNvbnN0IEVSUk9SX1NUQVRFX01JU1NJTkdfVFJZX0FHQUlOID0gXCJSZXNwb25zZSBub3QgcmVjZWl2ZWQgZnJvbSB0aGUgZXhwZWN0ZWQgc2VuZGVyLiBQbGVhc2UgdHJ5IGFnYWluLlwiOyIsImV4cG9ydCBjb25zdCBTVFlMRV9QQUdFID0gJ3BhZ2UnO1xuZXhwb3J0IGNvbnN0IFNUWUxFX01PREFMID0gJ21vZGFsJztcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgXyB9IGZyb20gJ0BzcGx1bmsvdWktdXRpbHMvaTE4bic7XG5cbmltcG9ydCB7IGdldFVuaWZpZWRDb25maWdzIH0gZnJvbSAnLi4vLi4vdXRpbC91dGlsJztcbmltcG9ydCB7IGdldEJ1aWxkRGlyUGF0aCB9IGZyb20gJy4uLy4uL3V0aWwvc2NyaXB0JztcblxuY2xhc3MgQ3VzdG9tVGFibGVDb250cm9sIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNob3VsZFJlbmRlciA9IHRydWU7XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIGNvbnN0IGdsb2JhbENvbmZpZyA9IGdldFVuaWZpZWRDb25maWdzKCk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBsb2FkaW5nOiB0cnVlIH0pO1xuICAgICAgICB0aGlzLmxvYWRDdXN0b21Db250cm9sKCkudGhlbigoQ29udHJvbCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jdXN0b21Db250cm9sID0gbmV3IENvbnRyb2woXG4gICAgICAgICAgICAgICAgZ2xvYmFsQ29uZmlnLFxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuc2VydmljZU5hbWUsXG4gICAgICAgICAgICAgICAgdGhpcy5lbCxcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnJvdyxcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmZpZWxkXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvYWRpbmc6IGZhbHNlIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMucm93ICE9PSBuZXh0UHJvcHMucm93KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW5leHRTdGF0ZS5sb2FkaW5nICYmIHRoaXMuc2hvdWxkUmVuZGVyKSB7XG4gICAgICAgICAgICB0aGlzLnNob3VsZFJlbmRlciA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGxvYWRDdXN0b21Db250cm9sID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnR5cGUgPT09ICdleHRlcm5hbCcpIHtcbiAgICAgICAgICAgICAgICBpbXBvcnQoXG4gICAgICAgICAgICAgICAgICAgIC8qIHdlYnBhY2tJZ25vcmU6IHRydWUgKi8gYCR7Z2V0QnVpbGREaXJQYXRoKCl9L2N1c3RvbS8ke1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5maWxlTmFtZVxuICAgICAgICAgICAgICAgICAgICB9LmpzYFxuICAgICAgICAgICAgICAgICkudGhlbigoZXh0ZXJuYWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgQ29udHJvbCA9IGV4dGVybmFsLmRlZmF1bHQ7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoQ29udHJvbCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGdsb2JhbENvbmZpZyA9IGdldFVuaWZpZWRDb25maWdzKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgYXBwTmFtZSA9IGdsb2JhbENvbmZpZy5tZXRhLm5hbWU7XG4gICAgICAgICAgICAgICAgX19ub25fd2VicGFja19yZXF1aXJlX18oXG4gICAgICAgICAgICAgICAgICAgIFtgYXBwLyR7YXBwTmFtZX0vanMvYnVpbGQvY3VzdG9tLyR7dGhpcy5wcm9wcy5maWxlTmFtZX1gXSxcbiAgICAgICAgICAgICAgICAgICAgKENvbnRyb2wpID0+IHJlc29sdmUoQ29udHJvbClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBpZiAoIXRoaXMuc3RhdGUubG9hZGluZykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1c3RvbUNvbnRyb2wucmVuZGVyKHRoaXMucHJvcHMucm93LCB0aGlzLnByb3BzLmZpZWxkKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmxvYWRpbmcgJiYgXygnTG9hZGluZy4uLicpfVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gLy8gbm9zZW1ncmVwOiB0eXBlc2NyaXB0LnJlYWN0LnNlY3VyaXR5LmF1ZGl0LnJlYWN0LW5vLXJlZnMucmVhY3Qtbm8tcmVmc1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmPXsoZWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsID0gZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgdmlzaWJpbGl0eTogdGhpcy5zdGF0ZS5sb2FkaW5nID8gJ2hpZGRlbicgOiAndmlzaWJsZScgfX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbkN1c3RvbVRhYmxlQ29udHJvbC5wcm9wVHlwZXMgPSB7XG4gICAgc2VydmljZU5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICByb3c6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBmaWVsZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBmaWxlTmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBDdXN0b21UYWJsZUNvbnRyb2w7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IERMIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvRGVmaW5pdGlvbkxpc3QnO1xuaW1wb3J0IFRhYmxlIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvVGFibGUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBfIH0gZnJvbSAnQHNwbHVuay91aS11dGlscy9pMThuJztcblxuaW1wb3J0IEN1c3RvbVRhYmxlQ29udHJvbCBmcm9tICcuL0N1c3RvbVRhYmxlQ29udHJvbCc7XG5pbXBvcnQgeyBnZXRVbmlmaWVkQ29uZmlncyB9IGZyb20gJy4uLy4uL3V0aWwvdXRpbCc7XG5cbmNvbnN0IFRhYmxlQ2VsbFdyYXBwZXIgPSBzdHlsZWQoVGFibGUuQ2VsbClgXG4gICAgYm9yZGVyLXRvcDogbm9uZTtcbmA7XG5cbmZ1bmN0aW9uIGdldEV4cGFuc2lvblJvd0RhdGEocm93LCBtb3JlSW5mbykge1xuICAgIGNvbnN0IERlZmluaXRpb25MaXN0cyA9IFtdO1xuXG4gICAgaWYgKG1vcmVJbmZvPy5sZW5ndGgpIHtcbiAgICAgICAgbW9yZUluZm8uZm9yRWFjaCgodmFsKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsYWJlbCA9IF8odmFsLmxhYmVsKTtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBleHRyYSByb3dzIHdoaWNoIGFyZSBlbXB0eSBpbiBtb3JlSW5mb1xuICAgICAgICAgICAgaWYgKHZhbC5maWVsZCBpbiByb3cgJiYgcm93W3ZhbC5maWVsZF0gIT09IG51bGwgJiYgcm93W3ZhbC5maWVsZF0gIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgRGVmaW5pdGlvbkxpc3RzLnB1c2goPERMLlRlcm0ga2V5PXt2YWwuZmllbGR9PntsYWJlbH08L0RMLlRlcm0+KTtcbiAgICAgICAgICAgICAgICBEZWZpbml0aW9uTGlzdHMucHVzaChcbiAgICAgICAgICAgICAgICAgICAgPERMLkRlc2NyaXB0aW9uIGtleT17YCR7dmFsLmZpZWxkfV9kZWNyYH0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7dmFsLm1hcHBpbmcgJiYgdmFsLm1hcHBpbmdbcm93W3ZhbC5maWVsZF1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB2YWwubWFwcGluZ1tyb3dbdmFsLmZpZWxkXV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFN0cmluZyhyb3dbdmFsLmZpZWxkXSl9XG4gICAgICAgICAgICAgICAgICAgIDwvREwuRGVzY3JpcHRpb24+XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBEZWZpbml0aW9uTGlzdHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFeHBhbnNpb25Sb3coY29sU3Bhbiwgcm93LCBtb3JlSW5mbykge1xuICAgIGNvbnN0IHsgY3VzdG9tUm93IH0gPSBnZXRVbmlmaWVkQ29uZmlncygpLnBhZ2VzLmlucHV0cy50YWJsZTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxUYWJsZS5Sb3cga2V5PXtgJHtyb3cuaWR9LWV4cGFuc2lvbmB9PlxuICAgICAgICAgICAgPFRhYmxlQ2VsbFdyYXBwZXIgY29sU3Bhbj17Y29sU3Bhbn0+XG4gICAgICAgICAgICAgICAge2N1c3RvbVJvdyAmJiBjdXN0b21Sb3cuc3JjID8gKFxuICAgICAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgICAgICAge1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ3VzdG9tVGFibGVDb250cm9sLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZU5hbWU6IHJvdy5zZXJ2aWNlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IGN1c3RvbVJvdy5zcmMsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgPERMIHRlcm1XaWR0aD17MjUwfT57Z2V0RXhwYW5zaW9uUm93RGF0YShyb3csIG1vcmVJbmZvKX08L0RMPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L1RhYmxlQ2VsbFdyYXBwZXI+XG4gICAgICAgIDwvVGFibGUuUm93PlxuICAgICk7XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgV2FpdFNwaW5uZXIgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9XYWl0U3Bpbm5lcic7XG5pbXBvcnQgU3dpdGNoIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvU3dpdGNoJztcbmltcG9ydCBUYWJsZSBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL1RhYmxlJztcbmltcG9ydCBCdXR0b25Hcm91cCBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL0J1dHRvbkdyb3VwJztcbmltcG9ydCBUb29sdGlwIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvVG9vbHRpcCc7XG5pbXBvcnQgUGVuY2lsIGZyb20gJ0BzcGx1bmsvcmVhY3QtaWNvbnMvUGVuY2lsJztcbmltcG9ydCBDbG9uZSBmcm9tICdAc3BsdW5rL3JlYWN0LWljb25zL0Nsb25lJztcbmltcG9ydCBUcmFzaCBmcm9tICdAc3BsdW5rL3JlYWN0LWljb25zL1RyYXNoJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgXyB9IGZyb20gJ0BzcGx1bmsvdWktdXRpbHMvaTE4bic7XG5cbmltcG9ydCBDdXN0b21UYWJsZUNvbnRyb2wgZnJvbSAnLi9DdXN0b21UYWJsZUNvbnRyb2wnO1xuaW1wb3J0IHsgQWN0aW9uQnV0dG9uQ29tcG9uZW50IH0gZnJvbSAnLi9DdXN0b21UYWJsZVN0eWxlJztcblxuY29uc3QgVGFibGVDZWxsV3JhcHBlciA9IHN0eWxlZChUYWJsZS5DZWxsKWBcbiAgICBwYWRkaW5nOiAycHg7XG5gO1xuXG5jb25zdCBTd2l0Y2hXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuXG4gICAgLnRvZ2dsZV9zd2l0Y2gge1xuICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgfVxuYDtcblxuZnVuY3Rpb24gQ3VzdG9tVGFibGVSb3cocHJvcHMpIHtcbiAgICBjb25zdCB7XG4gICAgICAgIHJvdyxcbiAgICAgICAgY29sdW1ucyxcbiAgICAgICAgaGVhZGVyTWFwcGluZyxcbiAgICAgICAgaGFuZGxlVG9nZ2xlQWN0aW9uQ2xpY2ssXG4gICAgICAgIGhhbmRsZUVkaXRBY3Rpb25DbGljayxcbiAgICAgICAgaGFuZGxlQ2xvbmVBY3Rpb25DbGljayxcbiAgICAgICAgaGFuZGxlRGVsZXRlQWN0aW9uQ2xpY2ssXG4gICAgfSA9IHByb3BzO1xuXG4gICAgY29uc3QgZ2V0Q3VzdG9tQ2VsbCA9IChjdXN0b21Sb3csIGhlYWRlcikgPT4ge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDdXN0b21UYWJsZUNvbnRyb2wsIHtcbiAgICAgICAgICAgIHNlcnZpY2VOYW1lOiByb3cuc2VydmljZU5hbWUsXG4gICAgICAgICAgICBmaWVsZDogaGVhZGVyLmZpZWxkLFxuICAgICAgICAgICAgcm93OiBjdXN0b21Sb3csXG4gICAgICAgICAgICBmaWxlTmFtZTogaGVhZGVyLmN1c3RvbUNlbGwuc3JjLFxuICAgICAgICAgICAgdHlwZTogaGVhZGVyLmN1c3RvbUNlbGwudHlwZSxcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IHJvd0FjdGlvbnNQcmltYXJ5QnV0dG9uID0gdXNlQ2FsbGJhY2soXG4gICAgICAgIChzZWxlY3RlZFJvdykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8VGFibGVDZWxsV3JhcHBlciBkYXRhLWNvbHVtbj1cImFjdGlvbnNcIiBrZXk9e3NlbGVjdGVkUm93LmlkfT5cbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbkdyb3VwPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRvb2x0aXAgY29udGVudD17XygnRWRpdCcpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWN0aW9uQnV0dG9uQ29tcG9uZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVhcmFuY2U9XCJmbGF0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj17PFBlbmNpbCBzY3JlZW5SZWFkZXJUZXh0PXtudWxsfSBzaXplPXsxfSAvPn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlRWRpdEFjdGlvbkNsaWNrKHNlbGVjdGVkUm93KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZWRpdEJ0blwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUb29sdGlwIGNvbnRlbnQ9e18oJ0Nsb25lJyl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBY3Rpb25CdXR0b25Db21wb25lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZWFyYW5jZT1cImZsYXRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uPXs8Q2xvbmUgc2NyZWVuUmVhZGVyVGV4dD17bnVsbH0gc2l6ZT17MX0gLz59XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZUNsb25lQWN0aW9uQ2xpY2soc2VsZWN0ZWRSb3cpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjbG9uZUJ0blwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUb29sdGlwIGNvbnRlbnQ9e18oJ0RlbGV0ZScpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWN0aW9uQnV0dG9uQ29tcG9uZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVhcmFuY2U9XCJkZXN0cnVjdGl2ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb249ezxUcmFzaCBzY3JlZW5SZWFkZXJUZXh0PXtudWxsfSBzaXplPXsxfSAvPn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlRGVsZXRlQWN0aW9uQ2xpY2soc2VsZWN0ZWRSb3cpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkZWxldGVCdG5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1Rvb2x0aXA+XG4gICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uR3JvdXA+XG4gICAgICAgICAgICAgICAgPC9UYWJsZUNlbGxXcmFwcGVyPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgW2hhbmRsZUVkaXRBY3Rpb25DbGljaywgaGFuZGxlQ2xvbmVBY3Rpb25DbGljaywgaGFuZGxlRGVsZXRlQWN0aW9uQ2xpY2tdXG4gICAgKTtcblxuICAgIGxldCBzdGF0dXNDb250ZW50ID0gJ0VuYWJsZWQnO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlcnNjb3JlLWRhbmdsZVxuICAgIGlmIChyb3cuX190b2dnbGVTaG93U3Bpbm5lcikge1xuICAgICAgICBzdGF0dXNDb250ZW50ID0gPFdhaXRTcGlubmVyIC8+O1xuICAgIH0gZWxzZSBpZiAocm93LmRpc2FibGVkKSB7XG4gICAgICAgIHN0YXR1c0NvbnRlbnQgPVxuICAgICAgICAgICAgaGVhZGVyTWFwcGluZz8uZGlzYWJsZWQgJiYgaGVhZGVyTWFwcGluZy5kaXNhYmxlZFtyb3cuZGlzYWJsZWRdXG4gICAgICAgICAgICAgICAgPyBoZWFkZXJNYXBwaW5nLmRpc2FibGVkW3Jvdy5kaXNhYmxlZF1cbiAgICAgICAgICAgICAgICA6ICdEaXNhYmxlZCc7XG4gICAgfVxuXG4gICAgLy8gRml4IHNldCBvZiBwcm9wcyBhcmUgcGFzc2VkIHRvIFRhYmxlLlJvdyBlbGVtZW50XG4gICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICAgIDxUYWJsZS5Sb3cgLy8gbm9zZW1ncmVwOiB0eXBlc2NyaXB0LnJlYWN0LnNlY3VyaXR5LmF1ZGl0LnJlYWN0LXByb3BzLWluamVjdGlvbi5yZWFjdC1wcm9wcy1pbmplY3Rpb24sIHR5cGVzY3JpcHQucmVhY3QuYmVzdC1wcmFjdGljZS5yZWFjdC1wcm9wcy1zcHJlYWRpbmcucmVhY3QtcHJvcHMtc3ByZWFkaW5nXG4gICAgICAgICAgICAgICAga2V5PXtyb3cuaWR9XG4gICAgICAgICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtjb2x1bW5zICYmXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbnMubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbnMubWFwKChoZWFkZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjZWxsSFRNTCA9ICcnO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGVhZGVyLmN1c3RvbUNlbGwgJiYgaGVhZGVyLmN1c3RvbUNlbGwuc3JjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbEhUTUwgPSAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUYWJsZS5DZWxsIGRhdGEtY29sdW1uPXtoZWFkZXIuZmllbGR9IGtleT17aGVhZGVyLmZpZWxkfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtnZXRDdXN0b21DZWxsKHJvdywgaGVhZGVyKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UYWJsZS5DZWxsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhlYWRlci5maWVsZCA9PT0gJ2Rpc2FibGVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxIVE1MID0gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGFibGUuQ2VsbCBkYXRhLWNvbHVtbj17aGVhZGVyLmZpZWxkfSBrZXk9e2hlYWRlci5maWVsZH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3dpdGNoV3JhcHBlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3dpdGNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17cm93Lm5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtyb3cuZGlzYWJsZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZVRvZ2dsZUFjdGlvbkNsaWNrKHJvdyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkPXshcm93LmRpc2FibGVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZXJzY29yZS1kYW5nbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e3Jvdy5fX3RvZ2dsZVNob3dTcGlubmVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlYXJhbmNlPVwidG9nZ2xlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidG9nZ2xlX3N3aXRjaFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkTGFiZWw9e18oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJNYXBwaW5nPy5kaXNhYmxlZD8uZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGhlYWRlck1hcHBpbmcuZGlzYWJsZWQuZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICdFbmFibGVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnNlbGVjdGVkTGFiZWw9e18oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJNYXBwaW5nPy5kaXNhYmxlZD8udHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gaGVhZGVyTWFwcGluZy5kaXNhYmxlZC50cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnRGlzYWJsZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLXRlc3Q9XCJzdGF0dXNcIj57c3RhdHVzQ29udGVudH08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1N3aXRjaFdyYXBwZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvVGFibGUuQ2VsbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChoZWFkZXIuZmllbGQgPT09ICdhY3Rpb25zJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxIVE1MID0gcm93QWN0aW9uc1ByaW1hcnlCdXR0b24ocm93KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbEhUTUwgPSAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUYWJsZS5DZWxsIGRhdGEtY29sdW1uPXtoZWFkZXIuZmllbGR9IGtleT17aGVhZGVyLmZpZWxkfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtoZWFkZXJNYXBwaW5nW2hlYWRlci5maWVsZF0gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJNYXBwaW5nW2hlYWRlci5maWVsZF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93W2hlYWRlci5maWVsZF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGhlYWRlck1hcHBpbmdbaGVhZGVyLmZpZWxkXVtyb3dbaGVhZGVyLmZpZWxkXV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHJvd1toZWFkZXIuZmllbGRdfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1RhYmxlLkNlbGw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjZWxsSFRNTDtcbiAgICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICA8L1RhYmxlLlJvdz5cbiAgICAgICAgPC8+XG4gICAgKTtcbn1cblxuQ3VzdG9tVGFibGVSb3cucHJvcFR5cGVzID0ge1xuICAgIHJvdzogUHJvcFR5cGVzLmFueSxcbiAgICBjb2x1bW5zOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaGVhZGVyTWFwcGluZzogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBoYW5kbGVUb2dnbGVBY3Rpb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGFuZGxlRWRpdEFjdGlvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoYW5kbGVDbG9uZUFjdGlvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoYW5kbGVEZWxldGVBY3Rpb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBSZWFjdC5tZW1vKEN1c3RvbVRhYmxlUm93KTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL0J1dHRvbic7XG5pbXBvcnQgTW9kYWwgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9Nb2RhbCc7XG5pbXBvcnQgTWVzc2FnZSBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL01lc3NhZ2UnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgV2FpdFNwaW5uZXIgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9XYWl0U3Bpbm5lcic7XG5pbXBvcnQgdXBkYXRlIGZyb20gJ2ltbXV0YWJpbGl0eS1oZWxwZXInO1xuaW1wb3J0IHsgXyB9IGZyb20gJ0BzcGx1bmsvdWktdXRpbHMvaTE4bic7XG5pbXBvcnQgeyBnZW5lcmF0ZVRvYXN0IH0gZnJvbSAnLi4vdXRpbC91dGlsJztcblxuaW1wb3J0IHsgYXhpb3NDYWxsV3JhcHBlciB9IGZyb20gJy4uL3V0aWwvYXhpb3NDYWxsV3JhcHBlcic7XG5pbXBvcnQgVGFibGVDb250ZXh0IGZyb20gJy4uL2NvbnRleHQvVGFibGVDb250ZXh0JztcbmltcG9ydCB7IHBhcnNlRXJyb3JNc2csIGdldEZvcm1hdHRlZE1lc3NhZ2UgfSBmcm9tICcuLi91dGlsL21lc3NhZ2VVdGlsJztcbmltcG9ydCB7IFBBR0VfSU5QVVQgfSBmcm9tICcuLi9jb25zdGFudHMvcGFnZXMnO1xuXG5jb25zdCBNb2RhbFdyYXBwZXIgPSBzdHlsZWQoTW9kYWwpYFxuICAgIHdpZHRoOiA4MDBweDtcbmA7XG5cbmNsYXNzIERlbGV0ZU1vZGFsIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgY29udGV4dFR5cGUgPSBUYWJsZUNvbnRleHQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7IGlzRGVsZXRpbmc6IGZhbHNlLCBFcnJvck1zZzogJycgfTtcbiAgICB9XG5cbiAgICBoYW5kbGVSZXF1ZXN0Q2xvc2UgPSAoKSA9PiB7XG4gICAgICAgIC8vIHNldCBFcnJvck1zZyB0byBlbXB0eSBzdHJpbmcgb24gY2xvc2Ugb3IgY2FuY2VsXG4gICAgICAgIC8vIHNvIHRoYXQgb24gYWdhaW4gb3BlbiBvZiBtb2RhbCBpdCBkb2VzIG5vdCBzaG93IHRoZSBzYW1lIEVycm9yTXNnXG4gICAgICAgIHRoaXMuc3RhdGUuRXJyb3JNc2cgPSAnJztcbiAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVSZXF1ZXN0Q2xvc2UoKTtcbiAgICB9O1xuXG4gICAgaGFuZGxlRGVsZXRlID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKFxuICAgICAgICAgICAgKHByZXZTdGF0ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IC4uLnByZXZTdGF0ZSwgaXNEZWxldGluZzogdHJ1ZSwgRXJyb3JNc2c6ICcnIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGF4aW9zQ2FsbFdyYXBwZXIoe1xuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlTmFtZTogYCR7dGhpcy5wcm9wcy5zZXJ2aWNlTmFtZX0vJHtlbmNvZGVVUklDb21wb25lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnN0YW56YU5hbWVcbiAgICAgICAgICAgICAgICAgICAgKX1gLFxuICAgICAgICAgICAgICAgICAgICBjdXN0b21IZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyB9LFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdkZWxldGUnLFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVFcnJvcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yU3VibWl0TXNnID0gcGFyc2VFcnJvck1zZyhlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IEVycm9yTXNnOiBlcnJvclN1Ym1pdE1zZywgaXNEZWxldGluZzogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LnNldFJvd0RhdGEoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlKHRoaXMuY29udGV4dC5yb3dEYXRhLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt0aGlzLnByb3BzLnNlcnZpY2VOYW1lXTogeyAkdW5zZXQ6IFt0aGlzLnByb3BzLnN0YW56YU5hbWVdIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaXNEZWxldGluZzogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVJlcXVlc3RDbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVUb2FzdChgRGVsZXRlZCBcIiR7dGhpcy5wcm9wcy5zdGFuemFOYW1lfVwiYCwgJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIC8vIERpc3BsYXkgZXJyb3IgbWVzc2FnZVxuICAgIGdlbmVyYXRlRXJyb3JNZXNzYWdlID0gKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5FcnJvck1zZykge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICA8TWVzc2FnZSBhcHBlYXJhbmNlPVwiZmlsbFwiIHR5cGU9XCJlcnJvclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuRXJyb3JNc2d9XG4gICAgICAgICAgICAgICAgICAgIDwvTWVzc2FnZT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgbGV0IGRlbGV0ZU1zZztcbiAgICAgICAgaWYgKHRoaXMucHJvcHMucGFnZSA9PT0gUEFHRV9JTlBVVCkge1xuICAgICAgICAgICAgZGVsZXRlTXNnID0gZ2V0Rm9ybWF0dGVkTWVzc2FnZSgxMDMsIFt0aGlzLnByb3BzLnN0YW56YU5hbWVdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlbGV0ZU1zZyA9IGdldEZvcm1hdHRlZE1lc3NhZ2UoMTAyLCBbdGhpcy5wcm9wcy5zdGFuemFOYW1lXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxNb2RhbFdyYXBwZXIgb3Blbj17dGhpcy5wcm9wcy5vcGVufT5cbiAgICAgICAgICAgICAgICA8TW9kYWwuSGVhZGVyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlPXtnZXRGb3JtYXR0ZWRNZXNzYWdlKDEwMSl9XG4gICAgICAgICAgICAgICAgICAgIG9uUmVxdWVzdENsb3NlPXt0aGlzLmhhbmRsZVJlcXVlc3RDbG9zZX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxNb2RhbC5Cb2R5IGNsYXNzTmFtZT1cImRlbGV0ZVByb21wdFwiPlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5nZW5lcmF0ZUVycm9yTWVzc2FnZSgpfVxuICAgICAgICAgICAgICAgICAgICA8cD57ZGVsZXRlTXNnfTwvcD5cbiAgICAgICAgICAgICAgICA8L01vZGFsLkJvZHk+XG4gICAgICAgICAgICAgICAgPE1vZGFsLkZvb3Rlcj5cbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwZWFyYW5jZT1cInNlY29uZGFyeVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZVJlcXVlc3RDbG9zZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtfKCdDYW5jZWwnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXt0aGlzLnN0YXRlLmlzRGVsZXRpbmd9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVhcmFuY2U9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXt0aGlzLnN0YXRlLmlzRGVsZXRpbmcgPyA8V2FpdFNwaW5uZXIgLz4gOiBfKCdEZWxldGUnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlRGVsZXRlfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e3RoaXMuc3RhdGUuaXNEZWxldGluZ31cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L01vZGFsLkZvb3Rlcj5cbiAgICAgICAgICAgIDwvTW9kYWxXcmFwcGVyPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuRGVsZXRlTW9kYWwucHJvcFR5cGVzID0ge1xuICAgIHBhZ2U6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBoYW5kbGVSZXF1ZXN0Q2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNlcnZpY2VOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHN0YW56YU5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBEZWxldGVNb2RhbDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCBtZW1vLCB1c2VTdGF0ZSwgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCBUYWJsZSBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL1RhYmxlJztcbmltcG9ydCB7IF8gfSBmcm9tICdAc3BsdW5rL3VpLXV0aWxzL2kxOG4nO1xuXG5pbXBvcnQgdXNlUXVlcnkgZnJvbSAnLi4vLi4vaG9va3MvdXNlUXVlcnknO1xuaW1wb3J0IHsgTU9ERV9DTE9ORSwgTU9ERV9FRElUIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL21vZGVzJztcbmltcG9ydCB7IFBBR0VfSU5QVVQgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvcGFnZXMnO1xuaW1wb3J0IHsgZ2V0VW5pZmllZENvbmZpZ3MgfSBmcm9tICcuLi8uLi91dGlsL3V0aWwnO1xuaW1wb3J0IHsgZ2V0RXhwYW5zaW9uUm93IH0gZnJvbSAnLi9UYWJsZUV4cGFuc2lvblJvdyc7XG5pbXBvcnQgeyBTVFlMRV9NT0RBTCwgU1RZTEVfUEFHRSB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy9kaWFsb2dTdHlsZXMnO1xuaW1wb3J0IEN1c3RvbVRhYmxlUm93IGZyb20gJy4vQ3VzdG9tVGFibGVSb3cnO1xuaW1wb3J0IEVudGl0eU1vZGFsIGZyb20gJy4uL0VudGl0eU1vZGFsJztcbmltcG9ydCBEZWxldGVNb2RhbCBmcm9tICcuLi9EZWxldGVNb2RhbCc7XG5pbXBvcnQgVGFibGVDb250ZXh0IGZyb20gJy4uLy4uL2NvbnRleHQvVGFibGVDb250ZXh0JztcbmltcG9ydCB7IE5vUmVjb3Jkc0RpdiB9IGZyb20gJy4vQ3VzdG9tVGFibGVTdHlsZSc7XG5cbmZ1bmN0aW9uIEN1c3RvbVRhYmxlKHtcbiAgICBwYWdlLFxuICAgIHNlcnZpY2VOYW1lLFxuICAgIGRhdGEsXG4gICAgaGFuZGxlVG9nZ2xlQWN0aW9uQ2xpY2ssXG4gICAgaGFuZGxlT3BlblBhZ2VTdHlsZURpYWxvZyxcbiAgICBoYW5kbGVTb3J0LFxuICAgIHNvcnREaXIsXG4gICAgc29ydEtleSxcbn0pIHtcbiAgICBjb25zdCB1bmlmaWVkQ29uZmlncyA9IGdldFVuaWZpZWRDb25maWdzKCk7XG4gICAgY29uc3QgW2VudGl0eU1vZGFsLCBzZXRFbnRpdHlNb2RhbF0gPSB1c2VTdGF0ZSh7IG9wZW46IGZhbHNlIH0pO1xuICAgIGNvbnN0IFtkZWxldGVNb2RhbCwgc2V0RGVsZXRlTW9kYWxdID0gdXNlU3RhdGUoeyBvcGVuOiBmYWxzZSB9KTtcblxuICAgIGNvbnN0IHsgcm93RGF0YSB9ID0gdXNlQ29udGV4dChUYWJsZUNvbnRleHQpO1xuXG4gICAgY29uc3QgdGFibGVDb25maWcgPVxuICAgICAgICBwYWdlID09PSBQQUdFX0lOUFVUXG4gICAgICAgICAgICA/IHVuaWZpZWRDb25maWdzLnBhZ2VzLmlucHV0cy50YWJsZVxuICAgICAgICAgICAgOiB1bmlmaWVkQ29uZmlncy5wYWdlcy5jb25maWd1cmF0aW9uLnRhYnMuZmlsdGVyKCh4KSA9PiB4Lm5hbWUgPT09IHNlcnZpY2VOYW1lKVswXVxuICAgICAgICAgICAgICAgICAgLnRhYmxlO1xuICAgIGNvbnN0IHsgbW9yZUluZm8sIGhlYWRlciB9ID0gdGFibGVDb25maWc7XG4gICAgY29uc3QgaGVhZGVycyA9IHRhYmxlQ29uZmlnLmhlYWRlcjtcblxuICAgIGNvbnN0IGhlYWRlck1hcHBpbmcgPSB7fTtcbiAgICBoZWFkZXIuZm9yRWFjaCgoeCkgPT4ge1xuICAgICAgICBoZWFkZXJNYXBwaW5nW3guZmllbGRdID0geC5tYXBwaW5nO1xuICAgIH0pO1xuXG4gICAgY29uc3Qgc2VydmljZVRvU3R5bGVNYXAgPSB7fTtcbiAgICBpZiAocGFnZSA9PT0gUEFHRV9JTlBVVCkge1xuICAgICAgICB1bmlmaWVkQ29uZmlncy5wYWdlcy5pbnB1dHMuc2VydmljZXMuZm9yRWFjaCgoeCkgPT4ge1xuICAgICAgICAgICAgc2VydmljZVRvU3R5bGVNYXBbeC5uYW1lXSA9IHguc3R5bGUgPT09IFNUWUxFX1BBR0UgPyBTVFlMRV9QQUdFIDogU1RZTEVfTU9EQUw7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHF1ZXJ5ID0gdXNlUXVlcnkoKTtcblxuICAgIC8vIFJ1biBvbmx5IG9uY2Ugd2hlbiBjb21wb25lbnQgaXMgbW91bnRlZCB0byBsb2FkIGNvbXBvbmVudCBiYXNlZCBvbiBpbml0aWFsIHF1ZXJ5IHBhcmFtc1xuICAgIC8vIGFuZCB3aGVuIHF1ZXJ5IHBhcmFtcyBhcmUgdXBkYXRlZFxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIC8vIE9ubHkgcnVuIHdoZW4gdGFiIG1hdGNoZXMgc2VydmljZU5hbWUgb3IgaWYgaW4gaW5wdXQgcGFnZSB3aGVyZSBzZXJ2aWNlTmFtZSBpcyB1bmRlZmluZWRcbiAgICAgICAgaWYgKHF1ZXJ5ICYmIChxdWVyeS5nZXQoJ3RhYicpID09PSBzZXJ2aWNlTmFtZSB8fCB0eXBlb2Ygc2VydmljZU5hbWUgPT09ICd1bmRlZmluZWQnKSkge1xuICAgICAgICAgICAgLy8gT3BlbiBtb2RhbCB3aGVuIHJlY29yZCBpcyBhdmFpbGFibGUgaW4gcXVlcnkgcGFyYW1zIGFuZCBtb2RhbCBpcyBub3Qgb3BlblxuICAgICAgICAgICAgaWYgKHF1ZXJ5LmdldCgncmVjb3JkJykgJiYgIWVudGl0eU1vZGFsLm9wZW4pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZXJ2aWNlS2V5ID0gT2JqZWN0LmtleXMocm93RGF0YSkuZmluZChcbiAgICAgICAgICAgICAgICAgICAgKHgpID0+IHR5cGVvZiByb3dEYXRhW3hdW3F1ZXJ5LmdldCgncmVjb3JkJyldICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKHNlcnZpY2VLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm93ID0gcm93RGF0YVtzZXJ2aWNlS2V5XVtxdWVyeS5nZXQoJ3JlY29yZCcpXTtcbiAgICAgICAgICAgICAgICAgICAgc2V0RW50aXR5TW9kYWwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uZW50aXR5TW9kYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZU5hbWU6IHJvdy5zZXJ2aWNlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YW56YU5hbWU6IHJvdy5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogTU9ERV9FRElULFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFxdWVyeS5nZXQoJ3JlY29yZCcpICYmIGVudGl0eU1vZGFsLm9wZW4pIHtcbiAgICAgICAgICAgICAgICAvLyBDbG9zZSBtb2RhbCBpZiByZWNvcmQgcXVlcnkgcGFyYW0gaXMgbm90IGF2YWlsYWJsZSBhbmQgbW9kYWwgaXMgb3BlblxuICAgICAgICAgICAgICAgIC8vIE5PVEU6IFRoaXMgc2hvdWxkIG9ubHkgYmUgZXhlY3V0ZWQgaW4gY2FzZSBvZiBNT0RFX0VESVQgd2hpY2ggaXMgaGFuZGxlZCBieVxuICAgICAgICAgICAgICAgIC8vIHVzZUVmZmVjdCBkZXBlbmRlbmN5IHdoaWNoIHdpbGwgb25seSBiZSBjaGFuZ2VkIGluIGNhc2Ugb2YgZWRpdGluZyBlbnRpdHlcbiAgICAgICAgICAgICAgICBzZXRFbnRpdHlNb2RhbCh7IC4uLmVudGl0eU1vZGFsLCBvcGVuOiBmYWxzZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICAgfSwgW10pO1xuXG4gICAgY29uc3QgaGFuZGxlRW50aXR5Q2xvc2UgPSAoKSA9PiB7XG4gICAgICAgIHNldEVudGl0eU1vZGFsKHsgLi4uZW50aXR5TW9kYWwsIG9wZW46IGZhbHNlIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVFZGl0QWN0aW9uQ2xpY2sgPSB1c2VDYWxsYmFjayhcbiAgICAgICAgKHNlbGVjdGVkUm93KSA9PiB7XG4gICAgICAgICAgICBpZiAoc2VydmljZVRvU3R5bGVNYXBbc2VsZWN0ZWRSb3cuc2VydmljZU5hbWVdID09PSAncGFnZScpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVPcGVuUGFnZVN0eWxlRGlhbG9nKHNlbGVjdGVkUm93LCBNT0RFX0VESVQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXRFbnRpdHlNb2RhbCh7XG4gICAgICAgICAgICAgICAgICAgIC4uLmVudGl0eU1vZGFsLFxuICAgICAgICAgICAgICAgICAgICBvcGVuOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlTmFtZTogc2VsZWN0ZWRSb3cuc2VydmljZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHN0YW56YU5hbWU6IHNlbGVjdGVkUm93Lm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIG1vZGU6IE1PREVfRURJVCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgICAgICBbZW50aXR5TW9kYWxdXG4gICAgKTtcblxuICAgIGNvbnN0IGhhbmRsZURlbGV0ZUNsb3NlID0gKCkgPT4ge1xuICAgICAgICBzZXREZWxldGVNb2RhbCh7IC4uLmRlbGV0ZU1vZGFsLCBvcGVuOiBmYWxzZSB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlQ2xvbmVBY3Rpb25DbGljayA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAoc2VsZWN0ZWRSb3cpID0+IHtcbiAgICAgICAgICAgIGlmIChzZXJ2aWNlVG9TdHlsZU1hcFtzZWxlY3RlZFJvdy5zZXJ2aWNlTmFtZV0gPT09ICdwYWdlJykge1xuICAgICAgICAgICAgICAgIGhhbmRsZU9wZW5QYWdlU3R5bGVEaWFsb2coc2VsZWN0ZWRSb3csIE1PREVfQ0xPTkUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXRFbnRpdHlNb2RhbCh7XG4gICAgICAgICAgICAgICAgICAgIC4uLmVudGl0eU1vZGFsLFxuICAgICAgICAgICAgICAgICAgICBvcGVuOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlTmFtZTogc2VsZWN0ZWRSb3cuc2VydmljZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHN0YW56YU5hbWU6IHNlbGVjdGVkUm93Lm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIG1vZGU6IE1PREVfQ0xPTkUsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgICAgICAgW2VudGl0eU1vZGFsXVxuICAgICk7XG5cbiAgICBjb25zdCBoYW5kbGVEZWxldGVBY3Rpb25DbGljayA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAoc2VsZWN0ZWRSb3cpID0+IHtcbiAgICAgICAgICAgIHNldERlbGV0ZU1vZGFsKHtcbiAgICAgICAgICAgICAgICAuLi5kZWxldGVNb2RhbCxcbiAgICAgICAgICAgICAgICBvcGVuOiB0cnVlLFxuICAgICAgICAgICAgICAgIHN0YW56YU5hbWU6IHNlbGVjdGVkUm93Lm5hbWUsXG4gICAgICAgICAgICAgICAgc2VydmljZU5hbWU6IHNlbGVjdGVkUm93LnNlcnZpY2VOYW1lLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIFtkZWxldGVNb2RhbF1cbiAgICApO1xuXG4gICAgY29uc3QgZ2VuZXJhdGVNb2RhbERpYWxvZyA9ICgpID0+IHtcbiAgICAgICAgaWYgKGVudGl0eU1vZGFsLm9wZW4pIHtcbiAgICAgICAgICAgIGxldCBsYWJlbDtcbiAgICAgICAgICAgIGlmIChwYWdlID09PSAnaW5wdXRzJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgc2VydmljZXMgfSA9IHVuaWZpZWRDb25maWdzLnBhZ2VzPy5pbnB1dHM7XG4gICAgICAgICAgICAgICAgbGFiZWwgPSBzZXJ2aWNlcy5maW5kKCh4KSA9PiB4Lm5hbWUgPT09IGVudGl0eU1vZGFsLnNlcnZpY2VOYW1lKT8udGl0bGU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgdGFicyB9ID0gdW5pZmllZENvbmZpZ3MucGFnZXM/LmNvbmZpZ3VyYXRpb247XG4gICAgICAgICAgICAgICAgbGFiZWwgPSB0YWJzLmZpbmQoKHgpID0+IHgubmFtZSA9PT0gZW50aXR5TW9kYWwuc2VydmljZU5hbWUpPy50aXRsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPEVudGl0eU1vZGFsXG4gICAgICAgICAgICAgICAgICAgIHBhZ2U9e3BhZ2V9XG4gICAgICAgICAgICAgICAgICAgIG9wZW49e2VudGl0eU1vZGFsLm9wZW59XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZVJlcXVlc3RDbG9zZT17aGFuZGxlRW50aXR5Q2xvc2V9XG4gICAgICAgICAgICAgICAgICAgIHNlcnZpY2VOYW1lPXtlbnRpdHlNb2RhbC5zZXJ2aWNlTmFtZX1cbiAgICAgICAgICAgICAgICAgICAgc3RhbnphTmFtZT17ZW50aXR5TW9kYWwuc3RhbnphTmFtZX1cbiAgICAgICAgICAgICAgICAgICAgbW9kZT17ZW50aXR5TW9kYWwubW9kZX1cbiAgICAgICAgICAgICAgICAgICAgZm9ybUxhYmVsPXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eU1vZGFsLm1vZGUgPT09IE1PREVfQ0xPTkUgPyBfKGBDbG9uZSBgKSArIGxhYmVsIDogXyhgVXBkYXRlIGApICsgbGFiZWxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG5cbiAgICBjb25zdCBnZW5lcmF0ZURlbGV0ZURpYWxvZyA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxEZWxldGVNb2RhbFxuICAgICAgICAgICAgICAgIHBhZ2U9e3BhZ2V9XG4gICAgICAgICAgICAgICAgb3Blbj17ZGVsZXRlTW9kYWwub3Blbn1cbiAgICAgICAgICAgICAgICBoYW5kbGVSZXF1ZXN0Q2xvc2U9e2hhbmRsZURlbGV0ZUNsb3NlfVxuICAgICAgICAgICAgICAgIHNlcnZpY2VOYW1lPXtkZWxldGVNb2RhbC5zZXJ2aWNlTmFtZX1cbiAgICAgICAgICAgICAgICBzdGFuemFOYW1lPXtkZWxldGVNb2RhbC5zdGFuemFOYW1lfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgY29uc3QgZ2VuZXJhdGVDb2x1bW5zID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBjb2x1bW4gPSBbXTtcbiAgICAgICAgaWYgKGhlYWRlcnMgJiYgaGVhZGVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGhlYWRlcnMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbHVtbi5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgLi4uaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgc29ydEtleTogaXRlbS5maWVsZCB8fCBudWxsLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29sdW1uLnB1c2goeyBsYWJlbDogJ0FjdGlvbnMnLCBmaWVsZDogJ2FjdGlvbnMnLCBzb3J0S2V5OiAnJyB9KTtcbiAgICAgICAgcmV0dXJuIGNvbHVtbjtcbiAgICB9O1xuXG4gICAgY29uc3QgY29sdW1ucyA9IGdlbmVyYXRlQ29sdW1ucygpO1xuXG4gICAgY29uc3QgZ2V0VGFibGVIZWFkZXJDZWxsID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFRhYmxlLkhlYWQ+XG4gICAgICAgICAgICAgICAge2NvbHVtbnMgJiZcbiAgICAgICAgICAgICAgICAgICAgY29sdW1ucy5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAgICAgY29sdW1ucy5tYXAoKGhlYWREYXRhKSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8VGFibGUuSGVhZENlbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2hlYWREYXRhLmZpZWxkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uU29ydD17aGVhZERhdGEuc29ydEtleSA/IGhhbmRsZVNvcnQgOiBudWxsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRLZXk9e2hlYWREYXRhLnNvcnRLZXkgPyBoZWFkRGF0YS5zb3J0S2V5IDogbnVsbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3J0RGlyPXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZERhdGEuc29ydEtleSAmJiBoZWFkRGF0YS5zb3J0S2V5ID09PSBzb3J0S2V5ID8gc29ydERpciA6ICdub25lJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aGVhZERhdGEubGFiZWx9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1RhYmxlLkhlYWRDZWxsPlxuICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvVGFibGUuSGVhZD5cbiAgICAgICAgKTtcbiAgICB9LCBbY29sdW1ucywgaGFuZGxlU29ydCwgc29ydERpciwgc29ydEtleV0pO1xuXG4gICAgY29uc3QgZ2V0VGFibGVCb2R5ID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFRhYmxlLkJvZHk+XG4gICAgICAgICAgICAgICAge2RhdGEgJiZcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5tYXAoKHJvdykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q3VzdG9tVGFibGVSb3cgLy8gbm9zZW1ncmVwOiB0eXBlc2NyaXB0LnJlYWN0LmJlc3QtcHJhY3RpY2UucmVhY3QtcHJvcHMtc3ByZWFkaW5nLnJlYWN0LXByb3BzLXNwcmVhZGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e3Jvdy5pZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93PXtyb3d9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnM9e2NvbHVtbnN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlck1hcHBpbmc9e2hlYWRlck1hcHBpbmd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsuLi57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVFZGl0QWN0aW9uQ2xpY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVDbG9uZUFjdGlvbkNsaWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlRGVsZXRlQWN0aW9uQ2xpY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZVRvZ2dsZUFjdGlvbkNsaWNrPXtoYW5kbGVUb2dnbGVBY3Rpb25DbGlja31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgey4uLihtb3JlSW5mb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBhbnNpb25Sb3c6IGdldEV4cGFuc2lvblJvdyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5zLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZUluZm9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDoge30pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvVGFibGUuQm9keT5cbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICAgIHtjb2x1bW5zICYmIGNvbHVtbnMubGVuZ3RoICYmIChcbiAgICAgICAgICAgICAgICA8VGFibGUgLy8gbm9zZW1ncmVwOiB0eXBlc2NyaXB0LnJlYWN0LmJlc3QtcHJhY3RpY2UucmVhY3QtcHJvcHMtc3ByZWFkaW5nLnJlYWN0LXByb3BzLXNwcmVhZGluZ1xuICAgICAgICAgICAgICAgICAgICBzdHJpcGVSb3dzXG4gICAgICAgICAgICAgICAgICAgIHsuLi4obW9yZUluZm8gPyB7IHJvd0V4cGFuc2lvbjogJ3NpbmdsZScgfSA6IHt9KX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHtnZXRUYWJsZUhlYWRlckNlbGwoKX1cbiAgICAgICAgICAgICAgICAgICAge2dldFRhYmxlQm9keSgpfVxuICAgICAgICAgICAgICAgIDwvVGFibGU+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgeyFkYXRhLmxlbmd0aCA/IDxOb1JlY29yZHNEaXY+Tm8gcmVjb3JkcyBmb3VuZDwvTm9SZWNvcmRzRGl2PiA6IG51bGx9XG4gICAgICAgICAgICB7Z2VuZXJhdGVNb2RhbERpYWxvZygpfVxuICAgICAgICAgICAge2dlbmVyYXRlRGVsZXRlRGlhbG9nKCl9XG4gICAgICAgIDwvPlxuICAgICk7XG59XG5cbkN1c3RvbVRhYmxlLnByb3BUeXBlcyA9IHtcbiAgICBwYWdlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgc2VydmljZU5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZGF0YTogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gICAgaGFuZGxlVG9nZ2xlQWN0aW9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhbmRsZU9wZW5QYWdlU3R5bGVEaWFsb2c6IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhbmRsZVNvcnQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNvcnREaXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgc29ydEtleTogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW8oQ3VzdG9tVGFibGUpO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUZXh0IGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvVGV4dCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5mdW5jdGlvbiBUYWJsZUZpbHRlcihwcm9wcykge1xuICAgIGNvbnN0IGRlYm91bmNlID0gKGZ1bmMsIHdhaXQpID0+IHtcbiAgICAgICAgbGV0IHRpbWVvdXQ7XG5cbiAgICAgICAgLy8gVGhpcyBpcyB0aGUgZnVuY3Rpb24gdGhhdCBpcyByZXR1cm5lZCBhbmQgd2lsbCBiZSBleGVjdXRlZCBtYW55IHRpbWVzXG4gICAgICAgIC8vIFdlIHNwcmVhZCAoLi4uYXJncykgdG8gY2FwdHVyZSBhbnkgbnVtYmVyIG9mIHBhcmFtZXRlcnMgd2Ugd2FudCB0byBwYXNzXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBleGVjdXRlZEZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIC8vIFRoZSBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBleGVjdXRlZCBhZnRlclxuICAgICAgICAgICAgLy8gdGhlIGRlYm91bmNlIHRpbWUgaGFzIGVsYXBzZWRcbiAgICAgICAgICAgIGNvbnN0IGxhdGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIG51bGwgdGltZW91dCB0byBpbmRpY2F0ZSB0aGUgZGVib3VuY2UgZW5kZWRcbiAgICAgICAgICAgICAgICB0aW1lb3V0ID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIC8vIEV4ZWN1dGUgdGhlIGNhbGxiYWNrXG4gICAgICAgICAgICAgICAgZnVuYyguLi5hcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBUaGlzIHdpbGwgcmVzZXQgdGhlIHdhaXRpbmcgZXZlcnkgZnVuY3Rpb24gZXhlY3V0aW9uLlxuICAgICAgICAgICAgLy8gVGhpcyBpcyB0aGUgc3RlcCB0aGF0IHByZXZlbnRzIHRoZSBmdW5jdGlvbiBmcm9tXG4gICAgICAgICAgICAvLyBiZWluZyBleGVjdXRlZCBiZWNhdXNlIGl0IHdpbGwgbmV2ZXIgcmVhY2ggdGhlXG4gICAgICAgICAgICAvLyBpbnNpZGUgb2YgdGhlIHByZXZpb3VzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblxuICAgICAgICAgICAgLy8gUmVzdGFydCB0aGUgZGVib3VuY2Ugd2FpdGluZyBwZXJpb2QuXG4gICAgICAgICAgICAvLyBzZXRUaW1lb3V0IHJldHVybnMgYSB0cnV0aHkgdmFsdWVcbiAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPFRleHRcbiAgICAgICAgICAgIGFwcGVhcmFuY2U9XCJzZWFyY2hcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJmaWx0ZXJcIlxuICAgICAgICAgICAgb25DaGFuZ2U9e2RlYm91bmNlKHByb3BzLmhhbmRsZUNoYW5nZSwgMjAwKX1cbiAgICAgICAgLz5cbiAgICApO1xufVxuXG5UYWJsZUZpbHRlci5wcm9wVHlwZXMgPSB7XG4gICAgaGFuZGxlQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRhYmxlRmlsdGVyO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFNlbGVjdCBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL1NlbGVjdCc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvQnV0dG9uJztcbmltcG9ydCBQYWdpbmF0b3IgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9QYWdpbmF0b3InO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBfIH0gZnJvbSAnQHNwbHVuay91aS11dGlscy9pMThuJztcblxuaW1wb3J0IFRhYmxlRmlsdGVyIGZyb20gJy4vVGFibGVGaWx0ZXInO1xuaW1wb3J0IFRhYmxlQ29udGV4dCBmcm9tICcuLi8uLi9jb250ZXh0L1RhYmxlQ29udGV4dCc7XG5pbXBvcnQgeyBUYWJsZVNlbGVjdEJveFdyYXBwZXIgfSBmcm9tICcuL0N1c3RvbVRhYmxlU3R5bGUnO1xuaW1wb3J0IHsgUEFHRV9JTlBVVCB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy9wYWdlcyc7XG5cbmNvbnN0IFRhYmxlSGVhZGVyV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNjY2M7XG4gICAgcGFkZGluZy10b3A6IDVweDtcbiAgICBtYXJnaW4tYm90dG9tOiA1cHg7XG5gO1xuXG5jb25zdCBUYWJsZUZpbHRlcldyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICAgIG1heC13aWR0aDogMzAwcHg7XG4gICAgd2lkdGg6IDEwMCU7XG5gO1xuXG5mdW5jdGlvbiBUYWJsZUhlYWRlcih7IHBhZ2UsIHNlcnZpY2VzLCB0b3RhbEVsZW1lbnQsIGhhbmRsZVJlcXVlc3RNb2RhbE9wZW4gfSkge1xuICAgIGNvbnN0IHtcbiAgICAgICAgcGFnZVNpemUsXG4gICAgICAgIGN1cnJlbnRQYWdlLFxuICAgICAgICBzZXRDdXJyZW50UGFnZSxcbiAgICAgICAgc2V0UGFnZVNpemUsXG4gICAgICAgIHNlYXJjaFR5cGUsXG4gICAgICAgIHNldFNlYXJjaFR5cGUsXG4gICAgICAgIHNldFNlYXJjaFRleHQsXG4gICAgfSA9IHVzZUNvbnRleHQoVGFibGVDb250ZXh0KTtcblxuICAgIGNvbnN0IGl0ZW1MYWJlbCA9IHBhZ2UgPT09IFBBR0VfSU5QVVQgPyAnSW5wdXQnIDogJ0l0ZW0nO1xuXG4gICAgY29uc3QgZ2V0U2VhcmNoVHlwZURyb3Bkb3duID0gKCkgPT4ge1xuICAgICAgICBpZiAoc2VydmljZXMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGFyciA9IFtdO1xuICAgICAgICBhcnIgPSBzZXJ2aWNlcy5tYXAoKHNlcnZpY2UpID0+IHtcbiAgICAgICAgICAgIHJldHVybiA8U2VsZWN0Lk9wdGlvbiBrZXk9e3NlcnZpY2UubmFtZX0gbGFiZWw9e3NlcnZpY2UudGl0bGV9IHZhbHVlPXtzZXJ2aWNlLm5hbWV9IC8+O1xuICAgICAgICB9KTtcblxuICAgICAgICBhcnIudW5zaGlmdCg8U2VsZWN0Lk9wdGlvbiBrZXk9XCJhbGxcIiBsYWJlbD17XygnQWxsJyl9IHZhbHVlPVwiYWxsXCIgLz4pO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgICAgIHZhbHVlPXtzZWFyY2hUeXBlfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImRyb3Bkb3duSW5wdXRcIlxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSwgeyB2YWx1ZSB9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNldEN1cnJlbnRQYWdlKDApO1xuICAgICAgICAgICAgICAgICAgICBzZXRTZWFyY2hUeXBlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHthcnJ9XG4gICAgICAgICAgICA8L1NlbGVjdD5cbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPFRhYmxlSGVhZGVyV3JhcHBlcj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiaW5wdXROdW1iZXJcIj5cbiAgICAgICAgICAgICAgICAgICAge3RvdGFsRWxlbWVudH1cbiAgICAgICAgICAgICAgICAgICAge3RvdGFsRWxlbWVudCA+IDEgPyBfKGAgJHtpdGVtTGFiZWx9c2ApIDogXyhgICR7aXRlbUxhYmVsfWApfVxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICB7cGFnZSA9PT0gUEFHRV9JTlBVVCA/IChcbiAgICAgICAgICAgICAgICAgICAgPFRhYmxlU2VsZWN0Qm94V3JhcHBlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17cGFnZVNpemV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZHJvcGRvd25QYWdlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUsIHsgdmFsdWUgfSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRDdXJyZW50UGFnZSgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFnZVNpemUodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdC5PcHRpb24ga2V5PVwiMTBcIiBsYWJlbD17XygnMTAgUGVyIFBhZ2UnKX0gdmFsdWU9ezEwfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3QuT3B0aW9uIGtleT1cIjI1XCIgbGFiZWw9e18oJzI1IFBlciBQYWdlJyl9IHZhbHVlPXsyNX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VsZWN0Lk9wdGlvbiBrZXk9XCI1MFwiIGxhYmVsPXtfKCc1MCBQZXIgUGFnZScpfSB2YWx1ZT17NTB9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtnZXRTZWFyY2hUeXBlRHJvcGRvd24oKX1cbiAgICAgICAgICAgICAgICAgICAgPC9UYWJsZVNlbGVjdEJveFdyYXBwZXI+XG4gICAgICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxUYWJsZUZpbHRlcldyYXBwZXI+XG4gICAgICAgICAgICAgICAgPFRhYmxlRmlsdGVyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZUNoYW5nZT17KGUsIHsgdmFsdWUgfSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0Q3VycmVudFBhZ2UoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRTZWFyY2hUZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9UYWJsZUZpbHRlcldyYXBwZXI+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxQYWdpbmF0b3JcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlLCB7IHBhZ2U6IHBhZ2VOdW1iZXIgfSkgPT4gc2V0Q3VycmVudFBhZ2UocGFnZU51bWJlciAtIDEpfVxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50PXtjdXJyZW50UGFnZSArIDF9XG4gICAgICAgICAgICAgICAgICAgIGFsd2F5c1Nob3dMYXN0UGFnZUxpbmtcbiAgICAgICAgICAgICAgICAgICAgdG90YWxQYWdlcz17TWF0aC5jZWlsKHRvdGFsRWxlbWVudCAvIHBhZ2VTaXplKX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIHtwYWdlID09PSBQQUdFX0lOUFVUID8gbnVsbCA6IChcbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e18oJ0FkZCcpfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwZWFyYW5jZT1cInByaW1hcnlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlUmVxdWVzdE1vZGFsT3Blbn1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvVGFibGVIZWFkZXJXcmFwcGVyPlxuICAgICk7XG59XG5cblRhYmxlSGVhZGVyLnByb3BUeXBlcyA9IHtcbiAgICBwYWdlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHNlcnZpY2VzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgdG90YWxFbGVtZW50OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGhhbmRsZVJlcXVlc3RNb2RhbE9wZW46IFByb3BUeXBlcy5mdW5jLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgVGFibGVIZWFkZXI7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUNvbnRleHQsIHVzZUVmZmVjdCwgbWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1cGRhdGUgZnJvbSAnaW1tdXRhYmlsaXR5LWhlbHBlcic7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IHsgV2FpdFNwaW5uZXJXcmFwcGVyIH0gZnJvbSAnLi9DdXN0b21UYWJsZVN0eWxlJztcbmltcG9ydCB7IGF4aW9zQ2FsbFdyYXBwZXIgfSBmcm9tICcuLi8uLi91dGlsL2F4aW9zQ2FsbFdyYXBwZXInO1xuaW1wb3J0IHsgZ2V0VW5pZmllZENvbmZpZ3MsIGdlbmVyYXRlVG9hc3QgfSBmcm9tICcuLi8uLi91dGlsL3V0aWwnO1xuaW1wb3J0IEN1c3RvbVRhYmxlIGZyb20gJy4vQ3VzdG9tVGFibGUnO1xuaW1wb3J0IFRhYmxlSGVhZGVyIGZyb20gJy4vVGFibGVIZWFkZXInO1xuaW1wb3J0IFRhYmxlQ29udGV4dCBmcm9tICcuLi8uLi9jb250ZXh0L1RhYmxlQ29udGV4dCc7XG5pbXBvcnQgeyBQQUdFX0lOUFVUIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL3BhZ2VzJztcblxuZnVuY3Rpb24gVGFibGVXcmFwcGVyKHsgcGFnZSwgc2VydmljZU5hbWUsIGhhbmRsZVJlcXVlc3RNb2RhbE9wZW4sIGhhbmRsZU9wZW5QYWdlU3R5bGVEaWFsb2cgfSkge1xuICAgIGNvbnN0IFtzb3J0S2V5LCBzZXRTb3J0S2V5XSA9IHVzZVN0YXRlKCduYW1lJyk7XG4gICAgY29uc3QgW3NvcnREaXIsIHNldFNvcnREaXJdID0gdXNlU3RhdGUoJ2FzYycpO1xuICAgIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xuICAgIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGUobnVsbCk7XG5cbiAgICBjb25zdCB7IHJvd0RhdGEsIHNldFJvd0RhdGEsIHBhZ2VTaXplLCBjdXJyZW50UGFnZSwgc2VhcmNoVGV4dCwgc2VhcmNoVHlwZSB9ID0gdXNlQ29udGV4dChcbiAgICAgICAgVGFibGVDb250ZXh0XG4gICAgKTtcblxuICAgIGNvbnN0IHVuaWZpZWRDb25maWdzID0gZ2V0VW5pZmllZENvbmZpZ3MoKTtcbiAgICBjb25zdCB0YWJsZUNvbmZpZyA9XG4gICAgICAgIHBhZ2UgPT09IFBBR0VfSU5QVVRcbiAgICAgICAgICAgID8gdW5pZmllZENvbmZpZ3MucGFnZXMuaW5wdXRzLnRhYmxlXG4gICAgICAgICAgICA6IHVuaWZpZWRDb25maWdzLnBhZ2VzLmNvbmZpZ3VyYXRpb24udGFicy5maWx0ZXIoKHgpID0+IHgubmFtZSA9PT0gc2VydmljZU5hbWUpWzBdXG4gICAgICAgICAgICAgICAgICAudGFibGU7XG4gICAgY29uc3QgaGVhZGVycyA9IHRhYmxlQ29uZmlnLmhlYWRlcjtcbiAgICBjb25zdCB7IG1vcmVJbmZvIH0gPSB0YWJsZUNvbmZpZztcbiAgICBjb25zdCBzZXJ2aWNlcyA9XG4gICAgICAgIHBhZ2UgPT09IFBBR0VfSU5QVVRcbiAgICAgICAgICAgID8gdW5pZmllZENvbmZpZ3MucGFnZXMuaW5wdXRzLnNlcnZpY2VzXG4gICAgICAgICAgICA6IHVuaWZpZWRDb25maWdzLnBhZ2VzLmNvbmZpZ3VyYXRpb24udGFicy5maWx0ZXIoKHgpID0+IHgubmFtZSA9PT0gc2VydmljZU5hbWUpO1xuXG4gICAgY29uc3QgbW9kaWZ5QVBJUmVzcG9uc2UgPSAoZGF0YSkgPT4ge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgc2VydmljZXMuZm9yRWFjaCgoc2VydmljZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChzZXJ2aWNlICYmIHNlcnZpY2UubmFtZSAmJiBkYXRhKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdG1wT2JqID0ge307XG4gICAgICAgICAgICAgICAgZGF0YVtpbmRleF0uZm9yRWFjaCgodmFsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRtcE9ialt2YWwubmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi52YWwuY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiB2YWwuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB2YWwubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VOYW1lOiBzZXJ2aWNlLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgb2JqW3NlcnZpY2UubmFtZV0gPSB0bXBPYmo7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBzZXRSb3dEYXRhKG9iaik7XG4gICAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgIH07XG5cbiAgICBjb25zdCBmZXRjaElucHV0cyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVxdWVzdHMgPSBbXTtcbiAgICAgICAgc2VydmljZXMuZm9yRWFjaCgoc2VydmljZSkgPT4ge1xuICAgICAgICAgICAgcmVxdWVzdHMucHVzaChcbiAgICAgICAgICAgICAgICBheGlvc0NhbGxXcmFwcGVyKHtcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZU5hbWU6IHNlcnZpY2UubmFtZSxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGF4aW9zXG4gICAgICAgICAgICAuYWxsKHJlcXVlc3RzKVxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvd1xuICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBtZXNzYWdlID0gJyc7XG4gICAgICAgICAgICAgICAgbGV0IGVycm9yQ29kZSA9ICcnO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvci5yZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcmVxdWVzdCB3YXMgbWFkZSBhbmQgdGhlIHNlcnZlciByZXNwb25kZWQgd2l0aCBhIHN0YXR1cyBjb2RlXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgRXJyb3IgcmVjZWl2ZWQgZnJvbSBzZXJ2ZXI6ICR7ZXJyb3IucmVzcG9uc2UuZGF0YS5tZXNzYWdlc1swXS50ZXh0fWA7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yQ29kZSA9IHBhZ2UgPT09IFBBR0VfSU5QVVQgPyAnRVJSMDAwMScgOiAnRVJSMDAwMic7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvci5yZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSByZXF1ZXN0IHdhcyBtYWRlIGJ1dCBubyByZXNwb25zZSB3YXMgcmVjZWl2ZWRcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBObyByZXNwb25zZSByZWNlaXZlZCB3aGlsZSBtYWtpbmcgcmVxdWVzdCB0byAke3BhZ2V9IHNlcnZpY2VzYDtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JDb2RlID0gJ0VSUjAwMDMnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNvbWV0aGluZyBoYXBwZW5lZCBpbiBzZXR0aW5nIHVwIHRoZSByZXF1ZXN0IHRoYXQgdHJpZ2dlcmVkIGFuIEVycm9yXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgRXJyb3IgbWFraW5nIHJlcXVlc3QgdG8gJHtwYWdlfSBzZXJ2aWNlc2A7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yQ29kZSA9ICdFUlIwMDA0JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICAgICAgZXJyb3IudWNjRXJyb3JDb2RlID0gZXJyb3JDb2RlO1xuICAgICAgICAgICAgICAgIGdlbmVyYXRlVG9hc3QobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgc2V0RXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgbW9kaWZ5QVBJUmVzcG9uc2UocmVzcG9uc2UubWFwKChyZXMpID0+IHJlcy5kYXRhLmVudHJ5KSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgZmV0Y2hJbnB1dHMoKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgIH0sIFtdKTtcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHJvdyB7T2JqZWN0fSByb3dcbiAgICAgKi9cbiAgICBjb25zdCBjaGFuZ2VUb2dnbGVTdGF0dXMgPSAocm93KSA9PiB7XG4gICAgICAgIHNldFJvd0RhdGEoKGN1cnJlbnRSb3dEYXRhKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdXBkYXRlKGN1cnJlbnRSb3dEYXRhLCB7XG4gICAgICAgICAgICAgICAgW3Jvdy5zZXJ2aWNlTmFtZV06IHtcbiAgICAgICAgICAgICAgICAgICAgW3Jvdy5uYW1lXToge1xuICAgICAgICAgICAgICAgICAgICAgICAgX190b2dnbGVTaG93U3Bpbm5lcjogeyAkc2V0OiB0cnVlIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgYm9keSA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICAgICAgYm9keS5hcHBlbmQoJ2Rpc2FibGVkJywgIXJvdy5kaXNhYmxlZCk7XG4gICAgICAgIGF4aW9zQ2FsbFdyYXBwZXIoe1xuICAgICAgICAgICAgc2VydmljZU5hbWU6IGAke3Jvdy5zZXJ2aWNlTmFtZX0vJHtyb3cubmFtZX1gLFxuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIGN1c3RvbUhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnIH0sXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICAgICAgICAgIGhhbmRsZUVycm9yOiB0cnVlLFxuICAgICAgICAgICAgY2FsbGJhY2tPbkVycm9yOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0Um93RGF0YSgoY3VycmVudFJvd0RhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZShjdXJyZW50Um93RGF0YSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgW3Jvdy5zZXJ2aWNlTmFtZV06IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbcm93Lm5hbWVdOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9fdG9nZ2xlU2hvd1NwaW5uZXI6IHsgJHNldDogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KS50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgc2V0Um93RGF0YSgoY3VycmVudFJvd0RhdGEpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlKGN1cnJlbnRSb3dEYXRhLCB7XG4gICAgICAgICAgICAgICAgICAgIFtyb3cuc2VydmljZU5hbWVdOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBbcm93Lm5hbWVdOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHsgJHNldDogcmVzcG9uc2UuZGF0YS5lbnRyeVswXS5jb250ZW50LmRpc2FibGVkIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX190b2dnbGVTaG93U3Bpbm5lcjogeyAkc2V0OiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlU29ydCA9IChlLCB2YWwpID0+IHtcbiAgICAgICAgY29uc3QgcHJldlNvcnRLZXkgPSBzb3J0S2V5O1xuICAgICAgICBjb25zdCBwcmV2U29ydERpciA9IHByZXZTb3J0S2V5ID09PSB2YWwuc29ydEtleSA/IHNvcnREaXIgOiAnbm9uZSc7XG4gICAgICAgIGNvbnN0IG5leHRTb3J0RGlyID0gcHJldlNvcnREaXIgPT09ICdhc2MnID8gJ2Rlc2MnIDogJ2FzYyc7XG4gICAgICAgIHNldFNvcnREaXIobmV4dFNvcnREaXIpO1xuICAgICAgICBzZXRTb3J0S2V5KHZhbC5zb3J0S2V5KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBkYXRhXG4gICAgICogVGhpcyBmdW5jdGlvbiB3aWxsIGl0ZXJhdGUgYW4gYXJycmF5IGFuZCBtYXRjaCBlYWNoIGtleS12YWx1ZSB3aXRoIHRoZSBzZWFyY2hUZXh0XG4gICAgICogSXQgd2lsbCByZXR1cm4gYSBuZXcgYXJyYXkgd2hpY2ggd2lsbCBtYXRjaCB3aXRoIHNlYXJjaFRleHRcbiAgICAgKi9cbiAgICBjb25zdCBmaW5kQnlNYXRjaGluZ1ZhbHVlID0gKGRhdGEpID0+IHtcbiAgICAgICAgY29uc3QgYXJyID0gW107XG4gICAgICAgIGNvbnN0IHRhYmxlRmllbGRzID0gW107XG5cbiAgICAgICAgaGVhZGVycy5mb3JFYWNoKChoZWFkRGF0YSkgPT4ge1xuICAgICAgICAgICAgdGFibGVGaWVsZHMucHVzaChoZWFkRGF0YS5maWVsZCk7XG4gICAgICAgIH0pO1xuICAgICAgICBtb3JlSW5mbz8uZm9yRWFjaCgobW9yZUluZm9EYXRhKSA9PiB7XG4gICAgICAgICAgICB0YWJsZUZpZWxkcy5wdXNoKG1vcmVJbmZvRGF0YS5maWVsZCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goKHYpID0+IHtcbiAgICAgICAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoZGF0YVt2XSkuZm9yRWFjaCgodnYpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlRmllbGRzLmluY2x1ZGVzKHZ2KSAmJlxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgZGF0YVt2XVt2dl0gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgIGRhdGFbdl1bdnZdLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoc2VhcmNoVGV4dC50b0xvd2VyQ2FzZSgpLnRyaW0oKSkgJiZcbiAgICAgICAgICAgICAgICAgICAgIWZvdW5kXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKGRhdGFbdl0pO1xuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYXJyO1xuICAgIH07XG5cbiAgICBjb25zdCBnZXRSb3dEYXRhID0gKCkgPT4ge1xuICAgICAgICBsZXQgYXJyID0gW107XG4gICAgICAgIGlmIChzZWFyY2hUeXBlID09PSAnYWxsJykge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMocm93RGF0YSkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IG5ld0FyciA9IFtdO1xuICAgICAgICAgICAgICAgIGlmIChzZWFyY2hUZXh0ICYmIHNlYXJjaFRleHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0FyciA9IGZpbmRCeU1hdGNoaW5nVmFsdWUocm93RGF0YVtrZXldKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXdBcnIgPSBPYmplY3Qua2V5cyhyb3dEYXRhW2tleV0pLm1hcCgodmFsKSA9PiByb3dEYXRhW2tleV1bdmFsXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFyciA9IGFyci5jb25jYXQobmV3QXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJyID0gZmluZEJ5TWF0Y2hpbmdWYWx1ZShyb3dEYXRhW3NlYXJjaFR5cGVdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNvcnQgdGhlIGFycmF5IGJhc2VkIG9uIHRoZSBzb3J0IHZhbHVlXG4gICAgICAgIGNvbnN0IHNvcnRlZEFyciA9IGFyci5zb3J0KChyb3dBLCByb3dCKSA9PiB7XG4gICAgICAgICAgICBpZiAoc29ydERpciA9PT0gJ2FzYycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcm93QVtzb3J0S2V5XSA+IHJvd0Jbc29ydEtleV0gPyAxIDogLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc29ydERpciA9PT0gJ2Rlc2MnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJvd0Jbc29ydEtleV0gPiByb3dBW3NvcnRLZXldID8gMSA6IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCB1cGRhdGVkQXJyID0gc29ydGVkQXJyLnNsaWNlKGN1cnJlbnRQYWdlICogcGFnZVNpemUsIChjdXJyZW50UGFnZSArIDEpICogcGFnZVNpemUpO1xuXG4gICAgICAgIGlmIChjdXJyZW50UGFnZSA+IDAgJiYgIXVwZGF0ZWRBcnIubGVuZ3RoKSB7XG4gICAgICAgICAgICB1cGRhdGVkQXJyID0gc29ydGVkQXJyLnNsaWNlKChjdXJyZW50UGFnZSAtIDEpICogcGFnZVNpemUsIHBhZ2VTaXplKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbdXBkYXRlZEFyciwgYXJyLmxlbmd0aF07XG4gICAgfTtcblxuICAgIGlmIChlcnJvcj8udWNjRXJyb3JDb2RlKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cblxuICAgIGlmIChsb2FkaW5nKSB7XG4gICAgICAgIHJldHVybiA8V2FpdFNwaW5uZXJXcmFwcGVyIC8+O1xuICAgIH1cblxuICAgIGNvbnN0IFtmaWx0ZXJlZERhdGEsIHRvdGFsRWxlbWVudF0gPSBnZXRSb3dEYXRhKCk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgICAgPFRhYmxlSGVhZGVyXG4gICAgICAgICAgICAgICAgcGFnZT17cGFnZX1cbiAgICAgICAgICAgICAgICBzZXJ2aWNlcz17c2VydmljZXN9XG4gICAgICAgICAgICAgICAgdG90YWxFbGVtZW50PXt0b3RhbEVsZW1lbnR9XG4gICAgICAgICAgICAgICAgaGFuZGxlUmVxdWVzdE1vZGFsT3Blbj17aGFuZGxlUmVxdWVzdE1vZGFsT3Blbn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Q3VzdG9tVGFibGVcbiAgICAgICAgICAgICAgICBwYWdlPXtwYWdlfVxuICAgICAgICAgICAgICAgIHNlcnZpY2VOYW1lPXtzZXJ2aWNlTmFtZX1cbiAgICAgICAgICAgICAgICBkYXRhPXtmaWx0ZXJlZERhdGF9XG4gICAgICAgICAgICAgICAgaGFuZGxlVG9nZ2xlQWN0aW9uQ2xpY2s9eyhyb3cpID0+IGNoYW5nZVRvZ2dsZVN0YXR1cyhyb3cpfVxuICAgICAgICAgICAgICAgIGhhbmRsZVNvcnQ9e2hhbmRsZVNvcnR9XG4gICAgICAgICAgICAgICAgc29ydERpcj17c29ydERpcn1cbiAgICAgICAgICAgICAgICBzb3J0S2V5PXtzb3J0S2V5fVxuICAgICAgICAgICAgICAgIGhhbmRsZU9wZW5QYWdlU3R5bGVEaWFsb2c9e2hhbmRsZU9wZW5QYWdlU3R5bGVEaWFsb2d9XG4gICAgICAgICAgICAvPlxuICAgICAgICA8Lz5cbiAgICApO1xufVxuXG5UYWJsZVdyYXBwZXIucHJvcFR5cGVzID0ge1xuICAgIHBhZ2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgc2VydmljZU5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgaGFuZGxlUmVxdWVzdE1vZGFsT3BlbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGFuZGxlT3BlblBhZ2VTdHlsZURpYWxvZzogUHJvcFR5cGVzLmZ1bmMsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBtZW1vKFRhYmxlV3JhcHBlcik7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IExpbmsgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9MaW5rJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIEVSUjAwMDE6IChcbiAgICAgICAgPD5cbiAgICAgICAgICAgIFRoaXMgaXMgbm9ybWFsIG9uIFNwbHVuayBzZWFyY2ggaGVhZHMgYXMgdGhleSBkbyBub3QgcmVxdWlyZSBhbiBJbnB1dCBwYWdlLiBDaGVjayB5b3VyIGluc3RhbGxhdGlvbiBvciByZXR1cm4gdG8gdGhlIDxMaW5rIHRvPVwiY29uZmlndXJhdGlvblwiPmNvbmZpZ3VyYXRpb24gcGFnZTwvTGluaz4uXG4gICAgICAgIDwvPlxuICAgICksXG4gICAgRVJSMDAwMjogJ0NvbmZpZ3VyYXRpb24gcGFnZSBmYWlsZWQgdG8gbG9hZCwgdGhlIHNlcnZlciByZXBvcnRlZCBpbnRlcm5hbCBlcnJvcnMgd2hpY2ggbWF5IGluZGljYXRlIHlvdSBkbyBub3QgaGF2ZSBhY2Nlc3MgdG8gdGhpcyBwYWdlLicsXG4gICAgRVJSMDAwMzogJ0ZhaWxlZCB0byBsb2FkIGNvbnRlbnQgZHVlIHRvIG5vIHJlc3BvbnNlIGZyb20gc2VydmVyIScsXG4gICAgRVJSMDAwNDogJ0ZhaWxlZCB0byBsb2FkIGNvbnRlbnQgZHVlIHRvIGZhaWxlZCByZXF1ZXN0IHByb2Nlc3NpbmchJyxcbiAgICBFUlIwMDA1OiAnRmFpbGVkIHRvIGxvYWQgY3VycmVudCBzdGF0ZSBmb3Igc2VsZWN0ZWQgZW50aXR5IGluIGZvcm0hJyxcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IEhlYWRpbmcgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9IZWFkaW5nJztcbmltcG9ydCB7IF8gfSBmcm9tICdAc3BsdW5rL3VpLXV0aWxzL2kxOG4nO1xuaW1wb3J0IENhcmQgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9DYXJkJztcbmltcG9ydCBXYXJuaW5nSWNvbiBmcm9tICdAc3BsdW5rL3JlYWN0LWljb25zL1dhcm5pbmcnXG5pbXBvcnQgZXJyb3JDb2RlcyBmcm9tICcuLi9jb25zdGFudHMvZXJyb3JDb2Rlcyc7XG5cbmNsYXNzIEVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHsgZXJyb3JDb2RlOiBudWxsLCBlcnJvcjogbnVsbCwgZXJyb3JJbmZvOiBudWxsIH07XG4gICAgfVxuXG4gICAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgICAgICAvLyBVcGRhdGUgc3RhdGUgc28gdGhlIG5leHQgcmVuZGVyIHdpbGwgc2hvdyB0aGUgZmFsbGJhY2sgVUkuXG4gICAgICAgIHJldHVybiB7IGVycm9yQ29kZTogZXJyb3IudWNjRXJyb3JDb2RlIH07XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGVycm9ySW5mbykge1xuICAgICAgICAvLyBDYXRjaCBlcnJvcnMgaW4gYW55IGNvbXBvbmVudHMgYmVsb3cgYW5kIHJlLXJlbmRlciB3aXRoIGVycm9yIG1lc3NhZ2VcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgIGVycm9ySW5mbyxcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFlvdSBjYW4gYWxzbyBsb2cgZXJyb3IgbWVzc2FnZXMgdG8gYW4gZXJyb3IgcmVwb3J0aW5nIHNlcnZpY2UgaGVyZVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIEVycm9yIHBhdGhcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGRpdiBhbGlnbj1cImNlbnRlclwiIHN0eWxlPXt7IG1hcmdpblRvcCA6IFwiMTAlXCIgfX0+XG4gICAgICAgICAgICAgICAgPENhcmQgc3R5bGU9e3sgYm94U2hhZG93IDogXCIxMHB4IDEwcHggNXB4ICNhYWFhYWFcIiB9fSA+XG4gICAgICAgICAgICAgICAgICAgIDxDYXJkLkhlYWRlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxIZWFkaW5nIHN0eWxlPXt7IHRleHRBbGlnbjpcImNlbnRlclwiIH19IGxldmVsPXsyfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8V2FybmluZ0ljb24gc3R5bGU9e3sgZm9udFNpemU6IFwiMTIwcHhcIiwgY29sb3I6IFwiI2ZmOTkwMFwiIH19IC8+PGJyLz48YnIvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmVycm9yQ29kZSA9PT0gJ0VSUjAwMDEnID8gXygnRmFpbGVkIHRvIGxvYWQgSW5wdXRzIFBhZ2UnKSA6IF8oJ1NvbWV0aGluZyB3ZW50IHdyb25nIScpfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9IZWFkaW5nPlxuICAgICAgICAgICAgICAgICAgICA8L0NhcmQuSGVhZGVyPlxuICAgICAgICAgICAgICAgICAgICA8Q2FyZC5Cb2R5PlxuICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuZXJyb3JDb2RlID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtfKGVycm9yQ29kZXNbdGhpcy5zdGF0ZS5lcnJvckNvZGVdKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyLz48YnIvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGV0YWlscyBzdHlsZT17eyB3aGl0ZVNwYWNlOiAncHJlLXdyYXAnIH19PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmVycm9yPy50b1N0cmluZygpfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kZXRhaWxzPlxuICAgICAgICAgICAgICAgICAgICA8L0NhcmQuQm9keT5cbiAgICAgICAgICAgICAgICAgICAgPENhcmQuRm9vdGVyIHNob3dCb3JkZXI9e2ZhbHNlfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmVycm9yQ29kZSA/IHRoaXMuc3RhdGUuZXJyb3JDb2RlIDogbnVsbH1cbiAgICAgICAgICAgICAgICAgICAgPC9DYXJkLkZvb3Rlcj5cbiAgICAgICAgICAgICAgICA8L0NhcmQ+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIC8vIE5vcm1hbGx5LCBqdXN0IHJlbmRlciBjaGlsZHJlblxuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9XG59XG5cbkVycm9yQm91bmRhcnkucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMubm9kZSksIFByb3BUeXBlcy5ub2RlXSkuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEVycm9yQm91bmRhcnk7XG4iXSwic291cmNlUm9vdCI6IiJ9